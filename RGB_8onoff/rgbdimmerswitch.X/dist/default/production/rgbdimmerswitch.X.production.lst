

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 27 12:07:39 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1526
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	stringtext1,global,class=STRCODE,delta=2
    12                           	psect	stringtext2,global,class=STRCODE,delta=2
    13                           	psect	stringtext3,global,class=STRCODE,delta=2
    14                           	psect	stringtext4,global,class=STRCODE,delta=2
    15                           	psect	stringtext5,global,class=STRCODE,delta=2
    16                           	psect	stringtext6,global,class=STRCODE,delta=2
    17                           	psect	stringtext7,global,class=STRCODE,delta=2
    18                           	psect	stringtext8,global,class=STRCODE,delta=2
    19                           	psect	stringtext9,global,class=STRCODE,delta=2
    20                           	psect	stringtext10,global,class=STRCODE,delta=2
    21                           	psect	cinit,global,class=CODE,merge=1,delta=2
    22                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    29                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    30                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    31                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    32                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    33                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    34                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    35                           	psect	inittext,global,class=CODE,delta=2
    36                           	psect	clrtext,global,class=CODE,delta=2
    37                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    38                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    39                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    40                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    41                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    42                           	psect	swtext1,local,class=CONST,delta=2
    43                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text6,local,class=CODE,merge=1,delta=2
    49                           	psect	text7,local,class=CODE,merge=1,delta=2
    50                           	psect	text8,local,class=CODE,merge=1,delta=2
    51                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text12,local,class=CODE,merge=1,delta=2
    55                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text14,local,class=CODE,merge=1,delta=2
    57                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text16,local,class=CODE,merge=1,delta=2
    59                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text25,local,class=CODE,merge=1,delta=2
    68                           	psect	swtext2,local,class=CONST,delta=2
    69                           	psect	text26,local,class=CODE,merge=1,delta=2
    70                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text30,local,class=CODE,merge=1,delta=2
    74                           	psect	text31,local,class=CODE,merge=1,delta=2
    75                           	psect	text32,local,class=CODE,merge=1,delta=2
    76                           	psect	text33,local,class=CODE,merge=1,delta=2
    77                           	psect	text34,local,class=CODE,merge=1,delta=2
    78                           	psect	text35,local,class=CODE,merge=1,delta=2
    79                           	psect	text36,local,class=CODE,merge=1,delta=2
    80                           	psect	text37,local,class=CODE,merge=1,delta=2
    81                           	psect	text38,local,class=CODE,merge=1,delta=2
    82                           	psect	text39,local,class=CODE,merge=1,delta=2
    83                           	psect	text40,local,class=CODE,merge=1,delta=2
    84                           	psect	text41,local,class=CODE,merge=1,delta=2
    85                           	psect	text42,local,class=CODE,merge=1,delta=2
    86                           	psect	text43,local,class=CODE,merge=1,delta=2
    87                           	psect	text44,local,class=CODE,merge=1,delta=2
    88                           	psect	text45,local,class=CODE,merge=1,delta=2
    89                           	psect	text46,local,class=CODE,merge=1,delta=2
    90                           	psect	text47,local,class=CODE,merge=1,delta=2
    91                           	psect	text48,local,class=CODE,merge=1,delta=2
    92                           	psect	intentry,global,class=CODE,delta=2
    93                           	psect	text50,local,class=CODE,merge=1,delta=2
    94                           	dabs	1,0x7E,2
    95  0000                     
    96                           ; Version 1.45
    97                           ; Generated 16/11/2017 GMT
    98                           ; 
    99                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC16F1526 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  008F                     	;# 
   164  0090                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  010F                     	;# 
   183  0110                     	;# 
   184  0116                     	;# 
   185  0117                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018F                     	;# 
   190  0190                     	;# 
   191  0191                     	;# 
   192  0191                     	;# 
   193  0192                     	;# 
   194  0193                     	;# 
   195  0193                     	;# 
   196  0194                     	;# 
   197  0195                     	;# 
   198  0196                     	;# 
   199  0197                     	;# 
   200  0199                     	;# 
   201  0199                     	;# 
   202  0199                     	;# 
   203  019A                     	;# 
   204  019A                     	;# 
   205  019A                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019D                     	;# 
   215  019D                     	;# 
   216  019D                     	;# 
   217  019E                     	;# 
   218  019E                     	;# 
   219  019E                     	;# 
   220  019F                     	;# 
   221  019F                     	;# 
   222  019F                     	;# 
   223  020D                     	;# 
   224  020F                     	;# 
   225  0210                     	;# 
   226  0211                     	;# 
   227  0211                     	;# 
   228  0212                     	;# 
   229  0212                     	;# 
   230  0213                     	;# 
   231  0213                     	;# 
   232  0214                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0216                     	;# 
   238  0216                     	;# 
   239  0217                     	;# 
   240  0217                     	;# 
   241  0219                     	;# 
   242  021A                     	;# 
   243  021B                     	;# 
   244  021C                     	;# 
   245  021D                     	;# 
   246  021E                     	;# 
   247  021F                     	;# 
   248  028C                     	;# 
   249  028D                     	;# 
   250  0291                     	;# 
   251  0291                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0298                     	;# 
   255  0298                     	;# 
   256  0299                     	;# 
   257  029A                     	;# 
   258  029D                     	;# 
   259  029E                     	;# 
   260  029F                     	;# 
   261  030C                     	;# 
   262  030D                     	;# 
   263  0311                     	;# 
   264  0311                     	;# 
   265  0312                     	;# 
   266  0313                     	;# 
   267  0318                     	;# 
   268  0318                     	;# 
   269  0319                     	;# 
   270  031A                     	;# 
   271  031C                     	;# 
   272  031C                     	;# 
   273  031D                     	;# 
   274  031E                     	;# 
   275  038C                     	;# 
   276  038D                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  040C                     	;# 
   281  040D                     	;# 
   282  0411                     	;# 
   283  0411                     	;# 
   284  0412                     	;# 
   285  0413                     	;# 
   286  0414                     	;# 
   287  0415                     	;# 
   288  0416                     	;# 
   289  0417                     	;# 
   290  0418                     	;# 
   291  0418                     	;# 
   292  0419                     	;# 
   293  041A                     	;# 
   294  041B                     	;# 
   295  041C                     	;# 
   296  041D                     	;# 
   297  041E                     	;# 
   298  048D                     	;# 
   299  0491                     	;# 
   300  0491                     	;# 
   301  0492                     	;# 
   302  0492                     	;# 
   303  0493                     	;# 
   304  0493                     	;# 
   305  0493                     	;# 
   306  0494                     	;# 
   307  0494                     	;# 
   308  0495                     	;# 
   309  0495                     	;# 
   310  0496                     	;# 
   311  0496                     	;# 
   312  0497                     	;# 
   313  0497                     	;# 
   314  0595                     	;# 
   315  0596                     	;# 
   316  0597                     	;# 
   317  059C                     	;# 
   318  059D                     	;# 
   319  059E                     	;# 
   320  0611                     	;# 
   321  0611                     	;# 
   322  0612                     	;# 
   323  0613                     	;# 
   324  0614                     	;# 
   325  0614                     	;# 
   326  0615                     	;# 
   327  0616                     	;# 
   328  0617                     	;# 
   329  0617                     	;# 
   330  0618                     	;# 
   331  0619                     	;# 
   332  061A                     	;# 
   333  061A                     	;# 
   334  061B                     	;# 
   335  061C                     	;# 
   336  061D                     	;# 
   337  061D                     	;# 
   338  061E                     	;# 
   339  061F                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351                           
   352                           	psect	idataBANK0
   353  0003                     __pidataBANK0:	
   354                           
   355                           ;initializer for _charchildLock
   356  0003  3430               	retlw	48
   357                           
   358                           	psect	idataBANK2
   359  11EC                     __pidataBANK2:	
   360                           
   361                           ;initializer for applianceControl@F4006
   362  11EC  3423               	retlw	35
   363  11ED  3400               	retlw	0
   364                           
   365                           ;initializer for applianceControl@F4004
   366  11EE  3423               	retlw	35
   367  11EF  3400               	retlw	0
   368                           
   369                           ;initializer for _charSwitchState
   370  11F0  3430               	retlw	48
   371                           
   372                           ;initializer for _levelofGreenLed_LSB
   373  11F1  3430               	retlw	48
   374                           
   375                           ;initializer for _levelofGreenLed_MSB
   376  11F2  3430               	retlw	48
   377                           
   378                           ;initializer for _levelofRedLed_LSB
   379  11F3  3430               	retlw	48
   380                           
   381                           ;initializer for _levelofRedLed_MSB
   382  11F4  3430               	retlw	48
   383                           
   384                           ;initializer for _levelofBlueLed_LSB
   385  11F5  3430               	retlw	48
   386                           
   387                           ;initializer for _levelofBlueLed_MSB
   388  11F6  3430               	retlw	48
   389                           
   390                           	psect	idataBANK3
   391  14D0                     __pidataBANK3:	
   392                           
   393                           ;initializer for _tempReceivedDataBuffer
   394  14D0  3423               	retlw	35
   395  14D1  3400               	retlw	0
   396  14D2  3400               	retlw	0
   397  14D3  3400               	retlw	0
   398  14D4  3400               	retlw	0
   399  14D5  3400               	retlw	0
   400  14D6  3400               	retlw	0
   401  14D7  3400               	retlw	0
   402  14D8  3400               	retlw	0
   403  14D9  3400               	retlw	0
   404  14DA  3400               	retlw	0
   405  14DB  3400               	retlw	0
   406  14DC  3400               	retlw	0
   407  14DD  3400               	retlw	0
   408  14DE  3400               	retlw	0
   409  14DF  3400               	retlw	0
   410  14E0  3400               	retlw	0
   411  14E1  3400               	retlw	0
   412  14E2  3400               	retlw	0
   413  14E3  3400               	retlw	0
   414  14E4  3400               	retlw	0
   415  14E5  3400               	retlw	0
   416  14E6  3400               	retlw	0
   417  14E7  3400               	retlw	0
   418                           
   419                           ;initializer for _copy_parentalLockBuffer
   420  14E8  3430               	retlw	48
   421  14E9  3400               	retlw	0
   422  14EA  3400               	retlw	0
   423  14EB  3400               	retlw	0
   424  14EC  3400               	retlw	0
   425  14ED  3400               	retlw	0
   426  14EE  3400               	retlw	0
   427  14EF  3400               	retlw	0
   428  14F0  3400               	retlw	0
   429  14F1  3400               	retlw	0
   430  14F2  3400               	retlw	0
   431  14F3  3400               	retlw	0
   432  14F4  3400               	retlw	0
   433  14F5  3400               	retlw	0
   434  14F6  3400               	retlw	0
   435  14F7  3400               	retlw	0
   436  14F8  3400               	retlw	0
   437  14F9  3400               	retlw	0
   438                           
   439                           ;initializer for _ErrorNames
   440  14FA  3423               	retlw	35
   441  14FB  3423               	retlw	35
   442  14FC  3423               	retlw	35
   443  14FD  3423               	retlw	35
   444  14FE  3400               	retlw	0
   445                           
   446                           	psect	idataBANK4
   447  13C1                     __pidataBANK4:	
   448                           
   449                           ;initializer for _copymainReceivedDataBuffer
   450  13C1  3423               	retlw	35
   451  13C2  3400               	retlw	0
   452  13C3  3400               	retlw	0
   453  13C4  3400               	retlw	0
   454  13C5  3400               	retlw	0
   455  13C6  3400               	retlw	0
   456  13C7  3400               	retlw	0
   457  13C8  3400               	retlw	0
   458  13C9  3400               	retlw	0
   459  13CA  3400               	retlw	0
   460  13CB  3400               	retlw	0
   461  13CC  3400               	retlw	0
   462  13CD  3400               	retlw	0
   463  13CE  3400               	retlw	0
   464  13CF  3400               	retlw	0
   465  13D0  3400               	retlw	0
   466  13D1  3400               	retlw	0
   467  13D2  3400               	retlw	0
   468  13D3  3400               	retlw	0
   469  13D4  3400               	retlw	0
   470  13D5  3400               	retlw	0
   471  13D6  3400               	retlw	0
   472  13D7  3400               	retlw	0
   473  13D8  3400               	retlw	0
   474  13D9  3400               	retlw	0
   475  13DA  3400               	retlw	0
   476  13DB  3400               	retlw	0
   477  13DC  3400               	retlw	0
   478  13DD  3400               	retlw	0
   479  13DE  3400               	retlw	0
   480  13DF  3400               	retlw	0
   481  13E0  3400               	retlw	0
   482                           
   483                           	psect	idataBANK5
   484  1591                     __pidataBANK5:	
   485                           
   486                           ;initializer for _mainReceivedDataBuffer
   487  1591  3423               	retlw	35
   488  1592  3400               	retlw	0
   489  1593  3400               	retlw	0
   490  1594  3400               	retlw	0
   491  1595  3400               	retlw	0
   492  1596  3400               	retlw	0
   493  1597  3400               	retlw	0
   494  1598  3400               	retlw	0
   495  1599  3400               	retlw	0
   496  159A  3400               	retlw	0
   497  159B  3400               	retlw	0
   498  159C  3400               	retlw	0
   499  159D  3400               	retlw	0
   500  159E  3400               	retlw	0
   501  159F  3400               	retlw	0
   502  15A0  3400               	retlw	0
   503  15A1  3400               	retlw	0
   504  15A2  3400               	retlw	0
   505  15A3  3400               	retlw	0
   506  15A4  3400               	retlw	0
   507  15A5  3400               	retlw	0
   508  15A6  3400               	retlw	0
   509  15A7  3400               	retlw	0
   510  15A8  3400               	retlw	0
   511  15A9  3400               	retlw	0
   512  15AA  3400               	retlw	0
   513  15AB  3400               	retlw	0
   514  15AC  3400               	retlw	0
   515  15AD  3400               	retlw	0
   516  15AE  3400               	retlw	0
   517  15AF  3400               	retlw	0
   518  15B0  3400               	retlw	0
   519                           
   520                           ;initializer for _parentalLockBuffer
   521  15B1  3430               	retlw	48
   522  15B2  3400               	retlw	0
   523  15B3  3400               	retlw	0
   524  15B4  3400               	retlw	0
   525  15B5  3400               	retlw	0
   526  15B6  3400               	retlw	0
   527  15B7  3400               	retlw	0
   528  15B8  3400               	retlw	0
   529  15B9  3400               	retlw	0
   530  15BA  3400               	retlw	0
   531  15BB  3400               	retlw	0
   532  15BC  3400               	retlw	0
   533  15BD  3400               	retlw	0
   534  15BE  3400               	retlw	0
   535  15BF  3400               	retlw	0
   536  15C0  3400               	retlw	0
   537  15C1  3400               	retlw	0
   538  15C2  3400               	retlw	0
   539                           
   540                           	psect	idataBANK6
   541  13A1                     __pidataBANK6:	
   542                           
   543                           ;initializer for _tempRGBReceivedDataBuffer
   544  13A1  3423               	retlw	35
   545  13A2  3400               	retlw	0
   546  13A3  3400               	retlw	0
   547  13A4  3400               	retlw	0
   548  13A5  3400               	retlw	0
   549  13A6  3400               	retlw	0
   550  13A7  3400               	retlw	0
   551  13A8  3400               	retlw	0
   552  13A9  3400               	retlw	0
   553  13AA  3400               	retlw	0
   554  13AB  3400               	retlw	0
   555  13AC  3400               	retlw	0
   556  13AD  3400               	retlw	0
   557  13AE  3400               	retlw	0
   558  13AF  3400               	retlw	0
   559  13B0  3400               	retlw	0
   560  13B1  3400               	retlw	0
   561  13B2  3400               	retlw	0
   562  13B3  3400               	retlw	0
   563  13B4  3400               	retlw	0
   564  13B5  3400               	retlw	0
   565  13B6  3400               	retlw	0
   566  13B7  3400               	retlw	0
   567  13B8  3400               	retlw	0
   568  13B9  3400               	retlw	0
   569  13BA  3400               	retlw	0
   570  13BB  3400               	retlw	0
   571  13BC  3400               	retlw	0
   572  13BD  3400               	retlw	0
   573  13BE  3400               	retlw	0
   574  13BF  3400               	retlw	0
   575  13C0  3400               	retlw	0
   576                           
   577                           	psect	idataBANK7
   578  165E                     __pidataBANK7:	
   579                           
   580                           ;initializer for _currentStateBuffer
   581  165E  3423               	retlw	35
   582  165F  3400               	retlw	0
   583  1660  3400               	retlw	0
   584  1661  3400               	retlw	0
   585  1662  3400               	retlw	0
   586  1663  3400               	retlw	0
   587  1664  3400               	retlw	0
   588  1665  3400               	retlw	0
   589  1666  3400               	retlw	0
   590  1667  3400               	retlw	0
   591  1668  3400               	retlw	0
   592  1669  3400               	retlw	0
   593  166A  3400               	retlw	0
   594  166B  3400               	retlw	0
   595  166C  3400               	retlw	0
   596  166D  3400               	retlw	0
   597  166E  3400               	retlw	0
   598  166F  3400               	retlw	0
   599  1670  3400               	retlw	0
   600  1671  3400               	retlw	0
   601  1672  3400               	retlw	0
   602  1673  3400               	retlw	0
   603  1674  3400               	retlw	0
   604  1675  3400               	retlw	0
   605  1676  3400               	retlw	0
   606  1677  3400               	retlw	0
   607  1678  3400               	retlw	0
   608  1679  3400               	retlw	0
   609  167A  3400               	retlw	0
   610  167B  3400               	retlw	0
   611  167C  3400               	retlw	0
   612  167D  3400               	retlw	0
   613  167E  3400               	retlw	0
   614  167F  3400               	retlw	0
   615  1680  3400               	retlw	0
   616  1681  3400               	retlw	0
   617  1682  3400               	retlw	0
   618  1683  3400               	retlw	0
   619  1684  3400               	retlw	0
   620  1685  3400               	retlw	0
   621  1686  3400               	retlw	0
   622  1687  3400               	retlw	0
   623  1688  3400               	retlw	0
   624  1689  3400               	retlw	0
   625  168A  3400               	retlw	0
   626  168B  3400               	retlw	0
   627  168C  3400               	retlw	0
   628  168D  3400               	retlw	0
   629  168E  3400               	retlw	0
   630  168F  3400               	retlw	0
   631  1690  3400               	retlw	0
   632  1691  3400               	retlw	0
   633  1692  3400               	retlw	0
   634  1693  3400               	retlw	0
   635  1694  3400               	retlw	0
   636  1695  3400               	retlw	0
   637  1696  3400               	retlw	0
   638  1697  3400               	retlw	0
   639  1698  3400               	retlw	0
   640  1699  3400               	retlw	0
   641  169A  3400               	retlw	0
   642  169B  3400               	retlw	0
   643  169C  3400               	retlw	0
   644  169D  3400               	retlw	0
   645  169E  3400               	retlw	0
   646  169F  3400               	retlw	0
   647  16A0  3400               	retlw	0
   648  16A1  3400               	retlw	0
   649  16A2  3400               	retlw	0
   650  16A3  3400               	retlw	0
   651  16A4  3400               	retlw	0
   652  16A5  3400               	retlw	0
   653  16A6  3400               	retlw	0
   654  16A7  3400               	retlw	0
   655                           
   656                           	psect	stringtext1
   657  1800                     __pstringtext1:	
   658  1800                     _hexpowers:	
   659  1800  3401               	retlw	1
   660  1801  3400               	retlw	0
   661  1802  3410               	retlw	16
   662  1803  3400               	retlw	0
   663  1804  3400               	retlw	0
   664  1805  3401               	retlw	1
   665  1806  3400               	retlw	0
   666  1807  3410               	retlw	16
   667  1808                     __end_of_hexpowers:	
   668  001A                     _TMR2	set	26
   669  001C                     _T2CON	set	28
   670  0019                     _T1GCON	set	25
   671  0018                     _T1CON	set	24
   672  000D                     _PORTBbits	set	13
   673  0016                     _TMR1L	set	22
   674  0017                     _TMR1H	set	23
   675  0014                     _PIR4bits	set	20
   676  0013                     _PIR3bits	set	19
   677  0018                     _T1CONbits	set	24
   678  001B                     _PR2	set	27
   679  001C                     _T2CONbits	set	28
   680  0011                     _PIR1bits	set	17
   681  0010                     _PORTEbits	set	16
   682  000F                     _PORTDbits	set	15
   683  005E                     _PEIE	set	94
   684  005F                     _GIE	set	95
   685  00A2                     _CCP7IF	set	162
   686  00A6                     _CCP9IF	set	166
   687  00A7                     _CCP10IF	set	167
   688  008D                     _RC1IF	set	141
   689  0094                     _PIE4bits	set	148
   690  008E                     _TRISCbits	set	142
   691  0090                     _TRISEbits	set	144
   692  008D                     _TRISBbits	set	141
   693  008F                     _TRISDbits	set	143
   694  0093                     _PIE3bits	set	147
   695  0091                     _PIE1bits	set	145
   696  018C                     _ANSELA	set	396
   697  018D                     _ANSELB	set	397
   698  018F                     _ANSELD	set	399
   699  0190                     _ANSELE	set	400
   700  019C                     _SP1BRGH	set	412
   701  019B                     _SP1BRGL	set	411
   702  019E                     _TX1STA	set	414
   703  019D                     _RC1STA	set	413
   704  019F                     _BAUD1CON	set	415
   705  0199                     _RC1REG	set	409
   706  019D                     _RC1STAbits	set	413
   707  019A                     _TX1REG	set	410
   708  019E                     _TX1STAbits	set	414
   709  020D                     _WPUB	set	525
   710  020F                     _WPUD	set	527
   711  0210                     _WPUE	set	528
   712  028C                     _PORTFbits	set	652
   713  028D                     _PORTGbits	set	653
   714  030C                     _TRISFbits	set	780
   715  030D                     _TRISGbits	set	781
   716  040C                     _ANSELF	set	1036
   717  040D                     _ANSELG	set	1037
   718  041C                     _TMR6	set	1052
   719  041E                     _T6CON	set	1054
   720  0415                     _TMR4	set	1045
   721  0417                     _T4CON	set	1047
   722  041B                     _T5GCON	set	1051
   723  041A                     _T5CON	set	1050
   724  0414                     _T3GCON	set	1044
   725  0413                     _T3CON	set	1043
   726  0418                     _TMR5L	set	1048
   727  0419                     _TMR5H	set	1049
   728  0411                     _TMR3L	set	1041
   729  0412                     _TMR3H	set	1042
   730  041A                     _T5CONbits	set	1050
   731  041D                     _PR6	set	1053
   732  041E                     _T6CONbits	set	1054
   733  0413                     _T3CONbits	set	1043
   734  0416                     _PR4	set	1046
   735  0417                     _T4CONbits	set	1047
   736  048D                     _WPUG	set	1165
   737  0617                     _CCPR8L	set	1559
   738  0618                     _CCPR8H	set	1560
   739  061D                     _CCPR10L	set	1565
   740  061E                     _CCPR10H	set	1566
   741  061F                     _CCP10CON	set	1567
   742  0614                     _CCPR7L	set	1556
   743  0615                     _CCPR7H	set	1557
   744  0616                     _CCP7CON	set	1558
   745  061A                     _CCPR9L	set	1562
   746  061B                     _CCPR9H	set	1563
   747  061C                     _CCP9CON	set	1564
   748  1808                     STR_20:	
   749  1808  3430               	retlw	48	;'0'
   750  1809  3431               	retlw	49	;'1'
   751  180A  3432               	retlw	50	;'2'
   752  180B  3433               	retlw	51	;'3'
   753  180C  3434               	retlw	52	;'4'
   754  180D  3435               	retlw	53	;'5'
   755  180E  3436               	retlw	54	;'6'
   756  180F  3437               	retlw	55	;'7'
   757  1810  3438               	retlw	56	;'8'
   758  1811  3439               	retlw	57	;'9'
   759  1812  3441               	retlw	65	;'A'
   760  1813  3442               	retlw	66	;'B'
   761  1814  3443               	retlw	67	;'C'
   762  1815  3444               	retlw	68	;'D'
   763  1816  3445               	retlw	69	;'E'
   764  1817  3446               	retlw	70	;'F'
   765  1818  3400               	retlw	0
   766                           
   767                           	psect	stringtext2
   768  1819                     __pstringtext2:	
   769  1819                     STR_3:	
   770  1819  3441               	retlw	65	;'A'
   771  181A  3443               	retlw	67	;'C'
   772  181B  3454               	retlw	84	;'T'
   773  181C  3441               	retlw	65	;'A'
   774  181D  3443               	retlw	67	;'C'
   775  181E  344B               	retlw	75	;'K'
   776  181F  3400               	retlw	0
   777                           
   778                           	psect	stringtext3
   779  1820                     __pstringtext3:	
   780  1820                     STR_19:	
   781  1820  3445               	retlw	69	;'E'
   782  1821  3452               	retlw	82	;'R'
   783  1822  344C               	retlw	76	;'L'
   784  1823  3453               	retlw	83	;'S'
   785  1824  3400               	retlw	0
   786                           
   787                           	psect	stringtext4
   788  1825                     __pstringtext4:	
   789  1825                     STR_14:	
   790  1825  3445               	retlw	69	;'E'
   791  1826  3452               	retlw	82	;'R'
   792  1827  344F               	retlw	79	;'O'
   793  1828  3456               	retlw	86	;'V'
   794  1829  3400               	retlw	0
   795                           
   796                           	psect	stringtext5
   797  182A                     __pstringtext5:	
   798  182A                     STR_15:	
   799  182A  3445               	retlw	69	;'E'
   800  182B  3452               	retlw	82	;'R'
   801  182C  3452               	retlw	82	;'R'
   802  182D  3458               	retlw	88	;'X'
   803  182E  3400               	retlw	0
   804                           
   805                           	psect	stringtext6
   806  182F                     __pstringtext6:	
   807  182F                     STR_10:	
   808  182F  3431               	retlw	49	;'1'
   809  1830  3430               	retlw	48	;'0'
   810  1831  3430               	retlw	48	;'0'
   811  1832  347C               	retlw	124	;'|'
   812  1833  3400               	retlw	0
   813                           
   814                           	psect	stringtext7
   815  1834                     __pstringtext7:	
   816  1834                     STR_17:	
   817  1834  3452               	retlw	82	;'R'
   818  1835  3447               	retlw	71	;'G'
   819  1836  3442               	retlw	66	;'B'
   820  1837  3400               	retlw	0
   821                           
   822                           	psect	stringtext8
   823  1838                     __pstringtext8:	
   824  1838                     STR_11:	
   825  1838  3425               	retlw	37	;'%'
   826  1839  3458               	retlw	88	;'X'
   827  183A  3400               	retlw	0
   828                           
   829                           	psect	stringtext9
   830  183B                     __pstringtext9:	
   831  183B                     STR_1:	
   832  183B  342E               	retlw	46	;'.'
   833  183C  3400               	retlw	0
   834                           
   835                           	psect	stringtext10
   836  0000                     __pstringtext10:	
   837  183B                     
   838                           ; #config settings
   839  0000                     
   840                           	psect	cinit
   841  0102                     start_initialization:	
   842  0102                     __initialization:	
   843                           
   844                           ; Initialize objects allocated to BANK0
   845  0102  3180  2003  3181   	fcall	__pidataBANK0	;fetch initializer
   846  0105  00E7               	movwf	__pdataBANK0& (0+127)
   847                           
   848                           ; Initialize objects allocated to BANK2
   849  0106  30EC               	movlw	low __pidataBANK2
   850  0107  0084               	movwf	4
   851  0108  3091               	movlw	(high __pidataBANK2)| (0+128)
   852  0109  0085               	movwf	5
   853  010A  3064               	movlw	low __pdataBANK2
   854  010B  0086               	movwf	6
   855  010C  3001               	movlw	high __pdataBANK2
   856  010D  0087               	movwf	7
   857  010E  300B               	movlw	11
   858  010F  3191  2193  3181   	fcall	init_ram
   859                           
   860                           ; Initialize objects allocated to BANK3
   861  0112  30D0               	movlw	low __pidataBANK3
   862  0113  0084               	movwf	4
   863  0114  3094               	movlw	(high __pidataBANK3)| (0+128)
   864  0115  0085               	movwf	5
   865  0116  30A0               	movlw	low __pdataBANK3
   866  0117  0086               	movwf	6
   867  0118  3001               	movlw	high __pdataBANK3
   868  0119  0087               	movwf	7
   869  011A  302F               	movlw	47
   870  011B  3191  2193  3181   	fcall	init_ram
   871                           
   872                           ; Initialize objects allocated to BANK4
   873  011E  30C1               	movlw	low __pidataBANK4
   874  011F  0084               	movwf	4
   875  0120  3093               	movlw	(high __pidataBANK4)| (0+128)
   876  0121  0085               	movwf	5
   877  0122  304E               	movlw	low __pdataBANK4
   878  0123  0086               	movwf	6
   879  0124  3002               	movlw	high __pdataBANK4
   880  0125  0087               	movwf	7
   881  0126  3020               	movlw	32
   882  0127  3191  2193  3181   	fcall	init_ram
   883                           
   884                           ; Initialize objects allocated to BANK5
   885  012A  3091               	movlw	low __pidataBANK5
   886  012B  0084               	movwf	4
   887  012C  3095               	movlw	(high __pidataBANK5)| (0+128)
   888  012D  0085               	movwf	5
   889  012E  30A0               	movlw	low __pdataBANK5
   890  012F  0086               	movwf	6
   891  0130  3002               	movlw	high __pdataBANK5
   892  0131  0087               	movwf	7
   893  0132  3032               	movlw	50
   894  0133  3191  2193  3181   	fcall	init_ram
   895                           
   896                           ; Initialize objects allocated to BANK6
   897  0136  30A1               	movlw	low __pidataBANK6
   898  0137  0084               	movwf	4
   899  0138  3093               	movlw	(high __pidataBANK6)| (0+128)
   900  0139  0085               	movwf	5
   901  013A  3020               	movlw	low __pdataBANK6
   902  013B  0086               	movwf	6
   903  013C  3003               	movlw	high __pdataBANK6
   904  013D  0087               	movwf	7
   905  013E  3020               	movlw	32
   906  013F  3191  2193  3181   	fcall	init_ram
   907                           
   908                           ; Initialize objects allocated to BANK7
   909  0142  305E               	movlw	low __pidataBANK7
   910  0143  0084               	movwf	4
   911  0144  3096               	movlw	(high __pidataBANK7)| (0+128)
   912  0145  0085               	movwf	5
   913  0146  30A0               	movlw	low __pdataBANK7
   914  0147  0086               	movwf	6
   915  0148  3003               	movlw	high __pdataBANK7
   916  0149  0087               	movwf	7
   917  014A  304A               	movlw	74
   918  014B  3191  2193  3181   	fcall	init_ram
   919                           
   920                           ; Clear objects allocated to COMMON
   921  014E  01F0               	clrf	__pbssCOMMON& (0+127)
   922  014F  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   923  0150  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   924  0151  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   925  0152  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   926  0153  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   927                           
   928                           ; Clear objects allocated to BANK0
   929  0154  305C               	movlw	low __pbssBANK0
   930  0155  0084               	movwf	4
   931  0156  3000               	movlw	high __pbssBANK0
   932  0157  0085               	movwf	5
   933  0158  300B               	movlw	11
   934  0159  3191  218D  3181   	fcall	clear_ram0
   935                           
   936                           ; Clear objects allocated to BANK1
   937  015C  0021               	movlb	1	; select bank1
   938  015D  01EB               	clrf	__pbssBANK1& (0+127)
   939  015E  01EC               	clrf	(__pbssBANK1+1)& (0+127)
   940  015F  01ED               	clrf	(__pbssBANK1+2)& (0+127)
   941  0160  01EE               	clrf	(__pbssBANK1+3)& (0+127)
   942  0161  01EF               	clrf	(__pbssBANK1+4)& (0+127)
   943                           
   944                           ; Clear objects allocated to BANK2
   945  0162  3020               	movlw	low __pbssBANK2
   946  0163  0084               	movwf	4
   947  0164  3001               	movlw	high __pbssBANK2
   948  0165  0085               	movwf	5
   949  0166  3044               	movlw	68
   950  0167  3191  218D  3181   	fcall	clear_ram0
   951                           
   952                           ; Clear objects allocated to BANK3
   953  016A  30CF               	movlw	low __pbssBANK3
   954  016B  0084               	movwf	4
   955  016C  3001               	movlw	high __pbssBANK3
   956  016D  0085               	movwf	5
   957  016E  301E               	movlw	30
   958  016F  3191  218D  3181   	fcall	clear_ram0
   959                           
   960                           ; Clear objects allocated to BANK4
   961  0172  3020               	movlw	low __pbssBANK4
   962  0173  0084               	movwf	4
   963  0174  3002               	movlw	high __pbssBANK4
   964  0175  0085               	movwf	5
   965  0176  302E               	movlw	46
   966  0177  3191  218D         	fcall	clear_ram0
   967  0179                     end_of_initialization:	
   968                           ;End of C runtime variable initialization code
   969                           
   970  0179                     __end_of__initialization:	
   971  0179  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   972  017A  0020               	movlb	0
   973  017B  318B  2B5B         	ljmp	_main	;jump to C main() function
   974                           
   975                           	psect	bssCOMMON
   976  0070                     __pbssCOMMON:	
   977  0070                     _IntegerBlueColorIntensity:	
   978  0070                     	ds	2
   979  0072                     _mainReceivedDataPosition:	
   980  0072                     	ds	2
   981  0074                     _ChildLockBuffer:	
   982  0074                     	ds	1
   983  0075                     _SwitchStatusBuffer:	
   984  0075                     	ds	1
   985                           
   986                           	psect	bssBANK0
   987  005C                     __pbssBANK0:	
   988  005C                     strtok@sp:	
   989  005C                     	ds	1
   990  005D                     _ChildLockString:	
   991  005D                     	ds	1
   992  005E                     _AllColorIntensityString:	
   993  005E                     	ds	1
   994  005F                     _BlueColorIntensityString:	
   995  005F                     	ds	1
   996  0060                     _GreenColorIntensityString:	
   997  0060                     	ds	1
   998  0061                     _RedColorIntensityString:	
   999  0061                     	ds	1
  1000  0062                     _SwitchStatusString:	
  1001  0062                     	ds	1
  1002  0063                     _SwitchNumberString:	
  1003  0063                     	ds	1
  1004  0064                     _ModuleNameString:	
  1005  0064                     	ds	1
  1006  0065                     _token:	
  1007  0065                     	ds	1
  1008  0066                     _ConvertmaindataReceiveIntoString:	
  1009  0066                     	ds	1
  1010                           
  1011                           	psect	dataBANK0
  1012  0067                     __pdataBANK0:	
  1013  0067                     _charchildLock:	
  1014  0067                     	ds	1
  1015                           
  1016                           	psect	bssBANK1
  1017  00EB                     __pbssBANK1:	
  1018  00EB                     _IntegerGreenColorIntensity:	
  1019  00EB                     	ds	2
  1020  00ED                     _IntergerRedColorIntensity:	
  1021  00ED                     	ds	2
  1022  00EF                     _FinalFramebitBuffer:	
  1023  00EF                     	ds	1
  1024                           
  1025                           	psect	bssBANK2
  1026  0120                     __pbssBANK2:	
  1027  0120                     _M8:	
  1028  0120                     	ds	2
  1029  0122                     _M7:	
  1030  0122                     	ds	2
  1031  0124                     _M6:	
  1032  0124                     	ds	2
  1033  0126                     _M5:	
  1034  0126                     	ds	2
  1035  0128                     _M4:	
  1036  0128                     	ds	2
  1037  012A                     _M3:	
  1038  012A                     	ds	2
  1039  012C                     _M2:	
  1040  012C                     	ds	2
  1041  012E                     _M1:	
  1042  012E                     	ds	2
  1043  0130                     _IntegerChildLock:	
  1044  0130                     	ds	2
  1045  0132                     _IntergerSwitchStatus:	
  1046  0132                     	ds	2
  1047  0134                     _IntegerSwitchNumber:	
  1048  0134                     	ds	2
  1049  0136                     _partCounter:	
  1050  0136                     	ds	2
  1051  0138                     _ConvertIntegertoStringGreenColorBuffer:	
  1052  0138                     	ds	2
  1053  013A                     _ConvertIntegertoStringRedColorBuffer:	
  1054  013A                     	ds	2
  1055  013C                     _Timer5L:	
  1056  013C                     	ds	2
  1057  013E                     _Timer5H:	
  1058  013E                     	ds	2
  1059  0140                     _Timer3L:	
  1060  0140                     	ds	2
  1061  0142                     _Timer3H:	
  1062  0142                     	ds	2
  1063  0144                     _Timer1L:	
  1064  0144                     	ds	2
  1065  0146                     _Timer1H:	
  1066  0146                     	ds	2
  1067  0148                     _start_PWM_Generation_For_BlueLed:	
  1068  0148                     	ds	2
  1069  014A                     _start_PWM_Generation_For_GreenLed:	
  1070  014A                     	ds	2
  1071  014C                     _start_PWM_Generation_For_RedLed:	
  1072  014C                     	ds	2
  1073  014E                     _mainDatacopyPosition:	
  1074  014E                     	ds	2
  1075  0150                     _mainReceivedDataFlag:	
  1076  0150                     	ds	2
  1077  0152                     _mainDataReceived:	
  1078  0152                     	ds	2
  1079  0154                     _BlueColorIntensityBuffer:	
  1080  0154                     	ds	2
  1081  0156                     _GreenColorIntensityBuffer:	
  1082  0156                     	ds	2
  1083  0158                     _RedColorIntensityBuffer:	
  1084  0158                     	ds	2
  1085  015A                     _SwitchNumberBuffer:	
  1086  015A                     	ds	2
  1087  015C                     _StopBitStringbufer:	
  1088  015C                     	ds	1
  1089  015D                     _StopBitString:	
  1090  015D                     	ds	1
  1091  015E                     _FinalframebitString:	
  1092  015E                     	ds	1
  1093  015F                     _AcknowledgementString:	
  1094  015F                     	ds	1
  1095  0160                     _ChildLockbuffer:	
  1096  0160                     	ds	2
  1097  0162                     _switchstatusbuffer:	
  1098  0162                     	ds	2
  1099                           
  1100                           	psect	dataBANK2
  1101  0164                     __pdataBANK2:	
  1102  0164                     applianceControl@F4006:	
  1103  0164                     	ds	2
  1104  0166                     applianceControl@F4004:	
  1105  0166                     	ds	2
  1106  0168                     _charSwitchState:	
  1107  0168                     	ds	1
  1108  0169                     _levelofGreenLed_LSB:	
  1109  0169                     	ds	1
  1110  016A                     _levelofGreenLed_MSB:	
  1111  016A                     	ds	1
  1112  016B                     _levelofRedLed_LSB:	
  1113  016B                     	ds	1
  1114  016C                     _levelofRedLed_MSB:	
  1115  016C                     	ds	1
  1116  016D                     _levelofBlueLed_LSB:	
  1117  016D                     	ds	1
  1118  016E                     _levelofBlueLed_MSB:	
  1119  016E                     	ds	1
  1120                           
  1121                           	psect	bssBANK3
  1122  01CF                     __pbssBANK3:	
  1123  01CF                     _ModuleNameBuffer:	
  1124  01CF                     	ds	3
  1125  01D2                     _M9:	
  1126  01D2                     	ds	2
  1127  01D4                     _IntegerAllColorIntensity:	
  1128  01D4                     	ds	2
  1129  01D6                     _BlueLedSwitchCounter:	
  1130  01D6                     	ds	2
  1131  01D8                     _GreenLedSwitchCounter:	
  1132  01D8                     	ds	2
  1133  01DA                     _RedLedSwitchCounter:	
  1134  01DA                     	ds	2
  1135  01DC                     _Finalframebitbuffer:	
  1136  01DC                     	ds	2
  1137  01DE                     _BlueColorIntensityStringLength:	
  1138  01DE                     	ds	2
  1139  01E0                     _AllColorIntensityStringLength:	
  1140  01E0                     	ds	2
  1141  01E2                     _GreenColorIntensityStringLength:	
  1142  01E2                     	ds	2
  1143  01E4                     _RedColorIntensityStringLength:	
  1144  01E4                     	ds	2
  1145  01E6                     _mainDataReceiveStringLength:	
  1146  01E6                     	ds	2
  1147  01E8                     _ConvertIntegertoStringBlueColorBuffer:	
  1148  01E8                     	ds	2
  1149  01EA                     _switchNumberBuffer:	
  1150  01EA                     	ds	3
  1151                           
  1152                           	psect	dataBANK3
  1153  01A0                     __pdataBANK3:	
  1154  01A0                     _tempReceivedDataBuffer:	
  1155  01A0                     	ds	24
  1156  01B8                     _copy_parentalLockBuffer:	
  1157  01B8                     	ds	18
  1158  01CA                     _ErrorNames:	
  1159  01CA                     	ds	5
  1160                           
  1161                           	psect	bssBANK4
  1162  0220                     __pbssBANK4:	
  1163  0220                     _sendFinalBufferToGAteway:	
  1164  0220                     	ds	46
  1165                           
  1166                           	psect	dataBANK4
  1167  024E                     __pdataBANK4:	
  1168  024E                     _copymainReceivedDataBuffer:	
  1169  024E                     	ds	32
  1170                           
  1171                           	psect	dataBANK5
  1172  02A0                     __pdataBANK5:	
  1173  02A0                     _mainReceivedDataBuffer:	
  1174  02A0                     	ds	32
  1175  02C0                     _parentalLockBuffer:	
  1176  02C0                     	ds	18
  1177                           
  1178                           	psect	dataBANK6
  1179  0320                     __pdataBANK6:	
  1180  0320                     _tempRGBReceivedDataBuffer:	
  1181  0320                     	ds	32
  1182                           
  1183                           	psect	dataBANK7
  1184  03A0                     __pdataBANK7:	
  1185  03A0                     _currentStateBuffer:	
  1186  03A0                     	ds	74
  1187                           
  1188                           	psect	inittext
  1189  1193                     init_ram:	
  1190  1193  00FE               	movwf	126
  1191  1194                     initloop:	
  1192  1194  0012               	moviw fsr0++
  1193  1195  001E               	movwi fsr1++
  1194  1196  0BFE               	decfsz	126,f
  1195  1197  2994               	goto	initloop
  1196  1198  3400               	retlw	0
  1197                           
  1198                           	psect	clrtext
  1199  118D                     clear_ram0:	
  1200                           ;	Called with FSR0 containing the base address, and
  1201                           ;	WREG with the size to clear
  1202                           
  1203  118D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1204  118E                     clrloop0:	
  1205  118E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1206  118F  3101               	addfsr 0,1
  1207  1190  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1208  1191  298E               	goto	clrloop0	;have we reached the end yet?
  1209  1192  3400               	retlw	0	;all done for this memory range, return
  1210                           
  1211                           	psect	cstackBANK5
  1212  02D2                     __pcstackBANK5:	
  1213  02D2                     main@dataBufferCounter:	
  1214                           
  1215                           ; 2 bytes @ 0x0
  1216  02D2                     	ds	2
  1217  02D4                     main@j:	
  1218                           
  1219                           ; 2 bytes @ 0x2
  1220  02D4                     	ds	2
  1221  02D6                     main@k:	
  1222                           
  1223                           ; 2 bytes @ 0x4
  1224  02D6                     	ds	2
  1225  02D8                     main@k_1118:	
  1226                           
  1227                           ; 2 bytes @ 0x6
  1228  02D8                     	ds	2
  1229  02DA                     main@man:	
  1230                           
  1231                           ; 2 bytes @ 0x8
  1232  02DA                     	ds	2
  1233                           
  1234                           	psect	cstackBANK1
  1235  00A0                     __pcstackBANK1:	
  1236  00A0                     applicationControlRGB@remainder:	
  1237                           
  1238                           ; 2 bytes @ 0x0
  1239  00A0                     	ds	2
  1240  00A2                     applicationControlRGB@start:	
  1241                           
  1242                           ; 2 bytes @ 0x2
  1243  00A2                     	ds	2
  1244  00A4                     applicationControlRGB@end:	
  1245                           
  1246                           ; 2 bytes @ 0x4
  1247  00A4                     	ds	2
  1248  00A6                     applicationControlRGB@RedPulse:	
  1249                           
  1250                           ; 4 bytes @ 0x6
  1251  00A6                     	ds	4
  1252  00AA                     applicationControlRGB@GreenPulse:	
  1253                           
  1254                           ; 4 bytes @ 0xA
  1255  00AA                     	ds	4
  1256  00AE                     applicationControlRGB@BluePulse:	
  1257                           
  1258                           ; 4 bytes @ 0xE
  1259  00AE                     	ds	4
  1260  00B2                     applicationControlRGB@NeedRedPulse:	
  1261                           
  1262                           ; 4 bytes @ 0x12
  1263  00B2                     	ds	4
  1264  00B6                     applicationControlRGB@NeedGreenPulse:	
  1265                           
  1266                           ; 4 bytes @ 0x16
  1267  00B6                     	ds	4
  1268  00BA                     applicationControlRGB@NeedBluePulse:	
  1269                           
  1270                           ; 4 bytes @ 0x1A
  1271  00BA                     	ds	4
  1272  00BE                     applicationControlRGB@ModuleNamestr:	
  1273                           
  1274                           ; 1 bytes @ 0x1E
  1275  00BE                     	ds	1
  1276  00BF                     applicationControlRGB@strRedH:	
  1277                           
  1278                           ; 3 bytes @ 0x1F
  1279  00BF                     	ds	3
  1280  00C2                     applicationControlRGB@strRedL:	
  1281                           
  1282                           ; 3 bytes @ 0x22
  1283  00C2                     	ds	3
  1284  00C5                     applicationControlRGB@strGreenH:	
  1285                           
  1286                           ; 3 bytes @ 0x25
  1287  00C5                     	ds	3
  1288  00C8                     applicationControlRGB@strGreenL:	
  1289                           
  1290                           ; 3 bytes @ 0x28
  1291  00C8                     	ds	3
  1292  00CB                     applicationControlRGB@strBlueH:	
  1293                           
  1294                           ; 3 bytes @ 0x2B
  1295  00CB                     	ds	3
  1296  00CE                     applicationControlRGB@strBlueL:	
  1297                           
  1298                           ; 3 bytes @ 0x2E
  1299  00CE                     	ds	3
  1300  00D1                     applicationControlRGB@HexlevelBuffer:	
  1301                           
  1302                           ; 5 bytes @ 0x31
  1303  00D1                     	ds	5
  1304  00D6                     applicationControlRGB@CompleteClock:	
  1305                           
  1306                           ; 4 bytes @ 0x36
  1307  00D6                     	ds	4
  1308  00DA                     applicationControlRGB@Convert255RangeintoHundred:	
  1309                           
  1310                           ; 3 bytes @ 0x3A
  1311  00DA                     	ds	3
  1312  00DD                     applicationControlRGB@clockPerCycle:	
  1313                           
  1314                           ; 3 bytes @ 0x3D
  1315  00DD                     	ds	3
  1316  00E0                     applicationControlRGB@ConvertIntoTenMsRangeFactor:	
  1317                           
  1318                           ; 2 bytes @ 0x40
  1319  00E0                     	ds	2
  1320  00E2                     applicationControlRGB@ConvertIntToTimeInMicrosecRed:	
  1321                           
  1322                           ; 3 bytes @ 0x42
  1323  00E2                     	ds	3
  1324  00E5                     applicationControlRGB@ConvertIntToTimeInMicrosecGreen:	
  1325                           
  1326                           ; 3 bytes @ 0x45
  1327  00E5                     	ds	3
  1328  00E8                     applicationControlRGB@ConvertIntToTimeInMicrosecBlue:	
  1329                           
  1330                           ; 3 bytes @ 0x48
  1331  00E8                     	ds	3
  1332                           
  1333                           	psect	cstackCOMMON
  1334  0076                     __pcstackCOMMON:	
  1335  0076                     ?_isdigit:	
  1336  0076                     ?_sendAcknowledgmentRGB:	
  1337                           ; 1 bit 
  1338                           
  1339  0076                     ?_sendAcknowledgment:	
  1340                           ; 1 bytes @ 0x0
  1341                           
  1342  0076                     ?_errorsISR:	
  1343                           ; 1 bytes @ 0x0
  1344                           
  1345  0076                     ?_GPIO_pin_Initialize:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0076                     ?_allPeripheralInit:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0076                     ?_ReceivingIndicationLedBlinking:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0076                     ?_copyReceivedDataBuffer:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357  0076                     ?_TransmissionIndicationLedBlinking:	
  1358                           ; 1 bytes @ 0x0
  1359                           
  1360  0076                     ?_clearAllPorts:	
  1361                           ; 1 bytes @ 0x0
  1362                           
  1363  0076                     ?_pinINIT_extra:	
  1364                           ; 1 bytes @ 0x0
  1365                           
  1366  0076                     ?_EUSART_Initialize:	
  1367                           ; 1 bytes @ 0x0
  1368                           
  1369  0076                     ?_TMR1_Initialize:	
  1370                           ; 1 bytes @ 0x0
  1371                           
  1372  0076                     ?_TMR2_Initialize:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375  0076                     ?_TMR3_Initialize:	
  1376                           ; 1 bytes @ 0x0
  1377                           
  1378  0076                     ?_TMR4_Initialize:	
  1379                           ; 1 bytes @ 0x0
  1380                           
  1381  0076                     ?_TMR5_Initialize:	
  1382                           ; 1 bytes @ 0x0
  1383                           
  1384  0076                     ?_TMR6_Initialize:	
  1385                           ; 1 bytes @ 0x0
  1386                           
  1387  0076                     ?_CCP9_Initialize:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390  0076                     ?_CCP8_Initialize:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393  0076                     ?_CCP7_Initialize:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  0076                     ?_CCP10_Initialize:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  0076                     ?_isr:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0076                     ?_main:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  0076                     errorsISR@errNum:	
  1406                           ; 2 bytes @ 0x0
  1407                           
  1408                           
  1409                           ; 2 bytes @ 0x0
  1410  0076                     	ds	2
  1411  0078                     ??_errorsISR:	
  1412  0078                     errorsISR@Tx_count:	
  1413                           ; 1 bytes @ 0x2
  1414                           
  1415                           
  1416                           ; 2 bytes @ 0x2
  1417  0078                     	ds	2
  1418  007A                     ??_isr:	
  1419                           
  1420                           ; 1 bytes @ 0x4
  1421  007A                     	ds	2
  1422                           
  1423                           	psect	cstackBANK0
  1424  0020                     __pcstackBANK0:	
  1425  0020                     ?_strcpy:	
  1426  0020                     ?_strcat:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429  0020                     ??_sendAcknowledgmentRGB:	
  1430                           ; 1 bytes @ 0x0
  1431                           
  1432  0020                     ?_strncpy:	
  1433                           ; 1 bytes @ 0x0
  1434                           
  1435  0020                     ?_memset:	
  1436                           ; 1 bytes @ 0x0
  1437                           
  1438  0020                     ??_sendAcknowledgment:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  0020                     ??_GPIO_pin_Initialize:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0020                     ??_allPeripheralInit:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0020                     ??_ReceivingIndicationLedBlinking:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0020                     ??_copyReceivedDataBuffer:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0020                     ?_errorsMain:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0020                     ?_SwitchOnStatustToGatway:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0020                     ??_TransmissionIndicationLedBlinking:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0020                     ?_SwitchOffStatustToGatway:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465  0020                     ??_clearAllPorts:	
  1466                           ; 1 bytes @ 0x0
  1467                           
  1468  0020                     ??_pinINIT_extra:	
  1469                           ; 1 bytes @ 0x0
  1470                           
  1471  0020                     ??_EUSART_Initialize:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0020                     ??_TMR1_Initialize:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0020                     ??_TMR2_Initialize:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  0020                     ??_TMR3_Initialize:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0020                     ??_TMR4_Initialize:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0020                     ??_TMR5_Initialize:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0020                     ??_TMR6_Initialize:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  0020                     ??_CCP9_Initialize:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  0020                     ??_CCP8_Initialize:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498  0020                     ??_CCP7_Initialize:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501  0020                     ??_CCP10_Initialize:	
  1502                           ; 1 bytes @ 0x0
  1503                           
  1504  0020                     ??_isdigit:	
  1505                           ; 1 bytes @ 0x0
  1506                           
  1507  0020                     ?_strlen:	
  1508                           ; 1 bytes @ 0x0
  1509                           
  1510  0020                     ?_abs:	
  1511                           ; 2 bytes @ 0x0
  1512                           
  1513  0020                     ?_strcmp:	
  1514                           ; 2 bytes @ 0x0
  1515                           
  1516  0020                     ?_strchr:	
  1517                           ; 2 bytes @ 0x0
  1518                           
  1519  0020                     ?___wmul:	
  1520                           ; 2 bytes @ 0x0
  1521                           
  1522  0020                     ?___lwdiv:	
  1523                           ; 2 bytes @ 0x0
  1524                           
  1525  0020                     ?___ftpack:	
  1526                           ; 2 bytes @ 0x0
  1527                           
  1528  0020                     _isdigit$1395:	
  1529                           ; 3 bytes @ 0x0
  1530                           
  1531  0020                     strcpy@from:	
  1532                           ; 1 bytes @ 0x0
  1533                           
  1534  0020                     strncpy@from:	
  1535                           ; 1 bytes @ 0x0
  1536                           
  1537  0020                     errorsMain@errNum:	
  1538                           ; 1 bytes @ 0x0
  1539                           
  1540  0020                     SwitchOffStatustToGatway@SwitchOffNumber:	
  1541                           ; 2 bytes @ 0x0
  1542                           
  1543  0020                     SwitchOnStatustToGatway@SwitchOnNumber:	
  1544                           ; 2 bytes @ 0x0
  1545                           
  1546  0020                     ___wmul@multiplier:	
  1547                           ; 2 bytes @ 0x0
  1548                           
  1549  0020                     abs@a:	
  1550                           ; 2 bytes @ 0x0
  1551                           
  1552  0020                     ___lwdiv@divisor:	
  1553                           ; 2 bytes @ 0x0
  1554                           
  1555  0020                     memset@c:	
  1556                           ; 2 bytes @ 0x0
  1557                           
  1558  0020                     strcat@from:	
  1559                           ; 2 bytes @ 0x0
  1560                           
  1561  0020                     strcmp@s2:	
  1562                           ; 2 bytes @ 0x0
  1563                           
  1564  0020                     strlen@s:	
  1565                           ; 2 bytes @ 0x0
  1566                           
  1567  0020                     strchr@ptr:	
  1568                           ; 2 bytes @ 0x0
  1569                           
  1570  0020                     ___ftpack@arg:	
  1571                           ; 2 bytes @ 0x0
  1572                           
  1573                           
  1574                           ; 3 bytes @ 0x0
  1575  0020                     	ds	1
  1576  0021                     ??_strcpy:	
  1577  0021                     isdigit@c:	
  1578                           ; 1 bytes @ 0x1
  1579                           
  1580  0021                     sendAcknowledgment@Tx_count:	
  1581                           ; 1 bytes @ 0x1
  1582                           
  1583  0021                     sendAcknowledgmentRGB@Tx_count:	
  1584                           ; 2 bytes @ 0x1
  1585                           
  1586  0021                     copyReceivedDataBuffer@dataBufferCounter:	
  1587                           ; 2 bytes @ 0x1
  1588                           
  1589  0021                     strncpy@size:	
  1590                           ; 2 bytes @ 0x1
  1591                           
  1592                           
  1593                           ; 2 bytes @ 0x1
  1594  0021                     	ds	1
  1595  0022                     ??_strcat:	
  1596  0022                     ??_strlen:	
  1597                           ; 1 bytes @ 0x2
  1598                           
  1599  0022                     ??_abs:	
  1600                           ; 1 bytes @ 0x2
  1601                           
  1602  0022                     ??_strcmp:	
  1603                           ; 1 bytes @ 0x2
  1604                           
  1605  0022                     ??_errorsMain:	
  1606                           ; 1 bytes @ 0x2
  1607                           
  1608  0022                     ??_SwitchOnStatustToGatway:	
  1609                           ; 1 bytes @ 0x2
  1610                           
  1611  0022                     ??_SwitchOffStatustToGatway:	
  1612                           ; 1 bytes @ 0x2
  1613                           
  1614  0022                     strcpy@to:	
  1615                           ; 1 bytes @ 0x2
  1616                           
  1617  0022                     errorsMain@Tx_count:	
  1618                           ; 1 bytes @ 0x2
  1619                           
  1620  0022                     ___wmul@multiplicand:	
  1621                           ; 2 bytes @ 0x2
  1622                           
  1623  0022                     ___lwdiv@dividend:	
  1624                           ; 2 bytes @ 0x2
  1625                           
  1626  0022                     memset@n:	
  1627                           ; 2 bytes @ 0x2
  1628                           
  1629  0022                     strchr@chr:	
  1630                           ; 2 bytes @ 0x2
  1631                           
  1632                           
  1633                           ; 2 bytes @ 0x2
  1634  0022                     	ds	1
  1635  0023                     ??_strncpy:	
  1636  0023                     sendAcknowledgment@currentStateBuffer:	
  1637                           ; 1 bytes @ 0x3
  1638                           
  1639  0023                     sendAcknowledgmentRGB@currentStateBufferRGB:	
  1640                           ; 1 bytes @ 0x3
  1641                           
  1642  0023                     ___ftpack@exp:	
  1643                           ; 1 bytes @ 0x3
  1644                           
  1645  0023                     strcat@cp:	
  1646                           ; 1 bytes @ 0x3
  1647                           
  1648  0023                     strcmp@r:	
  1649                           ; 1 bytes @ 0x3
  1650                           
  1651  0023                     strcpy@cp:	
  1652                           ; 1 bytes @ 0x3
  1653                           
  1654                           
  1655                           ; 1 bytes @ 0x3
  1656  0023                     	ds	1
  1657  0024                     ??_memset:	
  1658  0024                     ??_strchr:	
  1659                           ; 1 bytes @ 0x4
  1660                           
  1661  0024                     ??___wmul:	
  1662                           ; 1 bytes @ 0x4
  1663                           
  1664  0024                     ??___lwdiv:	
  1665                           ; 1 bytes @ 0x4
  1666                           
  1667  0024                     ___ftpack@sign:	
  1668                           ; 1 bytes @ 0x4
  1669                           
  1670  0024                     strcat@to:	
  1671                           ; 1 bytes @ 0x4
  1672                           
  1673  0024                     strcmp@s1:	
  1674                           ; 1 bytes @ 0x4
  1675                           
  1676  0024                     strncpy@cp:	
  1677                           ; 1 bytes @ 0x4
  1678                           
  1679  0024                     ___wmul@product:	
  1680                           ; 1 bytes @ 0x4
  1681                           
  1682  0024                     strlen@cp:	
  1683                           ; 2 bytes @ 0x4
  1684                           
  1685                           
  1686                           ; 2 bytes @ 0x4
  1687  0024                     	ds	1
  1688  0025                     ??___ftpack:	
  1689  0025                     ___lwdiv@counter:	
  1690                           ; 1 bytes @ 0x5
  1691                           
  1692  0025                     memset@p:	
  1693                           ; 1 bytes @ 0x5
  1694                           
  1695  0025                     strncpy@to:	
  1696                           ; 1 bytes @ 0x5
  1697                           
  1698                           
  1699                           ; 1 bytes @ 0x5
  1700  0025                     	ds	1
  1701  0026                     ?_atoi:	
  1702  0026                     ?_hexadecimalToDecimal:	
  1703                           ; 2 bytes @ 0x6
  1704                           
  1705  0026                     memset@p1:	
  1706                           ; 2 bytes @ 0x6
  1707                           
  1708  0026                     atoi@s:	
  1709                           ; 1 bytes @ 0x6
  1710                           
  1711  0026                     ___lwdiv@quotient:	
  1712                           ; 2 bytes @ 0x6
  1713                           
  1714                           
  1715                           ; 2 bytes @ 0x6
  1716  0026                     	ds	1
  1717  0027                     ?_strspn:	
  1718  0027                     ?_strcspn:	
  1719                           ; 2 bytes @ 0x7
  1720                           
  1721  0027                     strcspn@s2:	
  1722                           ; 2 bytes @ 0x7
  1723                           
  1724  0027                     strspn@s2:	
  1725                           ; 2 bytes @ 0x7
  1726                           
  1727                           
  1728                           ; 2 bytes @ 0x7
  1729  0027                     	ds	1
  1730  0028                     ??_atoi:	
  1731  0028                     ??_hexadecimalToDecimal:	
  1732                           ; 1 bytes @ 0x8
  1733                           
  1734  0028                     ?_sprintf:	
  1735                           ; 1 bytes @ 0x8
  1736                           
  1737  0028                     ?___awtoft:	
  1738                           ; 2 bytes @ 0x8
  1739                           
  1740  0028                     ?___ftmul:	
  1741                           ; 3 bytes @ 0x8
  1742                           
  1743  0028                     ?___lwtoft:	
  1744                           ; 3 bytes @ 0x8
  1745                           
  1746  0028                     sprintf@f:	
  1747                           ; 3 bytes @ 0x8
  1748                           
  1749  0028                     ___awtoft@c:	
  1750                           ; 2 bytes @ 0x8
  1751                           
  1752  0028                     ___lwtoft@c:	
  1753                           ; 2 bytes @ 0x8
  1754                           
  1755  0028                     ___ftmul@f1:	
  1756                           ; 2 bytes @ 0x8
  1757                           
  1758                           
  1759                           ; 3 bytes @ 0x8
  1760  0028                     	ds	1
  1761  0029                     ??_strspn:	
  1762  0029                     ??_strcspn:	
  1763                           ; 1 bytes @ 0x9
  1764                           
  1765                           
  1766                           ; 1 bytes @ 0x9
  1767  0029                     	ds	1
  1768  002A                     atoi@sign:	
  1769  002A                     hexadecimalToDecimal@len:	
  1770                           ; 1 bytes @ 0xA
  1771                           
  1772                           
  1773                           ; 2 bytes @ 0xA
  1774  002A                     	ds	1
  1775  002B                     ??___awtoft:	
  1776  002B                     ??___lwtoft:	
  1777                           ; 1 bytes @ 0xB
  1778                           
  1779  002B                     atoi@a:	
  1780                           ; 1 bytes @ 0xB
  1781                           
  1782  002B                     strcspn@i:	
  1783                           ; 2 bytes @ 0xB
  1784                           
  1785  002B                     strspn@i:	
  1786                           ; 2 bytes @ 0xB
  1787                           
  1788  002B                     ___ftmul@f2:	
  1789                           ; 2 bytes @ 0xB
  1790                           
  1791                           
  1792                           ; 3 bytes @ 0xB
  1793  002B                     	ds	1
  1794  002C                     hexadecimalToDecimal@dec_val:	
  1795                           
  1796                           ; 2 bytes @ 0xC
  1797  002C                     	ds	1
  1798  002D                     ?_applianceControl:	
  1799  002D                     applianceControl@charSwitchLSB:	
  1800                           ; 1 bytes @ 0xD
  1801                           
  1802  002D                     ___awtoft@sign:	
  1803                           ; 1 bytes @ 0xD
  1804                           
  1805  002D                     strcspn@s1:	
  1806                           ; 1 bytes @ 0xD
  1807                           
  1808  002D                     strspn@s1:	
  1809                           ; 1 bytes @ 0xD
  1810                           
  1811                           
  1812                           ; 1 bytes @ 0xD
  1813  002D                     	ds	1
  1814  002E                     ??_sprintf:	
  1815  002E                     ?_strtok:	
  1816                           ; 1 bytes @ 0xE
  1817                           
  1818  002E                     ??___ftmul:	
  1819                           ; 1 bytes @ 0xE
  1820                           
  1821  002E                     ?___ftdiv:	
  1822                           ; 1 bytes @ 0xE
  1823                           
  1824  002E                     applianceControl@charSwitchSTATE:	
  1825                           ; 3 bytes @ 0xE
  1826                           
  1827  002E                     hexadecimalToDecimal@base:	
  1828                           ; 1 bytes @ 0xE
  1829                           
  1830  002E                     strtok@s2:	
  1831                           ; 2 bytes @ 0xE
  1832                           
  1833  002E                     ___ftdiv@f2:	
  1834                           ; 2 bytes @ 0xE
  1835                           
  1836                           
  1837                           ; 3 bytes @ 0xE
  1838  002E                     	ds	1
  1839  002F                     applianceControl@chDimmerSpeedMSB:	
  1840                           
  1841                           ; 1 bytes @ 0xF
  1842  002F                     	ds	1
  1843  0030                     ??_strtok:	
  1844  0030                     applianceControl@chDimmerSpeedLSB:	
  1845                           ; 1 bytes @ 0x10
  1846                           
  1847  0030                     hexadecimalToDecimal@i:	
  1848                           ; 1 bytes @ 0x10
  1849                           
  1850                           
  1851                           ; 2 bytes @ 0x10
  1852  0030                     	ds	1
  1853  0031                     applianceControl@charParentalControl:	
  1854  0031                     ___ftdiv@f1:	
  1855                           ; 1 bytes @ 0x11
  1856                           
  1857                           
  1858                           ; 3 bytes @ 0x11
  1859  0031                     	ds	1
  1860  0032                     applianceControl@charFinalFrameState:	
  1861  0032                     hexadecimalToDecimal@hexVal:	
  1862                           ; 1 bytes @ 0x12
  1863                           
  1864  0032                     sprintf@flag:	
  1865                           ; 1 bytes @ 0x12
  1866                           
  1867  0032                     ___ftmul@exp:	
  1868                           ; 1 bytes @ 0x12
  1869                           
  1870                           
  1871                           ; 1 bytes @ 0x12
  1872  0032                     	ds	1
  1873  0033                     ??_applianceControl:	
  1874  0033                     sprintf@idx:	
  1875                           ; 1 bytes @ 0x13
  1876                           
  1877  0033                     strtok@s1:	
  1878                           ; 1 bytes @ 0x13
  1879                           
  1880  0033                     ___ftmul@f3_as_product:	
  1881                           ; 1 bytes @ 0x13
  1882                           
  1883                           
  1884                           ; 3 bytes @ 0x13
  1885  0033                     	ds	1
  1886  0034                     ??___ftdiv:	
  1887  0034                     sprintf@ap:	
  1888                           ; 1 bytes @ 0x14
  1889                           
  1890                           
  1891                           ; 1 bytes @ 0x14
  1892  0034                     	ds	1
  1893  0035                     applianceControl@integerSpeed:	
  1894  0035                     sprintf@val:	
  1895                           ; 2 bytes @ 0x15
  1896                           
  1897                           
  1898                           ; 2 bytes @ 0x15
  1899  0035                     	ds	1
  1900  0036                     ___ftmul@cntr:	
  1901                           
  1902                           ; 1 bytes @ 0x16
  1903  0036                     	ds	1
  1904  0037                     applianceControl@charSwitchMSB:	
  1905  0037                     sprintf@prec:	
  1906                           ; 1 bytes @ 0x17
  1907                           
  1908  0037                     ___ftmul@sign:	
  1909                           ; 1 bytes @ 0x17
  1910                           
  1911                           
  1912                           ; 1 bytes @ 0x17
  1913  0037                     	ds	1
  1914  0038                     sprintf@sp:	
  1915  0038                     ___ftdiv@cntr:	
  1916                           ; 1 bytes @ 0x18
  1917                           
  1918  0038                     applianceControl@switchNumberStringBuffer:	
  1919                           ; 1 bytes @ 0x18
  1920                           
  1921                           
  1922                           ; 2 bytes @ 0x18
  1923  0038                     	ds	1
  1924  0039                     sprintf@c:	
  1925  0039                     ___ftdiv@f3:	
  1926                           ; 1 bytes @ 0x19
  1927                           
  1928                           
  1929                           ; 3 bytes @ 0x19
  1930  0039                     	ds	1
  1931  003A                     applianceControl@dimmerSpeedStringBuffer:	
  1932                           
  1933                           ; 2 bytes @ 0x1A
  1934  003A                     	ds	2
  1935  003C                     ___ftdiv@exp:	
  1936  003C                     applianceControl@integerSwitchNumber:	
  1937                           ; 1 bytes @ 0x1C
  1938                           
  1939                           
  1940                           ; 2 bytes @ 0x1C
  1941  003C                     	ds	1
  1942  003D                     ___ftdiv@sign:	
  1943                           
  1944                           ; 1 bytes @ 0x1D
  1945  003D                     	ds	1
  1946  003E                     ?___fttol:	
  1947  003E                     applianceControl@currentStateBufferPositions:	
  1948                           ; 4 bytes @ 0x1E
  1949                           
  1950  003E                     ___fttol@f1:	
  1951                           ; 2 bytes @ 0x1E
  1952                           
  1953                           
  1954                           ; 3 bytes @ 0x1E
  1955  003E                     	ds	2
  1956  0040                     applianceControl@integerSwitchState:	
  1957                           
  1958                           ; 2 bytes @ 0x20
  1959  0040                     	ds	2
  1960  0042                     ??___fttol:	
  1961                           
  1962                           ; 1 bytes @ 0x22
  1963  0042                     	ds	4
  1964  0046                     ___fttol@sign1:	
  1965                           
  1966                           ; 1 bytes @ 0x26
  1967  0046                     	ds	1
  1968  0047                     ___fttol@lval:	
  1969                           
  1970                           ; 4 bytes @ 0x27
  1971  0047                     	ds	4
  1972  004B                     ___fttol@exp1:	
  1973                           
  1974                           ; 1 bytes @ 0x2B
  1975  004B                     	ds	1
  1976  004C                     ?_applicationControlRGB:	
  1977  004C                     applicationControlRGB@SwitchNumberstr:	
  1978                           ; 1 bytes @ 0x2C
  1979                           
  1980                           
  1981                           ; 1 bytes @ 0x2C
  1982  004C                     	ds	1
  1983  004D                     applicationControlRGB@SwitchStatusstr:	
  1984                           
  1985                           ; 1 bytes @ 0x2D
  1986  004D                     	ds	1
  1987  004E                     applicationControlRGB@RedColorIntensitystr:	
  1988                           
  1989                           ; 1 bytes @ 0x2E
  1990  004E                     	ds	1
  1991  004F                     applicationControlRGB@GreenColorIntensitystr:	
  1992                           
  1993                           ; 1 bytes @ 0x2F
  1994  004F                     	ds	1
  1995  0050                     applicationControlRGB@BlueColorIntensitystr:	
  1996                           
  1997                           ; 1 bytes @ 0x30
  1998  0050                     	ds	1
  1999  0051                     applicationControlRGB@ChildLockstr:	
  2000                           
  2001                           ; 1 bytes @ 0x31
  2002  0051                     	ds	1
  2003  0052                     applicationControlRGB@Allcolorstr:	
  2004                           
  2005                           ; 1 bytes @ 0x32
  2006  0052                     	ds	1
  2007  0053                     ??_applicationControlRGB:	
  2008                           
  2009                           ; 1 bytes @ 0x33
  2010  0053                     	ds	2
  2011  0055                     ??_main:	
  2012                           
  2013                           ; 1 bytes @ 0x35
  2014  0055                     	ds	7
  2015                           
  2016                           	psect	maintext
  2017  0B5B                     __pmaintext:	
  2018 ;;
  2019 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  2020 ;;
  2021 ;; *************** function _main *****************
  2022 ;; Defined at:
  2023 ;;		line 488 in file "main.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;  k               2    6[BANK5 ] int 
  2028 ;;  k               2    4[BANK5 ] int 
  2029 ;;  j               2    2[BANK5 ] int 
  2030 ;;  dataBufferCo    2    0[BANK5 ] int 
  2031 ;;  man             2    8[BANK5 ] int 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  2  488[None  ] int 
  2034 ;; Registers used:
  2035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : B1F/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2042 ;;      Locals:         0       0       0       0       0       0      10       0       0       0       0
  2043 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0
  2044 ;;      Totals:         0       7       0       0       0       0      10       0       0       0       0
  2045 ;;Total ram usage:       17 bytes
  2046 ;; Hardware stack levels required when called:    5
  2047 ;; This function calls:
  2048 ;;		_GPIO_pin_Initialize
  2049 ;;		_ReceivingIndicationLedBlinking
  2050 ;;		_SwitchOffStatustToGatway
  2051 ;;		_SwitchOnStatustToGatway
  2052 ;;		_TransmissionIndicationLedBlinking
  2053 ;;		_allPeripheralInit
  2054 ;;		_applianceControl
  2055 ;;		_applicationControlRGB
  2056 ;;		_copyReceivedDataBuffer
  2057 ;;		_errorsMain
  2058 ;;		_strcmp
  2059 ;;		_strlen
  2060 ;;		_strtok
  2061 ;; This function is called by:
  2062 ;;		Startup code after reset
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           
  2067                           ;psect for function _main
  2068  0B5B                     _main:	
  2069                           
  2070                           ;main.c: 489: _delay((unsigned long)((2000)*(16000000/4000.0)));
  2071                           
  2072                           ;incstack = 0
  2073                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2074  0B5B  3029               	movlw	41
  2075  0B5C  0020               	movlb	0	; select bank0
  2076  0B5D  00D6               	movwf	??_main+1
  2077  0B5E  3096               	movlw	150
  2078  0B5F  00D5               	movwf	??_main
  2079  0B60  307F               	movlw	127
  2080  0B61                     u6467:	
  2081  0B61  0B89               	decfsz	9,f
  2082  0B62  2B61               	goto	u6467
  2083  0B63  0BD5               	decfsz	??_main,f
  2084  0B64  2B61               	goto	u6467
  2085  0B65  0BD6               	decfsz	??_main+1,f
  2086  0B66  2B61               	goto	u6467
  2087                           
  2088                           ;main.c: 490: M1=0; M2=0; M3=0; M4=0; M5=0; M6=0; M7=0;M8=0;
  2089  0B67  0022               	movlb	2	; select bank2
  2090  0B68  01AE               	clrf	_M1^(0+256)
  2091  0B69  01AF               	clrf	(_M1+1)^(0+256)
  2092  0B6A  01AC               	clrf	_M2^(0+256)
  2093  0B6B  01AD               	clrf	(_M2+1)^(0+256)
  2094  0B6C  01AA               	clrf	_M3^(0+256)
  2095  0B6D  01AB               	clrf	(_M3+1)^(0+256)
  2096  0B6E  01A8               	clrf	_M4^(0+256)
  2097  0B6F  01A9               	clrf	(_M4+1)^(0+256)
  2098  0B70  01A6               	clrf	_M5^(0+256)
  2099  0B71  01A7               	clrf	(_M5+1)^(0+256)
  2100  0B72  01A4               	clrf	_M6^(0+256)
  2101  0B73  01A5               	clrf	(_M6+1)^(0+256)
  2102  0B74  01A2               	clrf	_M7^(0+256)
  2103  0B75  01A3               	clrf	(_M7+1)^(0+256)
  2104  0B76  01A0               	clrf	_M8^(0+256)
  2105  0B77  01A1               	clrf	(_M8+1)^(0+256)
  2106                           
  2107                           ;main.c: 491: M9=0;
  2108  0B78  0023               	movlb	3	; select bank3
  2109  0B79  01D2               	clrf	_M9^(0+384)
  2110  0B7A  01D3               	clrf	(_M9+1)^(0+384)
  2111                           
  2112                           ;main.c: 492: GPIO_pin_Initialize();
  2113  0B7B  3194  2476  318B   	fcall	_GPIO_pin_Initialize
  2114                           
  2115                           ;main.c: 493: allPeripheralInit();
  2116  0B7E  3193  23E1  318B   	fcall	_allPeripheralInit
  2117  0B81                     l5756:	
  2118                           ;main.c: 495: while(1){
  2119                           
  2120                           
  2121                           ;main.c: 496: if(mainDataReceived==1){
  2122  0B81  0022               	movlb	2	; select bank2
  2123  0B82  0352               	decf	_mainDataReceived^(0+256),w
  2124  0B83  0453               	iorwf	(_mainDataReceived+1)^(0+256),w
  2125  0B84  1D03               	btfss	3,2
  2126  0B85  2DA6               	goto	l5890
  2127                           
  2128                           ;main.c: 498: mainDataReceived=0;
  2129  0B86  01D2               	clrf	_mainDataReceived^(0+256)
  2130  0B87  01D3               	clrf	(_mainDataReceived+1)^(0+256)
  2131                           
  2132                           ;main.c: 499: if(copymainReceivedDataBuffer[0]=='%' && copymainReceivedDataBuffer[1]=='%
      +                          ' && copymainReceivedDataBuffer[14]=='@' && copymainReceivedDataBuffer[15]=='@'){
  2133  0B88  3025               	movlw	37
  2134  0B89  0024               	movlb	4	; select bank4
  2135  0B8A  064E               	xorwf	_copymainReceivedDataBuffer^(0+512),w
  2136  0B8B  1D03               	btfss	3,2
  2137  0B8C  2BC9               	goto	l5774
  2138  0B8D  3025               	movlw	37
  2139  0B8E  064F               	xorwf	(_copymainReceivedDataBuffer^(0+512)+1),w
  2140  0B8F  1D03               	btfss	3,2
  2141  0B90  2BC9               	goto	l5774
  2142  0B91  3040               	movlw	64
  2143  0B92  065C               	xorwf	(_copymainReceivedDataBuffer^(0+512)+14),w
  2144  0B93  1D03               	btfss	3,2
  2145  0B94  2BC9               	goto	l5774
  2146  0B95  3040               	movlw	64
  2147  0B96  065D               	xorwf	(_copymainReceivedDataBuffer^(0+512)+15),w
  2148  0B97  1D03               	btfss	3,2
  2149  0B98  2BC9               	goto	l5774
  2150                           
  2151                           ;main.c: 500: ReceivingIndicationLedBlinking();
  2152  0B99  3192  222D  318B   	fcall	_ReceivingIndicationLedBlinking
  2153                           
  2154                           ;main.c: 501: copyReceivedDataBuffer();
  2155  0B9C  3195  255F  318B   	fcall	_copyReceivedDataBuffer
  2156                           
  2157                           ;main.c: 503: applianceControl(tempReceivedDataBuffer[0],
  2158                           ;main.c: 504: tempReceivedDataBuffer[1],
  2159                           ;main.c: 505: tempReceivedDataBuffer[2],
  2160                           ;main.c: 506: tempReceivedDataBuffer[3],
  2161                           ;main.c: 507: tempReceivedDataBuffer[4],
  2162                           ;main.c: 508: tempReceivedDataBuffer[5],
  2163                           ;main.c: 509: tempReceivedDataBuffer[6]);
  2164  0B9F  0023               	movlb	3	; select bank3
  2165  0BA0  0821               	movf	(_tempReceivedDataBuffer^(0+384)+1),w
  2166  0BA1  0020               	movlb	0	; select bank0
  2167  0BA2  00D5               	movwf	??_main
  2168  0BA3  0855               	movf	??_main,w
  2169  0BA4  00AD               	movwf	applianceControl@charSwitchLSB
  2170  0BA5  0023               	movlb	3	; select bank3
  2171  0BA6  0822               	movf	(_tempReceivedDataBuffer^(0+384)+2),w
  2172  0BA7  0020               	movlb	0	; select bank0
  2173  0BA8  00D6               	movwf	??_main+1
  2174  0BA9  0856               	movf	??_main+1,w
  2175  0BAA  00AE               	movwf	applianceControl@charSwitchSTATE
  2176  0BAB  0023               	movlb	3	; select bank3
  2177  0BAC  0823               	movf	(_tempReceivedDataBuffer^(0+384)+3),w
  2178  0BAD  0020               	movlb	0	; select bank0
  2179  0BAE  00D7               	movwf	??_main+2
  2180  0BAF  0857               	movf	??_main+2,w
  2181  0BB0  00AF               	movwf	applianceControl@chDimmerSpeedMSB
  2182  0BB1  0023               	movlb	3	; select bank3
  2183  0BB2  0824               	movf	(_tempReceivedDataBuffer^(0+384)+4),w
  2184  0BB3  0020               	movlb	0	; select bank0
  2185  0BB4  00D8               	movwf	??_main+3
  2186  0BB5  0858               	movf	??_main+3,w
  2187  0BB6  00B0               	movwf	applianceControl@chDimmerSpeedLSB
  2188  0BB7  0023               	movlb	3	; select bank3
  2189  0BB8  0825               	movf	(_tempReceivedDataBuffer^(0+384)+5),w
  2190  0BB9  0020               	movlb	0	; select bank0
  2191  0BBA  00D9               	movwf	??_main+4
  2192  0BBB  0859               	movf	??_main+4,w
  2193  0BBC  00B1               	movwf	applianceControl@charParentalControl
  2194  0BBD  0023               	movlb	3	; select bank3
  2195  0BBE  0826               	movf	(_tempReceivedDataBuffer^(0+384)+6),w
  2196  0BBF  0020               	movlb	0	; select bank0
  2197  0BC0  00DA               	movwf	??_main+5
  2198  0BC1  085A               	movf	??_main+5,w
  2199  0BC2  00B2               	movwf	applianceControl@charFinalFrameState
  2200  0BC3  0023               	movlb	3	; select bank3
  2201  0BC4  0820               	movf	_tempReceivedDataBuffer^(0+384),w
  2202  0BC5  318A  225F  318B   	fcall	_applianceControl
  2203                           
  2204                           ;main.c: 511: }
  2205  0BC8  2DA6               	goto	l5890
  2206  0BC9                     l5774:	
  2207                           
  2208                           ;main.c: 512: else if(copymainReceivedDataBuffer[0]=='R' && copymainReceivedDataBuffer[1
      +                          ]=='G' && copymainReceivedDataBuffer[2]=='B'){
  2209  0BC9  3052               	movlw	82
  2210  0BCA  0024               	movlb	4	; select bank4
  2211  0BCB  064E               	xorwf	_copymainReceivedDataBuffer^(0+512),w
  2212  0BCC  1D03               	btfss	3,2
  2213  0BCD  2D6A               	goto	l5872
  2214  0BCE  3047               	movlw	71
  2215  0BCF  064F               	xorwf	(_copymainReceivedDataBuffer^(0+512)+1),w
  2216  0BD0  1D03               	btfss	3,2
  2217  0BD1  2D6A               	goto	l5872
  2218  0BD2  3042               	movlw	66
  2219  0BD3  0650               	xorwf	(_copymainReceivedDataBuffer^(0+512)+2),w
  2220  0BD4  1D03               	btfss	3,2
  2221  0BD5  2D6A               	goto	l5872
  2222                           
  2223                           ;main.c: 513: ReceivingIndicationLedBlinking();
  2224  0BD6  3192  222D  318B   	fcall	_ReceivingIndicationLedBlinking
  2225                           
  2226                           ;main.c: 519: ConvertmaindataReceiveIntoString = copymainReceivedDataBuffer;
  2227  0BD9  304E               	movlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
  2228  0BDA  0020               	movlb	0	; select bank0
  2229  0BDB  00D5               	movwf	??_main
  2230  0BDC  0855               	movf	??_main,w
  2231  0BDD  00E6               	movwf	_ConvertmaindataReceiveIntoString
  2232                           
  2233                           ;main.c: 522: token = strtok(ConvertmaindataReceiveIntoString,".");
  2234  0BDE  303B               	movlw	low (STR_1| (0+32768))
  2235  0BDF  00AE               	movwf	strtok@s2
  2236  0BE0  3098               	movlw	high (STR_1| (0+32768))
  2237  0BE1  00AF               	movwf	strtok@s2+1
  2238  0BE2  0866               	movf	_ConvertmaindataReceiveIntoString,w
  2239  0BE3  3188  2004  318B   	fcall	_strtok
  2240  0BE6  0020               	movlb	0	; select bank0
  2241  0BE7  00D5               	movwf	??_main
  2242  0BE8  0855               	movf	??_main,w
  2243  0BE9  00E5               	movwf	_token
  2244                           
  2245                           ;main.c: 523: ModuleNameString = token;
  2246  0BEA  0865               	movf	_token,w
  2247  0BEB  00D5               	movwf	??_main
  2248  0BEC  0855               	movf	??_main,w
  2249  0BED  00E4               	movwf	_ModuleNameString
  2250                           
  2251                           ;main.c: 524: partCounter=0;
  2252  0BEE  0022               	movlb	2	; select bank2
  2253  0BEF  01B6               	clrf	_partCounter^(0+256)
  2254  0BF0  01B7               	clrf	(_partCounter+1)^(0+256)
  2255                           
  2256                           ;main.c: 526: if((strcmp(ModuleNameString,"RGB") == 0)){
  2257  0BF1  3034               	movlw	low (STR_17| (0+32768))
  2258  0BF2  0020               	movlb	0	; select bank0
  2259  0BF3  00A0               	movwf	strcmp@s2
  2260  0BF4  3098               	movlw	high (STR_17| (0+32768))
  2261  0BF5  00A1               	movwf	strcmp@s2+1
  2262  0BF6  0864               	movf	_ModuleNameString,w
  2263  0BF7  3194  244C  318B   	fcall	_strcmp
  2264  0BFA  0020               	movlb	0	; select bank0
  2265  0BFB  0820               	movf	?_strcmp,w
  2266  0BFC  0421               	iorwf	?_strcmp+1,w
  2267  0BFD  1903               	btfsc	3,2
  2268  0BFE  2D45               	goto	l5868
  2269  0BFF  2D49               	goto	l5870
  2270  0C00                     l5794:	
  2271                           ;main.c: 527: while(token != (0))
  2272                           
  2273                           
  2274                           ;main.c: 528: {
  2275                           ;main.c: 529: partCounter++;
  2276  0C00  3001               	movlw	1
  2277  0C01  0022               	movlb	2	; select bank2
  2278  0C02  07B6               	addwf	_partCounter^(0+256),f
  2279  0C03  3000               	movlw	0
  2280  0C04  3DB7               	addwfc	(_partCounter+1)^(0+256),f
  2281                           
  2282                           ;main.c: 530: token = strtok((0),".");
  2283  0C05  303B               	movlw	low (STR_1| (0+32768))
  2284  0C06  0020               	movlb	0	; select bank0
  2285  0C07  00AE               	movwf	strtok@s2
  2286  0C08  3098               	movlw	high (STR_1| (0+32768))
  2287  0C09  00AF               	movwf	strtok@s2+1
  2288  0C0A  3000               	movlw	0
  2289  0C0B  3188  2004  318B   	fcall	_strtok
  2290  0C0E  0020               	movlb	0	; select bank0
  2291  0C0F  00D5               	movwf	??_main
  2292  0C10  0855               	movf	??_main,w
  2293  0C11  00E5               	movwf	_token
  2294                           
  2295                           ;main.c: 531: switch(partCounter){
  2296  0C12  2D32               	goto	l5866
  2297  0C13                     l5798:	
  2298                           ;main.c: 532: case 1:
  2299                           
  2300                           
  2301                           ;main.c: 533: {
  2302                           ;main.c: 534: int j=0;
  2303  0C13  0025               	movlb	5	; select bank5
  2304  0C14  01D4               	clrf	main@j^(0+640)
  2305  0C15  01D5               	clrf	(main@j+1)^(0+640)
  2306                           
  2307                           ;main.c: 535: for(j=0;j<1;j++)
  2308  0C16  01D4               	clrf	main@j^(0+640)
  2309  0C17  01D5               	clrf	(main@j+1)^(0+640)
  2310  0C18  0855               	movf	(main@j+1)^(0+640),w
  2311  0C19  3A80               	xorlw	128
  2312  0C1A  0020               	movlb	0	; select bank0
  2313  0C1B  00D5               	movwf	??_main
  2314  0C1C  3080               	movlw	128
  2315  0C1D  0255               	subwf	??_main,w
  2316  0C1E  1D03               	skipz
  2317  0C1F  2C23               	goto	u5735
  2318  0C20  3001               	movlw	1
  2319  0C21  0025               	movlb	5	; select bank5
  2320  0C22  0254               	subwf	main@j^(0+640),w
  2321  0C23                     u5735:	
  2322  0C23  1803               	btfsc	3,0
  2323  0C24  2C4B               	goto	l5812
  2324  0C25                     l5804:	
  2325                           
  2326                           ;main.c: 536: {
  2327                           ;main.c: 537: switchNumberBuffer[j]= *token;
  2328  0C25  0020               	movlb	0	; select bank0
  2329  0C26  0865               	movf	_token,w
  2330  0C27  0086               	movwf	6
  2331  0C28  3002               	movlw	2	; select bank4/5
  2332  0C29  0087               	movwf	7
  2333  0C2A  0801               	movf	1,w
  2334  0C2B  00D5               	movwf	??_main
  2335  0C2C  0025               	movlb	5	; select bank5
  2336  0C2D  0854               	movf	main@j^(0+640),w
  2337  0C2E  3EEA               	addlw	(low (_switchNumberBuffer| (0+256)))& (0+255)
  2338  0C2F  0086               	movwf	6
  2339  0C30  3001               	movlw	1	; select bank3/4
  2340  0C31  0087               	movwf	7
  2341  0C32  0020               	movlb	0	; select bank0
  2342  0C33  0855               	movf	??_main,w
  2343  0C34  0081               	movwf	1
  2344                           
  2345                           ;main.c: 538: *token++;
  2346  0C35  3001               	movlw	1
  2347  0C36  00D5               	movwf	??_main
  2348  0C37  0855               	movf	??_main,w
  2349  0C38  07E5               	addwf	_token,f
  2350  0C39  3001               	movlw	1
  2351  0C3A  0025               	movlb	5	; select bank5
  2352  0C3B  07D4               	addwf	main@j^(0+640),f
  2353  0C3C  3000               	movlw	0
  2354  0C3D  3DD5               	addwfc	(main@j+1)^(0+640),f
  2355  0C3E  0855               	movf	(main@j+1)^(0+640),w
  2356  0C3F  3A80               	xorlw	128
  2357  0C40  0020               	movlb	0	; select bank0
  2358  0C41  00D5               	movwf	??_main
  2359  0C42  3080               	movlw	128
  2360  0C43  0255               	subwf	??_main,w
  2361  0C44  1D03               	skipz
  2362  0C45  2C49               	goto	u5745
  2363  0C46  3001               	movlw	1
  2364  0C47  0025               	movlb	5	; select bank5
  2365  0C48  0254               	subwf	main@j^(0+640),w
  2366  0C49                     u5745:	
  2367  0C49  1C03               	skipc
  2368  0C4A  2C25               	goto	l5804
  2369  0C4B                     l5812:	
  2370                           
  2371                           ;main.c: 539: }
  2372                           ;main.c: 540: SwitchNumberString = switchNumberBuffer;
  2373  0C4B  30EA               	movlw	(low (_switchNumberBuffer| (0+256)))& (0+255)
  2374  0C4C  0020               	movlb	0	; select bank0
  2375  0C4D  00D5               	movwf	??_main
  2376  0C4E  0855               	movf	??_main,w
  2377  0C4F  00E3               	movwf	_SwitchNumberString
  2378                           
  2379                           ;main.c: 543: }break;
  2380  0C50  2D45               	goto	l5868
  2381  0C51                     l5814:	
  2382                           ;main.c: 545: case 2:
  2383                           
  2384                           
  2385                           ;main.c: 546: {
  2386                           ;main.c: 547: AcknowledgementString = token;
  2387  0C51  0020               	movlb	0	; select bank0
  2388  0C52  0865               	movf	_token,w
  2389  0C53  00D5               	movwf	??_main
  2390  0C54  0855               	movf	??_main,w
  2391  0C55  0022               	movlb	2	; select bank2
  2392  0C56  00DF               	movwf	_AcknowledgementString^(0+256)
  2393                           
  2394                           ;main.c: 550: }break;
  2395  0C57  2D45               	goto	l5868
  2396  0C58                     l5816:	
  2397                           ;main.c: 551: case 3:
  2398                           
  2399                           
  2400                           ;main.c: 552: {
  2401                           ;main.c: 553: int k=0;
  2402  0C58  0025               	movlb	5	; select bank5
  2403  0C59  01D6               	clrf	main@k^(0+640)
  2404  0C5A  01D7               	clrf	(main@k+1)^(0+640)
  2405                           
  2406                           ;main.c: 554: for(k=0;k<1;k++)
  2407  0C5B  01D6               	clrf	main@k^(0+640)
  2408  0C5C  01D7               	clrf	(main@k+1)^(0+640)
  2409  0C5D  0857               	movf	(main@k+1)^(0+640),w
  2410  0C5E  3A80               	xorlw	128
  2411  0C5F  0020               	movlb	0	; select bank0
  2412  0C60  00D5               	movwf	??_main
  2413  0C61  3080               	movlw	128
  2414  0C62  0255               	subwf	??_main,w
  2415  0C63  1D03               	skipz
  2416  0C64  2C68               	goto	u5755
  2417  0C65  3001               	movlw	1
  2418  0C66  0025               	movlb	5	; select bank5
  2419  0C67  0256               	subwf	main@k^(0+640),w
  2420  0C68                     u5755:	
  2421  0C68  1803               	btfsc	3,0
  2422  0C69  2C90               	goto	l5830
  2423  0C6A                     l5822:	
  2424                           
  2425                           ;main.c: 555: {
  2426                           ;main.c: 556: switchstatusbuffer[k]= *token;
  2427  0C6A  0020               	movlb	0	; select bank0
  2428  0C6B  0865               	movf	_token,w
  2429  0C6C  0086               	movwf	6
  2430  0C6D  3002               	movlw	2	; select bank4/5
  2431  0C6E  0087               	movwf	7
  2432  0C6F  0801               	movf	1,w
  2433  0C70  00D5               	movwf	??_main
  2434  0C71  0025               	movlb	5	; select bank5
  2435  0C72  0856               	movf	main@k^(0+640),w
  2436  0C73  3E62               	addlw	(low (_switchstatusbuffer| (0+256)))& (0+255)
  2437  0C74  0086               	movwf	6
  2438  0C75  3001               	movlw	1	; select bank2/3
  2439  0C76  0087               	movwf	7
  2440  0C77  0020               	movlb	0	; select bank0
  2441  0C78  0855               	movf	??_main,w
  2442  0C79  0081               	movwf	1
  2443                           
  2444                           ;main.c: 557: *token++;
  2445  0C7A  3001               	movlw	1
  2446  0C7B  00D5               	movwf	??_main
  2447  0C7C  0855               	movf	??_main,w
  2448  0C7D  07E5               	addwf	_token,f
  2449  0C7E  3001               	movlw	1
  2450  0C7F  0025               	movlb	5	; select bank5
  2451  0C80  07D6               	addwf	main@k^(0+640),f
  2452  0C81  3000               	movlw	0
  2453  0C82  3DD7               	addwfc	(main@k+1)^(0+640),f
  2454  0C83  0857               	movf	(main@k+1)^(0+640),w
  2455  0C84  3A80               	xorlw	128
  2456  0C85  0020               	movlb	0	; select bank0
  2457  0C86  00D5               	movwf	??_main
  2458  0C87  3080               	movlw	128
  2459  0C88  0255               	subwf	??_main,w
  2460  0C89  1D03               	skipz
  2461  0C8A  2C8E               	goto	u5765
  2462  0C8B  3001               	movlw	1
  2463  0C8C  0025               	movlb	5	; select bank5
  2464  0C8D  0256               	subwf	main@k^(0+640),w
  2465  0C8E                     u5765:	
  2466  0C8E  1C03               	skipc
  2467  0C8F  2C6A               	goto	l5822
  2468  0C90                     l5830:	
  2469                           
  2470                           ;main.c: 558: }
  2471                           ;main.c: 559: SwitchStatusString = switchstatusbuffer;
  2472  0C90  3062               	movlw	(low (_switchstatusbuffer| (0+256)))& (0+255)
  2473  0C91  0020               	movlb	0	; select bank0
  2474  0C92  00D5               	movwf	??_main
  2475  0C93  0855               	movf	??_main,w
  2476  0C94  00E2               	movwf	_SwitchStatusString
  2477                           
  2478                           ;main.c: 563: } break;
  2479  0C95  2D45               	goto	l5868
  2480  0C96                     l5832:	
  2481                           ;main.c: 564: case 4:
  2482                           
  2483                           
  2484                           ;main.c: 565: {
  2485                           ;main.c: 566: RedColorIntensityString = token;
  2486  0C96  0020               	movlb	0	; select bank0
  2487  0C97  0865               	movf	_token,w
  2488  0C98  00D5               	movwf	??_main
  2489  0C99  0855               	movf	??_main,w
  2490  0C9A  00E1               	movwf	_RedColorIntensityString
  2491                           
  2492                           ;main.c: 567: RedColorIntensityStringLength = strlen(RedColorIntensityString);
  2493  0C9B  0861               	movf	_RedColorIntensityString,w
  2494  0C9C  00A0               	movwf	strlen@s
  2495  0C9D  39FF               	andlw	255
  2496  0C9E  1D03               	skipz
  2497  0C9F  3002               	movlw	2
  2498  0CA0  00A1               	movwf	strlen@s+1
  2499  0CA1  3193  2362  318B   	fcall	_strlen
  2500  0CA4  0020               	movlb	0	; select bank0
  2501  0CA5  0821               	movf	?_strlen+1,w
  2502  0CA6  0023               	movlb	3	; select bank3
  2503  0CA7  00E5               	movwf	(_RedColorIntensityStringLength+1)^(0+384)
  2504  0CA8  0020               	movlb	0	; select bank0
  2505  0CA9  0820               	movf	?_strlen,w
  2506  0CAA  0023               	movlb	3	; select bank3
  2507  0CAB  00E4               	movwf	_RedColorIntensityStringLength^(0+384)
  2508                           
  2509                           ;main.c: 570: } break;
  2510  0CAC  2D45               	goto	l5868
  2511  0CAD                     l5836:	
  2512                           ;main.c: 571: case 5:
  2513                           
  2514                           
  2515                           ;main.c: 572: {
  2516                           ;main.c: 573: GreenColorIntensityString = token;
  2517  0CAD  0020               	movlb	0	; select bank0
  2518  0CAE  0865               	movf	_token,w
  2519  0CAF  00D5               	movwf	??_main
  2520  0CB0  0855               	movf	??_main,w
  2521  0CB1  00E0               	movwf	_GreenColorIntensityString
  2522                           
  2523                           ;main.c: 574: GreenColorIntensityStringLength = strlen(GreenColorIntensityString);
  2524  0CB2  0860               	movf	_GreenColorIntensityString,w
  2525  0CB3  00A0               	movwf	strlen@s
  2526  0CB4  39FF               	andlw	255
  2527  0CB5  1D03               	skipz
  2528  0CB6  3002               	movlw	2
  2529  0CB7  00A1               	movwf	strlen@s+1
  2530  0CB8  3193  2362  318B   	fcall	_strlen
  2531  0CBB  0020               	movlb	0	; select bank0
  2532  0CBC  0821               	movf	?_strlen+1,w
  2533  0CBD  0023               	movlb	3	; select bank3
  2534  0CBE  00E3               	movwf	(_GreenColorIntensityStringLength+1)^(0+384)
  2535  0CBF  0020               	movlb	0	; select bank0
  2536  0CC0  0820               	movf	?_strlen,w
  2537  0CC1  0023               	movlb	3	; select bank3
  2538  0CC2  00E2               	movwf	_GreenColorIntensityStringLength^(0+384)
  2539                           
  2540                           ;main.c: 577: } break;
  2541  0CC3  2D45               	goto	l5868
  2542  0CC4                     l5840:	
  2543                           ;main.c: 578: case 6:
  2544                           
  2545                           
  2546                           ;main.c: 579: {
  2547                           ;main.c: 580: BlueColorIntensityString = token;
  2548  0CC4  0020               	movlb	0	; select bank0
  2549  0CC5  0865               	movf	_token,w
  2550  0CC6  00D5               	movwf	??_main
  2551  0CC7  0855               	movf	??_main,w
  2552  0CC8  00DF               	movwf	_BlueColorIntensityString
  2553                           
  2554                           ;main.c: 581: BlueColorIntensityStringLength = strlen(BlueColorIntensityString);
  2555  0CC9  085F               	movf	_BlueColorIntensityString,w
  2556  0CCA  00A0               	movwf	strlen@s
  2557  0CCB  39FF               	andlw	255
  2558  0CCC  1D03               	skipz
  2559  0CCD  3002               	movlw	2
  2560  0CCE  00A1               	movwf	strlen@s+1
  2561  0CCF  3193  2362  318B   	fcall	_strlen
  2562  0CD2  0020               	movlb	0	; select bank0
  2563  0CD3  0821               	movf	?_strlen+1,w
  2564  0CD4  0023               	movlb	3	; select bank3
  2565  0CD5  00DF               	movwf	(_BlueColorIntensityStringLength+1)^(0+384)
  2566  0CD6  0020               	movlb	0	; select bank0
  2567  0CD7  0820               	movf	?_strlen,w
  2568  0CD8  0023               	movlb	3	; select bank3
  2569  0CD9  00DE               	movwf	_BlueColorIntensityStringLength^(0+384)
  2570                           
  2571                           ;main.c: 584: } break;
  2572  0CDA  2D45               	goto	l5868
  2573  0CDB                     l5844:	
  2574                           ;main.c: 585: case 7:
  2575                           
  2576                           
  2577                           ;main.c: 586: {
  2578                           ;main.c: 588: int k=0;
  2579  0CDB  0025               	movlb	5	; select bank5
  2580  0CDC  01D8               	clrf	main@k_1118^(0+640)
  2581  0CDD  01D9               	clrf	(main@k_1118+1)^(0+640)
  2582                           
  2583                           ;main.c: 589: for(k=0;k<1;k++)
  2584  0CDE  01D8               	clrf	main@k_1118^(0+640)
  2585  0CDF  01D9               	clrf	(main@k_1118+1)^(0+640)
  2586  0CE0  0859               	movf	(main@k_1118+1)^(0+640),w
  2587  0CE1  3A80               	xorlw	128
  2588  0CE2  0020               	movlb	0	; select bank0
  2589  0CE3  00D5               	movwf	??_main
  2590  0CE4  3080               	movlw	128
  2591  0CE5  0255               	subwf	??_main,w
  2592  0CE6  1D03               	skipz
  2593  0CE7  2CEB               	goto	u5775
  2594  0CE8  3001               	movlw	1
  2595  0CE9  0025               	movlb	5	; select bank5
  2596  0CEA  0258               	subwf	main@k_1118^(0+640),w
  2597  0CEB                     u5775:	
  2598  0CEB  1803               	btfsc	3,0
  2599  0CEC  2D15               	goto	l5858
  2600  0CED                     l5850:	
  2601                           
  2602                           ;main.c: 590: {
  2603                           ;main.c: 591: ChildLockString[k]= *token;
  2604  0CED  0020               	movlb	0	; select bank0
  2605  0CEE  0865               	movf	_token,w
  2606  0CEF  0086               	movwf	6
  2607  0CF0  3002               	movlw	2	; select bank4/5
  2608  0CF1  0087               	movwf	7
  2609  0CF2  0801               	movf	1,w
  2610  0CF3  00D5               	movwf	??_main
  2611  0CF4  0025               	movlb	5	; select bank5
  2612  0CF5  0858               	movf	main@k_1118^(0+640),w
  2613  0CF6  0020               	movlb	0	; select bank0
  2614  0CF7  075D               	addwf	_ChildLockString,w
  2615  0CF8  00D6               	movwf	??_main+1
  2616  0CF9  0856               	movf	??_main+1,w
  2617  0CFA  0086               	movwf	6
  2618  0CFB  3001               	movlw	1	; select bank2/3
  2619  0CFC  0087               	movwf	7
  2620  0CFD  0855               	movf	??_main,w
  2621  0CFE  0081               	movwf	1
  2622                           
  2623                           ;main.c: 592: *token++;
  2624  0CFF  3001               	movlw	1
  2625  0D00  00D5               	movwf	??_main
  2626  0D01  0855               	movf	??_main,w
  2627  0D02  07E5               	addwf	_token,f
  2628  0D03  3001               	movlw	1
  2629  0D04  0025               	movlb	5	; select bank5
  2630  0D05  07D8               	addwf	main@k_1118^(0+640),f
  2631  0D06  3000               	movlw	0
  2632  0D07  3DD9               	addwfc	(main@k_1118+1)^(0+640),f
  2633  0D08  0859               	movf	(main@k_1118+1)^(0+640),w
  2634  0D09  3A80               	xorlw	128
  2635  0D0A  0020               	movlb	0	; select bank0
  2636  0D0B  00D5               	movwf	??_main
  2637  0D0C  3080               	movlw	128
  2638  0D0D  0255               	subwf	??_main,w
  2639  0D0E  1D03               	skipz
  2640  0D0F  2D13               	goto	u5785
  2641  0D10  3001               	movlw	1
  2642  0D11  0025               	movlb	5	; select bank5
  2643  0D12  0258               	subwf	main@k_1118^(0+640),w
  2644  0D13                     u5785:	
  2645  0D13  1C03               	skipc
  2646  0D14  2CED               	goto	l5850
  2647  0D15                     l5858:	
  2648                           
  2649                           ;main.c: 593: }
  2650                           ;main.c: 594: ChildLockString = ChildLockbuffer;
  2651  0D15  3060               	movlw	(low (_ChildLockbuffer| (0+256)))& (0+255)
  2652  0D16  0020               	movlb	0	; select bank0
  2653  0D17  00D5               	movwf	??_main
  2654  0D18  0855               	movf	??_main,w
  2655  0D19  00DD               	movwf	_ChildLockString
  2656                           
  2657                           ;main.c: 597: } break;
  2658  0D1A  2D45               	goto	l5868
  2659  0D1B                     l5860:	
  2660                           ;main.c: 598: case 8:
  2661                           
  2662                           
  2663                           ;main.c: 599: {
  2664                           ;main.c: 600: AllColorIntensityString = token;
  2665  0D1B  0020               	movlb	0	; select bank0
  2666  0D1C  0865               	movf	_token,w
  2667  0D1D  00D5               	movwf	??_main
  2668  0D1E  0855               	movf	??_main,w
  2669  0D1F  00DE               	movwf	_AllColorIntensityString
  2670                           
  2671                           ;main.c: 601: AllColorIntensityStringLength = strlen(AllColorIntensityString);
  2672  0D20  085E               	movf	_AllColorIntensityString,w
  2673  0D21  00A0               	movwf	strlen@s
  2674  0D22  39FF               	andlw	255
  2675  0D23  1D03               	skipz
  2676  0D24  3002               	movlw	2
  2677  0D25  00A1               	movwf	strlen@s+1
  2678  0D26  3193  2362  318B   	fcall	_strlen
  2679  0D29  0020               	movlb	0	; select bank0
  2680  0D2A  0821               	movf	?_strlen+1,w
  2681  0D2B  0023               	movlb	3	; select bank3
  2682  0D2C  00E1               	movwf	(_AllColorIntensityStringLength+1)^(0+384)
  2683  0D2D  0020               	movlb	0	; select bank0
  2684  0D2E  0820               	movf	?_strlen,w
  2685  0D2F  0023               	movlb	3	; select bank3
  2686  0D30  00E0               	movwf	_AllColorIntensityStringLength^(0+384)
  2687                           
  2688                           ;main.c: 608: }
  2689                           
  2690                           ;main.c: 605: break;
  2691                           
  2692                           ;main.c: 604: default:
  2693                           
  2694                           ;main.c: 602: }break;
  2695  0D31  2D45               	goto	l5868
  2696  0D32                     l5866:	
  2697                           
  2698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2699                           ; Switch size 1, requested type "space"
  2700                           ; Number of cases is 1, Range of values is 0 to 0
  2701                           ; switch strategies available:
  2702                           ; Name         Instructions Cycles
  2703                           ; simple_byte            4     3 (average)
  2704                           ; direct_byte            8     6 (fixed)
  2705                           ; jumptable            260     6 (fixed)
  2706                           ;	Chosen strategy is simple_byte
  2707  0D32  0022               	movlb	2	; select bank2
  2708  0D33  0837               	movf	(_partCounter+1)^(0+256),w
  2709  0D34  3A00               	xorlw	0	; case 0
  2710  0D35  1903               	skipnz
  2711  0D36  2D38               	goto	l6276
  2712  0D37  2D45               	goto	l5868
  2713  0D38                     l6276:	
  2714                           
  2715                           ; Switch size 1, requested type "space"
  2716                           ; Number of cases is 8, Range of values is 1 to 8
  2717                           ; switch strategies available:
  2718                           ; Name         Instructions Cycles
  2719                           ; direct_byte           25     9 (fixed)
  2720                           ; simple_byte           25    13 (average)
  2721                           ; jumptable            263     9 (fixed)
  2722                           ;	Chosen strategy is direct_byte
  2723  0D38  0836               	movf	_partCounter^(0+256),w
  2724  0D39  3EFF               	addlw	-1
  2725  0D3A  1C03               	skipc
  2726  0D3B  2D45               	goto	l5868
  2727  0D3C  0084               	movwf	4
  2728  0D3D  3008               	movlw	8
  2729  0D3E  0204               	subwf	4,w
  2730  0D3F  1803               	skipnc
  2731  0D40  2D45               	goto	l5868
  2732  0D41  3190               	movlp	high S6278
  2733  0D42  3504               	lslf	4,w
  2734  0D43  3E00               	addlw	low S6278
  2735  0D44  0082               	movwf	2
  2736  0D45                     l5868:	
  2737  0D45  0020               	movlb	0	; select bank0
  2738  0D46  0865               	movf	_token,w
  2739  0D47  1D03               	btfss	3,2
  2740  0D48  2C00               	goto	l5794
  2741  0D49                     l5870:	
  2742                           
  2743                           ;main.c: 609: }
  2744                           ;main.c: 611: }
  2745                           ;main.c: 613: applicationControlRGB(ModuleNameString,SwitchNumberString,SwitchStatusStri
      +                          ng,
  2746                           ;main.c: 614: RedColorIntensityString,GreenColorIntensityString,BlueColorIntensityString
      +                          ,ChildLockString,AllColorIntensityString );
  2747  0D49  0863               	movf	_SwitchNumberString,w
  2748  0D4A  00D5               	movwf	??_main
  2749  0D4B  0855               	movf	??_main,w
  2750  0D4C  00CC               	movwf	applicationControlRGB@SwitchNumberstr
  2751  0D4D  0862               	movf	_SwitchStatusString,w
  2752  0D4E  00D6               	movwf	??_main+1
  2753  0D4F  0856               	movf	??_main+1,w
  2754  0D50  00CD               	movwf	applicationControlRGB@SwitchStatusstr
  2755  0D51  0861               	movf	_RedColorIntensityString,w
  2756  0D52  00D7               	movwf	??_main+2
  2757  0D53  0857               	movf	??_main+2,w
  2758  0D54  00CE               	movwf	applicationControlRGB@RedColorIntensitystr
  2759  0D55  0860               	movf	_GreenColorIntensityString,w
  2760  0D56  00D8               	movwf	??_main+3
  2761  0D57  0858               	movf	??_main+3,w
  2762  0D58  00CF               	movwf	applicationControlRGB@GreenColorIntensitystr
  2763  0D59  085F               	movf	_BlueColorIntensityString,w
  2764  0D5A  00D9               	movwf	??_main+4
  2765  0D5B  0859               	movf	??_main+4,w
  2766  0D5C  00D0               	movwf	applicationControlRGB@BlueColorIntensitystr
  2767  0D5D  085D               	movf	_ChildLockString,w
  2768  0D5E  00DA               	movwf	??_main+5
  2769  0D5F  085A               	movf	??_main+5,w
  2770  0D60  00D1               	movwf	applicationControlRGB@ChildLockstr
  2771  0D61  085E               	movf	_AllColorIntensityString,w
  2772  0D62  00DB               	movwf	??_main+6
  2773  0D63  085B               	movf	??_main+6,w
  2774  0D64  00D2               	movwf	applicationControlRGB@Allcolorstr
  2775  0D65  0864               	movf	_ModuleNameString,w
  2776  0D66  3181  217D  318B   	fcall	_applicationControlRGB
  2777                           
  2778                           ;main.c: 616: }
  2779  0D69  2DA6               	goto	l5890
  2780  0D6A                     l5872:	
  2781                           
  2782                           ;main.c: 618: else
  2783                           ;main.c: 619: {
  2784                           ;main.c: 621: errorsMain("ERLS");
  2785  0D6A  3020               	movlw	low (STR_19| (0+32768))
  2786  0D6B  0020               	movlb	0	; select bank0
  2787  0D6C  00A0               	movwf	errorsMain@errNum
  2788  0D6D  3098               	movlw	high (STR_19| (0+32768))
  2789  0D6E  00A1               	movwf	errorsMain@errNum+1
  2790  0D6F  3193  2327  318B   	fcall	_errorsMain
  2791                           
  2792                           ;main.c: 622: RC1STAbits.SPEN = 0;
  2793  0D72  0023               	movlb	3	; select bank3
  2794  0D73  139D               	bcf	29,7	;volatile
  2795                           
  2796                           ;main.c: 623: RC1STAbits.CREN = 0;
  2797  0D74  121D               	bcf	29,4	;volatile
  2798                           
  2799                           ;main.c: 624: for(int dataBufferCounter = 0; dataBufferCounter< 15; dataBufferCounter++)
  2800  0D75  0025               	movlb	5	; select bank5
  2801  0D76  01D2               	clrf	main@dataBufferCounter^(0+640)
  2802  0D77  01D3               	clrf	(main@dataBufferCounter+1)^(0+640)
  2803  0D78  0853               	movf	(main@dataBufferCounter+1)^(0+640),w
  2804  0D79  3A80               	xorlw	128
  2805  0D7A  0020               	movlb	0	; select bank0
  2806  0D7B  00D5               	movwf	??_main
  2807  0D7C  3080               	movlw	128
  2808  0D7D  0255               	subwf	??_main,w
  2809  0D7E  1D03               	skipz
  2810  0D7F  2D83               	goto	u5805
  2811  0D80  300F               	movlw	15
  2812  0D81  0025               	movlb	5	; select bank5
  2813  0D82  0252               	subwf	main@dataBufferCounter^(0+640),w
  2814  0D83                     u5805:	
  2815  0D83  1803               	btfsc	3,0
  2816  0D84  2DA3               	goto	l517
  2817  0D85                     l5884:	
  2818                           
  2819                           ;main.c: 625: {
  2820                           ;main.c: 626: mainReceivedDataBuffer[dataBufferCounter] = '#';
  2821  0D85  3023               	movlw	35
  2822  0D86  0020               	movlb	0	; select bank0
  2823  0D87  00D5               	movwf	??_main
  2824  0D88  0025               	movlb	5	; select bank5
  2825  0D89  0852               	movf	main@dataBufferCounter^(0+640),w
  2826  0D8A  3EA0               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
  2827  0D8B  0086               	movwf	6
  2828  0D8C  3002               	movlw	2	; select bank5/6
  2829  0D8D  0087               	movwf	7
  2830  0D8E  0020               	movlb	0	; select bank0
  2831  0D8F  0855               	movf	??_main,w
  2832  0D90  0081               	movwf	1
  2833  0D91  3001               	movlw	1
  2834  0D92  0025               	movlb	5	; select bank5
  2835  0D93  07D2               	addwf	main@dataBufferCounter^(0+640),f
  2836  0D94  3000               	movlw	0
  2837  0D95  3DD3               	addwfc	(main@dataBufferCounter+1)^(0+640),f
  2838  0D96  0853               	movf	(main@dataBufferCounter+1)^(0+640),w
  2839  0D97  3A80               	xorlw	128
  2840  0D98  0020               	movlb	0	; select bank0
  2841  0D99  00D5               	movwf	??_main
  2842  0D9A  3080               	movlw	128
  2843  0D9B  0255               	subwf	??_main,w
  2844  0D9C  1D03               	skipz
  2845  0D9D  2DA1               	goto	u5815
  2846  0D9E  300F               	movlw	15
  2847  0D9F  0025               	movlb	5	; select bank5
  2848  0DA0  0252               	subwf	main@dataBufferCounter^(0+640),w
  2849  0DA1                     u5815:	
  2850  0DA1  1C03               	skipc
  2851  0DA2  2D85               	goto	l5884
  2852  0DA3                     l517:	
  2853                           
  2854                           ;main.c: 627: }
  2855                           ;main.c: 628: RC1STAbits.CREN = 1;
  2856  0DA3  0023               	movlb	3	; select bank3
  2857  0DA4  161D               	bsf	29,4	;volatile
  2858                           
  2859                           ;main.c: 629: RC1STAbits.SPEN=1;
  2860  0DA5  179D               	bsf	29,7	;volatile
  2861  0DA6                     l5890:	
  2862                           
  2863                           ;main.c: 630: }
  2864                           ;main.c: 631: }
  2865                           ;main.c: 636: int man = 1;
  2866  0DA6  3001               	movlw	1
  2867  0DA7  0025               	movlb	5	; select bank5
  2868  0DA8  00DA               	movwf	main@man^(0+640)
  2869  0DA9  3000               	movlw	0
  2870  0DAA  00DB               	movwf	(main@man^(0+640)+1)
  2871                           
  2872                           ;main.c: 637: if(copy_parentalLockBuffer[1] == '0' && PORTDbits.RD6 == 0 && M1 == 0)
  2873  0DAB  3030               	movlw	48
  2874  0DAC  0023               	movlb	3	; select bank3
  2875  0DAD  0639               	xorwf	(_copy_parentalLockBuffer^(0+384)+1),w
  2876  0DAE  1D03               	btfss	3,2
  2877  0DAF  2DD2               	goto	l5908
  2878  0DB0  0020               	movlb	0	; select bank0
  2879  0DB1  1B0F               	btfsc	15,6	;volatile
  2880  0DB2  2DD2               	goto	l5908
  2881  0DB3  0022               	movlb	2	; select bank2
  2882  0DB4  082E               	movf	_M1^(0+256),w
  2883  0DB5  042F               	iorwf	(_M1+1)^(0+256),w
  2884  0DB6  1D03               	btfss	3,2
  2885  0DB7  2DD2               	goto	l5908
  2886                           
  2887                           ;main.c: 638: {
  2888                           ;main.c: 639: if(man == 1)
  2889  0DB8  0025               	movlb	5	; select bank5
  2890  0DB9  035A               	decf	main@man^(0+640),w
  2891  0DBA  045B               	iorwf	(main@man+1)^(0+640),w
  2892  0DBB  1D03               	btfss	3,2
  2893  0DBC  2DCA               	goto	l5904
  2894                           
  2895                           ;main.c: 640: {
  2896                           ;main.c: 641: SwitchOnStatustToGatway('1');
  2897  0DBD  3031               	movlw	49
  2898  0DBE  0020               	movlb	0	; select bank0
  2899  0DBF  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  2900  0DC0  3000               	movlw	0
  2901  0DC1  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  2902  0DC2  3195  25F6  318B   	fcall	_SwitchOnStatustToGatway
  2903                           
  2904                           ;main.c: 643: TransmissionIndicationLedBlinking();
  2905  0DC5  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  2906                           
  2907                           ;main.c: 644: PORTEbits.RE0=1;
  2908  0DC8  0020               	movlb	0	; select bank0
  2909  0DC9  1410               	bsf	16,0	;volatile
  2910  0DCA                     l5904:	
  2911                           
  2912                           ;main.c: 646: }
  2913                           ;main.c: 647: man=0;
  2914  0DCA  0025               	movlb	5	; select bank5
  2915  0DCB  01DA               	clrf	main@man^(0+640)
  2916  0DCC  01DB               	clrf	(main@man+1)^(0+640)
  2917                           
  2918                           ;main.c: 648: M1=1;
  2919  0DCD  3001               	movlw	1
  2920  0DCE  0022               	movlb	2	; select bank2
  2921  0DCF  00AE               	movwf	_M1^(0+256)
  2922  0DD0  3000               	movlw	0
  2923  0DD1  00AF               	movwf	(_M1^(0+256)+1)
  2924  0DD2                     l5908:	
  2925                           
  2926                           ;main.c: 650: }
  2927                           ;main.c: 652: if(copy_parentalLockBuffer[1] == '0' && PORTDbits.RD6 == 1 && M1 == 1)
  2928  0DD2  3030               	movlw	48
  2929  0DD3  0023               	movlb	3	; select bank3
  2930  0DD4  0639               	xorwf	(_copy_parentalLockBuffer^(0+384)+1),w
  2931  0DD5  1D03               	btfss	3,2
  2932  0DD6  2DF7               	goto	l5924
  2933  0DD7  0020               	movlb	0	; select bank0
  2934  0DD8  1F0F               	btfss	15,6	;volatile
  2935  0DD9  2DF7               	goto	l5924
  2936  0DDA  0022               	movlb	2	; select bank2
  2937  0DDB  032E               	decf	_M1^(0+256),w
  2938  0DDC  042F               	iorwf	(_M1+1)^(0+256),w
  2939  0DDD  1D03               	btfss	3,2
  2940  0DDE  2DF7               	goto	l5924
  2941                           
  2942                           ;main.c: 653: {
  2943                           ;main.c: 655: if(man==1)
  2944  0DDF  0025               	movlb	5	; select bank5
  2945  0DE0  035A               	decf	main@man^(0+640),w
  2946  0DE1  045B               	iorwf	(main@man+1)^(0+640),w
  2947  0DE2  1D03               	btfss	3,2
  2948  0DE3  2DF1               	goto	l5920
  2949                           
  2950                           ;main.c: 656: {
  2951                           ;main.c: 657: SwitchOffStatustToGatway('1');
  2952  0DE4  3031               	movlw	49
  2953  0DE5  0020               	movlb	0	; select bank0
  2954  0DE6  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  2955  0DE7  3000               	movlw	0
  2956  0DE8  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  2957  0DE9  3195  25C3  318B   	fcall	_SwitchOffStatustToGatway
  2958                           
  2959                           ;main.c: 658: TransmissionIndicationLedBlinking();
  2960  0DEC  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  2961                           
  2962                           ;main.c: 659: PORTEbits.RE0=0;
  2963  0DEF  0020               	movlb	0	; select bank0
  2964  0DF0  1010               	bcf	16,0	;volatile
  2965  0DF1                     l5920:	
  2966                           
  2967                           ;main.c: 660: }
  2968                           ;main.c: 661: man=0;
  2969  0DF1  0025               	movlb	5	; select bank5
  2970  0DF2  01DA               	clrf	main@man^(0+640)
  2971  0DF3  01DB               	clrf	(main@man+1)^(0+640)
  2972                           
  2973                           ;main.c: 662: M1=0;
  2974  0DF4  0022               	movlb	2	; select bank2
  2975  0DF5  01AE               	clrf	_M1^(0+256)
  2976  0DF6  01AF               	clrf	(_M1+1)^(0+256)
  2977  0DF7                     l5924:	
  2978                           
  2979                           ;main.c: 663: }
  2980                           ;main.c: 667: if(copy_parentalLockBuffer[2] == '0' && PORTDbits.RD7 == 0 && M2 == 0)
  2981  0DF7  3030               	movlw	48
  2982  0DF8  0023               	movlb	3	; select bank3
  2983  0DF9  063A               	xorwf	(_copy_parentalLockBuffer^(0+384)+2),w
  2984  0DFA  1D03               	btfss	3,2
  2985  0DFB  2E1E               	goto	l5940
  2986  0DFC  0020               	movlb	0	; select bank0
  2987  0DFD  1B8F               	btfsc	15,7	;volatile
  2988  0DFE  2E1E               	goto	l5940
  2989  0DFF  0022               	movlb	2	; select bank2
  2990  0E00  082C               	movf	_M2^(0+256),w
  2991  0E01  042D               	iorwf	(_M2+1)^(0+256),w
  2992  0E02  1D03               	btfss	3,2
  2993  0E03  2E1E               	goto	l5940
  2994                           
  2995                           ;main.c: 668: {
  2996                           ;main.c: 669: if(man==1)
  2997  0E04  0025               	movlb	5	; select bank5
  2998  0E05  035A               	decf	main@man^(0+640),w
  2999  0E06  045B               	iorwf	(main@man+1)^(0+640),w
  3000  0E07  1D03               	btfss	3,2
  3001  0E08  2E16               	goto	l5936
  3002                           
  3003                           ;main.c: 670: {
  3004                           ;main.c: 671: SwitchOnStatustToGatway('2');
  3005  0E09  3032               	movlw	50
  3006  0E0A  0020               	movlb	0	; select bank0
  3007  0E0B  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3008  0E0C  3000               	movlw	0
  3009  0E0D  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3010  0E0E  3195  25F6  318B   	fcall	_SwitchOnStatustToGatway
  3011                           
  3012                           ;main.c: 672: TransmissionIndicationLedBlinking();
  3013  0E11  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3014                           
  3015                           ;main.c: 673: PORTEbits.RE1=1;
  3016  0E14  0020               	movlb	0	; select bank0
  3017  0E15  1490               	bsf	16,1	;volatile
  3018  0E16                     l5936:	
  3019                           
  3020                           ;main.c: 674: }
  3021                           ;main.c: 675: man=0;
  3022  0E16  0025               	movlb	5	; select bank5
  3023  0E17  01DA               	clrf	main@man^(0+640)
  3024  0E18  01DB               	clrf	(main@man+1)^(0+640)
  3025                           
  3026                           ;main.c: 676: M2=1;
  3027  0E19  3001               	movlw	1
  3028  0E1A  0022               	movlb	2	; select bank2
  3029  0E1B  00AC               	movwf	_M2^(0+256)
  3030  0E1C  3000               	movlw	0
  3031  0E1D  00AD               	movwf	(_M2^(0+256)+1)
  3032  0E1E                     l5940:	
  3033                           
  3034                           ;main.c: 677: }
  3035                           ;main.c: 679: if(copy_parentalLockBuffer[2] == '0' && PORTDbits.RD7 == 1 && M2 == 1)
  3036  0E1E  3030               	movlw	48
  3037  0E1F  0023               	movlb	3	; select bank3
  3038  0E20  063A               	xorwf	(_copy_parentalLockBuffer^(0+384)+2),w
  3039  0E21  1D03               	btfss	3,2
  3040  0E22  2E43               	goto	l5956
  3041  0E23  0020               	movlb	0	; select bank0
  3042  0E24  1F8F               	btfss	15,7	;volatile
  3043  0E25  2E43               	goto	l5956
  3044  0E26  0022               	movlb	2	; select bank2
  3045  0E27  032C               	decf	_M2^(0+256),w
  3046  0E28  042D               	iorwf	(_M2+1)^(0+256),w
  3047  0E29  1D03               	btfss	3,2
  3048  0E2A  2E43               	goto	l5956
  3049                           
  3050                           ;main.c: 680: {
  3051                           ;main.c: 681: if(man==1)
  3052  0E2B  0025               	movlb	5	; select bank5
  3053  0E2C  035A               	decf	main@man^(0+640),w
  3054  0E2D  045B               	iorwf	(main@man+1)^(0+640),w
  3055  0E2E  1D03               	btfss	3,2
  3056  0E2F  2E3D               	goto	l5952
  3057                           
  3058                           ;main.c: 682: {
  3059                           ;main.c: 683: SwitchOffStatustToGatway('2');
  3060  0E30  3032               	movlw	50
  3061  0E31  0020               	movlb	0	; select bank0
  3062  0E32  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3063  0E33  3000               	movlw	0
  3064  0E34  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3065  0E35  3195  25C3  318B   	fcall	_SwitchOffStatustToGatway
  3066                           
  3067                           ;main.c: 684: TransmissionIndicationLedBlinking();
  3068  0E38  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3069                           
  3070                           ;main.c: 685: PORTEbits.RE1=0;
  3071  0E3B  0020               	movlb	0	; select bank0
  3072  0E3C  1090               	bcf	16,1	;volatile
  3073  0E3D                     l5952:	
  3074                           
  3075                           ;main.c: 686: }
  3076                           ;main.c: 687: man=0;
  3077  0E3D  0025               	movlb	5	; select bank5
  3078  0E3E  01DA               	clrf	main@man^(0+640)
  3079  0E3F  01DB               	clrf	(main@man+1)^(0+640)
  3080                           
  3081                           ;main.c: 688: M2=0;
  3082  0E40  0022               	movlb	2	; select bank2
  3083  0E41  01AC               	clrf	_M2^(0+256)
  3084  0E42  01AD               	clrf	(_M2+1)^(0+256)
  3085  0E43                     l5956:	
  3086                           
  3087                           ;main.c: 689: }
  3088                           ;main.c: 694: if(copy_parentalLockBuffer[3] == '0' && PORTBbits.RB0 == 0 && M3 == 0)
  3089  0E43  3030               	movlw	48
  3090  0E44  0023               	movlb	3	; select bank3
  3091  0E45  063B               	xorwf	(_copy_parentalLockBuffer^(0+384)+3),w
  3092  0E46  1D03               	btfss	3,2
  3093  0E47  2E69               	goto	l5972
  3094  0E48  0020               	movlb	0	; select bank0
  3095  0E49  180D               	btfsc	13,0	;volatile
  3096  0E4A  2E69               	goto	l5972
  3097  0E4B  0022               	movlb	2	; select bank2
  3098  0E4C  082A               	movf	_M3^(0+256),w
  3099  0E4D  042B               	iorwf	(_M3+1)^(0+256),w
  3100  0E4E  1D03               	btfss	3,2
  3101  0E4F  2E69               	goto	l5972
  3102                           
  3103                           ;main.c: 695: {
  3104                           ;main.c: 696: if(man == 1)
  3105  0E50  0025               	movlb	5	; select bank5
  3106  0E51  035A               	decf	main@man^(0+640),w
  3107  0E52  045B               	iorwf	(main@man+1)^(0+640),w
  3108  0E53  1D03               	btfss	3,2
  3109  0E54  2E62               	goto	l5968
  3110                           
  3111                           ;main.c: 697: {
  3112                           ;main.c: 698: SwitchOnStatustToGatway('3');
  3113  0E55  3033               	movlw	51
  3114  0E56  0020               	movlb	0	; select bank0
  3115  0E57  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3116  0E58  3000               	movlw	0
  3117  0E59  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3118  0E5A  3195  25F6  318B   	fcall	_SwitchOnStatustToGatway
  3119                           
  3120                           ;main.c: 699: TransmissionIndicationLedBlinking();
  3121  0E5D  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3122                           
  3123                           ;main.c: 700: PORTGbits.RG0=1;
  3124  0E60  0025               	movlb	5	; select bank5
  3125  0E61  140D               	bsf	13,0	;volatile
  3126  0E62                     l5968:	
  3127                           
  3128                           ;main.c: 701: }
  3129                           ;main.c: 702: man=0;
  3130  0E62  01DA               	clrf	main@man^(0+640)
  3131  0E63  01DB               	clrf	(main@man+1)^(0+640)
  3132                           
  3133                           ;main.c: 703: M3=1;
  3134  0E64  3001               	movlw	1
  3135  0E65  0022               	movlb	2	; select bank2
  3136  0E66  00AA               	movwf	_M3^(0+256)
  3137  0E67  3000               	movlw	0
  3138  0E68  00AB               	movwf	(_M3^(0+256)+1)
  3139  0E69                     l5972:	
  3140                           
  3141                           ;main.c: 705: }
  3142                           ;main.c: 707: if(copy_parentalLockBuffer[3] == '0' && PORTBbits.RB0 == 1 && M3 == 1)
  3143  0E69  3030               	movlw	48
  3144  0E6A  0023               	movlb	3	; select bank3
  3145  0E6B  063B               	xorwf	(_copy_parentalLockBuffer^(0+384)+3),w
  3146  0E6C  1D03               	btfss	3,2
  3147  0E6D  2E8D               	goto	l5988
  3148  0E6E  0020               	movlb	0	; select bank0
  3149  0E6F  1C0D               	btfss	13,0	;volatile
  3150  0E70  2E8D               	goto	l5988
  3151  0E71  0022               	movlb	2	; select bank2
  3152  0E72  032A               	decf	_M3^(0+256),w
  3153  0E73  042B               	iorwf	(_M3+1)^(0+256),w
  3154  0E74  1D03               	btfss	3,2
  3155  0E75  2E8D               	goto	l5988
  3156                           
  3157                           ;main.c: 708: {
  3158                           ;main.c: 709: if(man==1)
  3159  0E76  0025               	movlb	5	; select bank5
  3160  0E77  035A               	decf	main@man^(0+640),w
  3161  0E78  045B               	iorwf	(main@man+1)^(0+640),w
  3162  0E79  1D03               	btfss	3,2
  3163  0E7A  2E88               	goto	l5984
  3164                           
  3165                           ;main.c: 710: {
  3166                           ;main.c: 711: SwitchOffStatustToGatway('3');
  3167  0E7B  3033               	movlw	51
  3168  0E7C  0020               	movlb	0	; select bank0
  3169  0E7D  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3170  0E7E  3000               	movlw	0
  3171  0E7F  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3172  0E80  3195  25C3  318B   	fcall	_SwitchOffStatustToGatway
  3173                           
  3174                           ;main.c: 712: TransmissionIndicationLedBlinking();
  3175  0E83  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3176                           
  3177                           ;main.c: 713: PORTGbits.RG0=0;
  3178  0E86  0025               	movlb	5	; select bank5
  3179  0E87  100D               	bcf	13,0	;volatile
  3180  0E88                     l5984:	
  3181                           
  3182                           ;main.c: 714: }
  3183                           ;main.c: 715: man=0;
  3184  0E88  01DA               	clrf	main@man^(0+640)
  3185  0E89  01DB               	clrf	(main@man+1)^(0+640)
  3186                           
  3187                           ;main.c: 716: M3=0;
  3188  0E8A  0022               	movlb	2	; select bank2
  3189  0E8B  01AA               	clrf	_M3^(0+256)
  3190  0E8C  01AB               	clrf	(_M3+1)^(0+256)
  3191  0E8D                     l5988:	
  3192                           
  3193                           ;main.c: 718: }
  3194                           ;main.c: 723: if(copy_parentalLockBuffer[4] == '0' && PORTBbits.RB1 == 0 && M4 == 0)
  3195  0E8D  3030               	movlw	48
  3196  0E8E  0023               	movlb	3	; select bank3
  3197  0E8F  063C               	xorwf	(_copy_parentalLockBuffer^(0+384)+4),w
  3198  0E90  1D03               	btfss	3,2
  3199  0E91  2EB3               	goto	l6004
  3200  0E92  0020               	movlb	0	; select bank0
  3201  0E93  188D               	btfsc	13,1	;volatile
  3202  0E94  2EB3               	goto	l6004
  3203  0E95  0022               	movlb	2	; select bank2
  3204  0E96  0828               	movf	_M4^(0+256),w
  3205  0E97  0429               	iorwf	(_M4+1)^(0+256),w
  3206  0E98  1D03               	btfss	3,2
  3207  0E99  2EB3               	goto	l6004
  3208                           
  3209                           ;main.c: 724: {
  3210                           ;main.c: 725: if(man==1)
  3211  0E9A  0025               	movlb	5	; select bank5
  3212  0E9B  035A               	decf	main@man^(0+640),w
  3213  0E9C  045B               	iorwf	(main@man+1)^(0+640),w
  3214  0E9D  1D03               	btfss	3,2
  3215  0E9E  2EAC               	goto	l6000
  3216                           
  3217                           ;main.c: 726: {
  3218                           ;main.c: 727: SwitchOnStatustToGatway('4');
  3219  0E9F  3034               	movlw	52
  3220  0EA0  0020               	movlb	0	; select bank0
  3221  0EA1  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3222  0EA2  3000               	movlw	0
  3223  0EA3  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3224  0EA4  3195  25F6  318B   	fcall	_SwitchOnStatustToGatway
  3225                           
  3226                           ;main.c: 728: TransmissionIndicationLedBlinking();
  3227  0EA7  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3228                           
  3229                           ;main.c: 729: PORTGbits.RG3=1;
  3230  0EAA  0025               	movlb	5	; select bank5
  3231  0EAB  158D               	bsf	13,3	;volatile
  3232  0EAC                     l6000:	
  3233                           
  3234                           ;main.c: 730: }
  3235                           ;main.c: 731: man=0;
  3236  0EAC  01DA               	clrf	main@man^(0+640)
  3237  0EAD  01DB               	clrf	(main@man+1)^(0+640)
  3238                           
  3239                           ;main.c: 732: M4=1;
  3240  0EAE  3001               	movlw	1
  3241  0EAF  0022               	movlb	2	; select bank2
  3242  0EB0  00A8               	movwf	_M4^(0+256)
  3243  0EB1  3000               	movlw	0
  3244  0EB2  00A9               	movwf	(_M4^(0+256)+1)
  3245  0EB3                     l6004:	
  3246                           
  3247                           ;main.c: 734: }
  3248                           ;main.c: 736: if(copy_parentalLockBuffer[4] == '0' && PORTBbits.RB1 == 1 && M4 == 1)
  3249  0EB3  3030               	movlw	48
  3250  0EB4  0023               	movlb	3	; select bank3
  3251  0EB5  063C               	xorwf	(_copy_parentalLockBuffer^(0+384)+4),w
  3252  0EB6  1D03               	btfss	3,2
  3253  0EB7  2ED7               	goto	l6020
  3254  0EB8  0020               	movlb	0	; select bank0
  3255  0EB9  1C8D               	btfss	13,1	;volatile
  3256  0EBA  2ED7               	goto	l6020
  3257  0EBB  0022               	movlb	2	; select bank2
  3258  0EBC  0328               	decf	_M4^(0+256),w
  3259  0EBD  0429               	iorwf	(_M4+1)^(0+256),w
  3260  0EBE  1D03               	btfss	3,2
  3261  0EBF  2ED7               	goto	l6020
  3262                           
  3263                           ;main.c: 737: {
  3264                           ;main.c: 738: if(man==1)
  3265  0EC0  0025               	movlb	5	; select bank5
  3266  0EC1  035A               	decf	main@man^(0+640),w
  3267  0EC2  045B               	iorwf	(main@man+1)^(0+640),w
  3268  0EC3  1D03               	btfss	3,2
  3269  0EC4  2ED2               	goto	l6016
  3270                           
  3271                           ;main.c: 739: {
  3272                           ;main.c: 741: SwitchOffStatustToGatway('4');
  3273  0EC5  3034               	movlw	52
  3274  0EC6  0020               	movlb	0	; select bank0
  3275  0EC7  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3276  0EC8  3000               	movlw	0
  3277  0EC9  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3278  0ECA  3195  25C3  318B   	fcall	_SwitchOffStatustToGatway
  3279                           
  3280                           ;main.c: 742: TransmissionIndicationLedBlinking();
  3281  0ECD  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3282                           
  3283                           ;main.c: 743: PORTGbits.RG3=0;
  3284  0ED0  0025               	movlb	5	; select bank5
  3285  0ED1  118D               	bcf	13,3	;volatile
  3286  0ED2                     l6016:	
  3287                           
  3288                           ;main.c: 744: }
  3289                           ;main.c: 745: man=0;
  3290  0ED2  01DA               	clrf	main@man^(0+640)
  3291  0ED3  01DB               	clrf	(main@man+1)^(0+640)
  3292                           
  3293                           ;main.c: 746: M4=0;
  3294  0ED4  0022               	movlb	2	; select bank2
  3295  0ED5  01A8               	clrf	_M4^(0+256)
  3296  0ED6  01A9               	clrf	(_M4+1)^(0+256)
  3297  0ED7                     l6020:	
  3298                           
  3299                           ;main.c: 748: }
  3300                           ;main.c: 750: if(copy_parentalLockBuffer[5] == '0' && PORTBbits.RB2 == 0 && M5 == 0)
  3301  0ED7  3030               	movlw	48
  3302  0ED8  0023               	movlb	3	; select bank3
  3303  0ED9  063D               	xorwf	(_copy_parentalLockBuffer^(0+384)+5),w
  3304  0EDA  1D03               	btfss	3,2
  3305  0EDB  2EFD               	goto	l6036
  3306  0EDC  0020               	movlb	0	; select bank0
  3307  0EDD  190D               	btfsc	13,2	;volatile
  3308  0EDE  2EFD               	goto	l6036
  3309  0EDF  0022               	movlb	2	; select bank2
  3310  0EE0  0826               	movf	_M5^(0+256),w
  3311  0EE1  0427               	iorwf	(_M5+1)^(0+256),w
  3312  0EE2  1D03               	btfss	3,2
  3313  0EE3  2EFD               	goto	l6036
  3314                           
  3315                           ;main.c: 751: {
  3316                           ;main.c: 752: if(man==1)
  3317  0EE4  0025               	movlb	5	; select bank5
  3318  0EE5  035A               	decf	main@man^(0+640),w
  3319  0EE6  045B               	iorwf	(main@man+1)^(0+640),w
  3320  0EE7  1D03               	btfss	3,2
  3321  0EE8  2EF6               	goto	l6032
  3322                           
  3323                           ;main.c: 753: {
  3324                           ;main.c: 754: SwitchOnStatustToGatway('5');
  3325  0EE9  3035               	movlw	53
  3326  0EEA  0020               	movlb	0	; select bank0
  3327  0EEB  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3328  0EEC  3000               	movlw	0
  3329  0EED  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3330  0EEE  3195  25F6  318B   	fcall	_SwitchOnStatustToGatway
  3331                           
  3332                           ;main.c: 755: TransmissionIndicationLedBlinking();
  3333  0EF1  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3334                           
  3335                           ;main.c: 756: PORTGbits.RG4=1;
  3336  0EF4  0025               	movlb	5	; select bank5
  3337  0EF5  160D               	bsf	13,4	;volatile
  3338  0EF6                     l6032:	
  3339                           
  3340                           ;main.c: 757: }
  3341                           ;main.c: 758: man=0;
  3342  0EF6  01DA               	clrf	main@man^(0+640)
  3343  0EF7  01DB               	clrf	(main@man+1)^(0+640)
  3344                           
  3345                           ;main.c: 759: M5=1;
  3346  0EF8  3001               	movlw	1
  3347  0EF9  0022               	movlb	2	; select bank2
  3348  0EFA  00A6               	movwf	_M5^(0+256)
  3349  0EFB  3000               	movlw	0
  3350  0EFC  00A7               	movwf	(_M5^(0+256)+1)
  3351  0EFD                     l6036:	
  3352                           
  3353                           ;main.c: 761: }
  3354                           ;main.c: 763: if(copy_parentalLockBuffer[5] == '0' && PORTBbits.RB2 == 1 && M5 == 1)
  3355  0EFD  3030               	movlw	48
  3356  0EFE  0023               	movlb	3	; select bank3
  3357  0EFF  063D               	xorwf	(_copy_parentalLockBuffer^(0+384)+5),w
  3358  0F00  1D03               	btfss	3,2
  3359  0F01  2F21               	goto	l6052
  3360  0F02  0020               	movlb	0	; select bank0
  3361  0F03  1D0D               	btfss	13,2	;volatile
  3362  0F04  2F21               	goto	l6052
  3363  0F05  0022               	movlb	2	; select bank2
  3364  0F06  0326               	decf	_M5^(0+256),w
  3365  0F07  0427               	iorwf	(_M5+1)^(0+256),w
  3366  0F08  1D03               	btfss	3,2
  3367  0F09  2F21               	goto	l6052
  3368                           
  3369                           ;main.c: 764: {
  3370                           ;main.c: 765: if(man==1)
  3371  0F0A  0025               	movlb	5	; select bank5
  3372  0F0B  035A               	decf	main@man^(0+640),w
  3373  0F0C  045B               	iorwf	(main@man+1)^(0+640),w
  3374  0F0D  1D03               	btfss	3,2
  3375  0F0E  2F1C               	goto	l6048
  3376                           
  3377                           ;main.c: 766: {
  3378                           ;main.c: 768: SwitchOffStatustToGatway('5');
  3379  0F0F  3035               	movlw	53
  3380  0F10  0020               	movlb	0	; select bank0
  3381  0F11  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3382  0F12  3000               	movlw	0
  3383  0F13  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3384  0F14  3195  25C3  318B   	fcall	_SwitchOffStatustToGatway
  3385                           
  3386                           ;main.c: 769: TransmissionIndicationLedBlinking();
  3387  0F17  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3388                           
  3389                           ;main.c: 770: PORTGbits.RG4=0;
  3390  0F1A  0025               	movlb	5	; select bank5
  3391  0F1B  120D               	bcf	13,4	;volatile
  3392  0F1C                     l6048:	
  3393                           
  3394                           ;main.c: 771: }
  3395                           ;main.c: 772: man=0;
  3396  0F1C  01DA               	clrf	main@man^(0+640)
  3397  0F1D  01DB               	clrf	(main@man+1)^(0+640)
  3398                           
  3399                           ;main.c: 773: M5=0;
  3400  0F1E  0022               	movlb	2	; select bank2
  3401  0F1F  01A6               	clrf	_M5^(0+256)
  3402  0F20  01A7               	clrf	(_M5+1)^(0+256)
  3403  0F21                     l6052:	
  3404                           
  3405                           ;main.c: 775: }
  3406                           ;main.c: 778: if(copy_parentalLockBuffer[6] == '0' && PORTBbits.RB3 == 0 && M6 == 0)
  3407  0F21  3030               	movlw	48
  3408  0F22  0023               	movlb	3	; select bank3
  3409  0F23  063E               	xorwf	(_copy_parentalLockBuffer^(0+384)+6),w
  3410  0F24  1D03               	btfss	3,2
  3411  0F25  2F47               	goto	l6068
  3412  0F26  0020               	movlb	0	; select bank0
  3413  0F27  198D               	btfsc	13,3	;volatile
  3414  0F28  2F47               	goto	l6068
  3415  0F29  0022               	movlb	2	; select bank2
  3416  0F2A  0824               	movf	_M6^(0+256),w
  3417  0F2B  0425               	iorwf	(_M6+1)^(0+256),w
  3418  0F2C  1D03               	btfss	3,2
  3419  0F2D  2F47               	goto	l6068
  3420                           
  3421                           ;main.c: 779: {
  3422                           ;main.c: 780: if(man==1)
  3423  0F2E  0025               	movlb	5	; select bank5
  3424  0F2F  035A               	decf	main@man^(0+640),w
  3425  0F30  045B               	iorwf	(main@man+1)^(0+640),w
  3426  0F31  1D03               	btfss	3,2
  3427  0F32  2F40               	goto	l6064
  3428                           
  3429                           ;main.c: 781: {
  3430                           ;main.c: 782: SwitchOnStatustToGatway('6');
  3431  0F33  3036               	movlw	54
  3432  0F34  0020               	movlb	0	; select bank0
  3433  0F35  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3434  0F36  3000               	movlw	0
  3435  0F37  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3436  0F38  3195  25F6  318B   	fcall	_SwitchOnStatustToGatway
  3437                           
  3438                           ;main.c: 783: TransmissionIndicationLedBlinking();
  3439  0F3B  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3440                           
  3441                           ;main.c: 784: PORTFbits.RF6=1;
  3442  0F3E  0025               	movlb	5	; select bank5
  3443  0F3F  170C               	bsf	12,6	;volatile
  3444  0F40                     l6064:	
  3445                           
  3446                           ;main.c: 785: }
  3447                           ;main.c: 786: man=0;
  3448  0F40  01DA               	clrf	main@man^(0+640)
  3449  0F41  01DB               	clrf	(main@man+1)^(0+640)
  3450                           
  3451                           ;main.c: 787: M6=1;
  3452  0F42  3001               	movlw	1
  3453  0F43  0022               	movlb	2	; select bank2
  3454  0F44  00A4               	movwf	_M6^(0+256)
  3455  0F45  3000               	movlw	0
  3456  0F46  00A5               	movwf	(_M6^(0+256)+1)
  3457  0F47                     l6068:	
  3458                           
  3459                           ;main.c: 789: }
  3460                           ;main.c: 791: if(copy_parentalLockBuffer[6] == '0' && PORTBbits.RB3 == 1 && M6 == 1)
  3461  0F47  3030               	movlw	48
  3462  0F48  0023               	movlb	3	; select bank3
  3463  0F49  063E               	xorwf	(_copy_parentalLockBuffer^(0+384)+6),w
  3464  0F4A  1D03               	btfss	3,2
  3465  0F4B  2F6B               	goto	l6084
  3466  0F4C  0020               	movlb	0	; select bank0
  3467  0F4D  1D8D               	btfss	13,3	;volatile
  3468  0F4E  2F6B               	goto	l6084
  3469  0F4F  0022               	movlb	2	; select bank2
  3470  0F50  0324               	decf	_M6^(0+256),w
  3471  0F51  0425               	iorwf	(_M6+1)^(0+256),w
  3472  0F52  1D03               	btfss	3,2
  3473  0F53  2F6B               	goto	l6084
  3474                           
  3475                           ;main.c: 792: {
  3476                           ;main.c: 793: if(man==1)
  3477  0F54  0025               	movlb	5	; select bank5
  3478  0F55  035A               	decf	main@man^(0+640),w
  3479  0F56  045B               	iorwf	(main@man+1)^(0+640),w
  3480  0F57  1D03               	btfss	3,2
  3481  0F58  2F66               	goto	l6080
  3482                           
  3483                           ;main.c: 794: {
  3484                           ;main.c: 796: SwitchOffStatustToGatway('6');
  3485  0F59  3036               	movlw	54
  3486  0F5A  0020               	movlb	0	; select bank0
  3487  0F5B  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3488  0F5C  3000               	movlw	0
  3489  0F5D  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3490  0F5E  3195  25C3  318B   	fcall	_SwitchOffStatustToGatway
  3491                           
  3492                           ;main.c: 797: TransmissionIndicationLedBlinking();
  3493  0F61  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3494                           
  3495                           ;main.c: 798: PORTFbits.RF6=0;
  3496  0F64  0025               	movlb	5	; select bank5
  3497  0F65  130C               	bcf	12,6	;volatile
  3498  0F66                     l6080:	
  3499                           
  3500                           ;main.c: 799: }
  3501                           ;main.c: 800: man=0;
  3502  0F66  01DA               	clrf	main@man^(0+640)
  3503  0F67  01DB               	clrf	(main@man+1)^(0+640)
  3504                           
  3505                           ;main.c: 801: M6=0;
  3506  0F68  0022               	movlb	2	; select bank2
  3507  0F69  01A4               	clrf	_M6^(0+256)
  3508  0F6A  01A5               	clrf	(_M6+1)^(0+256)
  3509  0F6B                     l6084:	
  3510                           
  3511                           ;main.c: 803: }
  3512                           ;main.c: 807: if(copy_parentalLockBuffer[7] == '0' && PORTBbits.RB4 == 0 && M7 == 0)
  3513  0F6B  3030               	movlw	48
  3514  0F6C  0023               	movlb	3	; select bank3
  3515  0F6D  063F               	xorwf	(_copy_parentalLockBuffer^(0+384)+7),w
  3516  0F6E  1D03               	btfss	3,2
  3517  0F6F  2F91               	goto	l6100
  3518  0F70  0020               	movlb	0	; select bank0
  3519  0F71  1A0D               	btfsc	13,4	;volatile
  3520  0F72  2F91               	goto	l6100
  3521  0F73  0022               	movlb	2	; select bank2
  3522  0F74  0822               	movf	_M7^(0+256),w
  3523  0F75  0423               	iorwf	(_M7+1)^(0+256),w
  3524  0F76  1D03               	btfss	3,2
  3525  0F77  2F91               	goto	l6100
  3526                           
  3527                           ;main.c: 808: {
  3528                           ;main.c: 809: if(man==1)
  3529  0F78  0025               	movlb	5	; select bank5
  3530  0F79  035A               	decf	main@man^(0+640),w
  3531  0F7A  045B               	iorwf	(main@man+1)^(0+640),w
  3532  0F7B  1D03               	btfss	3,2
  3533  0F7C  2F8A               	goto	l6096
  3534                           
  3535                           ;main.c: 810: {
  3536                           ;main.c: 811: SwitchOnStatustToGatway('7');
  3537  0F7D  3037               	movlw	55
  3538  0F7E  0020               	movlb	0	; select bank0
  3539  0F7F  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3540  0F80  3000               	movlw	0
  3541  0F81  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3542  0F82  3195  25F6  318B   	fcall	_SwitchOnStatustToGatway
  3543                           
  3544                           ;main.c: 812: TransmissionIndicationLedBlinking();
  3545  0F85  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3546                           
  3547                           ;main.c: 813: PORTFbits.RF5=1;
  3548  0F88  0025               	movlb	5	; select bank5
  3549  0F89  168C               	bsf	12,5	;volatile
  3550  0F8A                     l6096:	
  3551                           
  3552                           ;main.c: 814: }
  3553                           ;main.c: 815: man=0;
  3554  0F8A  01DA               	clrf	main@man^(0+640)
  3555  0F8B  01DB               	clrf	(main@man+1)^(0+640)
  3556                           
  3557                           ;main.c: 816: M7=1;
  3558  0F8C  3001               	movlw	1
  3559  0F8D  0022               	movlb	2	; select bank2
  3560  0F8E  00A2               	movwf	_M7^(0+256)
  3561  0F8F  3000               	movlw	0
  3562  0F90  00A3               	movwf	(_M7^(0+256)+1)
  3563  0F91                     l6100:	
  3564                           
  3565                           ;main.c: 818: }
  3566                           ;main.c: 820: if(copy_parentalLockBuffer[7] == '0' && PORTBbits.RB4 == 1 && M7 == 1)
  3567  0F91  3030               	movlw	48
  3568  0F92  0023               	movlb	3	; select bank3
  3569  0F93  063F               	xorwf	(_copy_parentalLockBuffer^(0+384)+7),w
  3570  0F94  1D03               	btfss	3,2
  3571  0F95  2FB5               	goto	l6116
  3572  0F96  0020               	movlb	0	; select bank0
  3573  0F97  1E0D               	btfss	13,4	;volatile
  3574  0F98  2FB5               	goto	l6116
  3575  0F99  0022               	movlb	2	; select bank2
  3576  0F9A  0322               	decf	_M7^(0+256),w
  3577  0F9B  0423               	iorwf	(_M7+1)^(0+256),w
  3578  0F9C  1D03               	btfss	3,2
  3579  0F9D  2FB5               	goto	l6116
  3580                           
  3581                           ;main.c: 821: {
  3582                           ;main.c: 822: if(man==1)
  3583  0F9E  0025               	movlb	5	; select bank5
  3584  0F9F  035A               	decf	main@man^(0+640),w
  3585  0FA0  045B               	iorwf	(main@man+1)^(0+640),w
  3586  0FA1  1D03               	btfss	3,2
  3587  0FA2  2FB0               	goto	l6112
  3588                           
  3589                           ;main.c: 823: {
  3590                           ;main.c: 825: SwitchOffStatustToGatway('7');
  3591  0FA3  3037               	movlw	55
  3592  0FA4  0020               	movlb	0	; select bank0
  3593  0FA5  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3594  0FA6  3000               	movlw	0
  3595  0FA7  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3596  0FA8  3195  25C3  318B   	fcall	_SwitchOffStatustToGatway
  3597                           
  3598                           ;main.c: 826: TransmissionIndicationLedBlinking();
  3599  0FAB  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3600                           
  3601                           ;main.c: 827: PORTFbits.RF5=0;
  3602  0FAE  0025               	movlb	5	; select bank5
  3603  0FAF  128C               	bcf	12,5	;volatile
  3604  0FB0                     l6112:	
  3605                           
  3606                           ;main.c: 828: }
  3607                           ;main.c: 829: man=0;
  3608  0FB0  01DA               	clrf	main@man^(0+640)
  3609  0FB1  01DB               	clrf	(main@man+1)^(0+640)
  3610                           
  3611                           ;main.c: 830: M7=0;
  3612  0FB2  0022               	movlb	2	; select bank2
  3613  0FB3  01A2               	clrf	_M7^(0+256)
  3614  0FB4  01A3               	clrf	(_M7+1)^(0+256)
  3615  0FB5                     l6116:	
  3616                           
  3617                           ;main.c: 832: }
  3618                           ;main.c: 837: if(copy_parentalLockBuffer[8] == '0' && PORTBbits.RB5 == 0 && M8 == 0)
  3619  0FB5  3030               	movlw	48
  3620  0FB6  0023               	movlb	3	; select bank3
  3621  0FB7  0640               	xorwf	(_copy_parentalLockBuffer^(0+384)+8),w
  3622  0FB8  1D03               	btfss	3,2
  3623  0FB9  2FDB               	goto	l6132
  3624  0FBA  0020               	movlb	0	; select bank0
  3625  0FBB  1A8D               	btfsc	13,5	;volatile
  3626  0FBC  2FDB               	goto	l6132
  3627  0FBD  0022               	movlb	2	; select bank2
  3628  0FBE  0820               	movf	_M8^(0+256),w
  3629  0FBF  0421               	iorwf	(_M8+1)^(0+256),w
  3630  0FC0  1D03               	btfss	3,2
  3631  0FC1  2FDB               	goto	l6132
  3632                           
  3633                           ;main.c: 838: {
  3634                           ;main.c: 839: if(man==1)
  3635  0FC2  0025               	movlb	5	; select bank5
  3636  0FC3  035A               	decf	main@man^(0+640),w
  3637  0FC4  045B               	iorwf	(main@man+1)^(0+640),w
  3638  0FC5  1D03               	btfss	3,2
  3639  0FC6  2FD4               	goto	l6128
  3640                           
  3641                           ;main.c: 840: {
  3642                           ;main.c: 841: SwitchOnStatustToGatway('8');
  3643  0FC7  3038               	movlw	56
  3644  0FC8  0020               	movlb	0	; select bank0
  3645  0FC9  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3646  0FCA  3000               	movlw	0
  3647  0FCB  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3648  0FCC  3195  25F6  318B   	fcall	_SwitchOnStatustToGatway
  3649                           
  3650                           ;main.c: 842: TransmissionIndicationLedBlinking();
  3651  0FCF  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3652                           
  3653                           ;main.c: 843: PORTFbits.RF4=1;
  3654  0FD2  0025               	movlb	5	; select bank5
  3655  0FD3  160C               	bsf	12,4	;volatile
  3656  0FD4                     l6128:	
  3657                           
  3658                           ;main.c: 844: }
  3659                           ;main.c: 845: man=0;
  3660  0FD4  01DA               	clrf	main@man^(0+640)
  3661  0FD5  01DB               	clrf	(main@man+1)^(0+640)
  3662                           
  3663                           ;main.c: 846: M8=1;
  3664  0FD6  3001               	movlw	1
  3665  0FD7  0022               	movlb	2	; select bank2
  3666  0FD8  00A0               	movwf	_M8^(0+256)
  3667  0FD9  3000               	movlw	0
  3668  0FDA  00A1               	movwf	(_M8^(0+256)+1)
  3669  0FDB                     l6132:	
  3670                           
  3671                           ;main.c: 848: }
  3672                           ;main.c: 850: if(copy_parentalLockBuffer[8] == '0' && PORTBbits.RB5 == 1 && M8 == 1)
  3673  0FDB  3030               	movlw	48
  3674  0FDC  0023               	movlb	3	; select bank3
  3675  0FDD  0640               	xorwf	(_copy_parentalLockBuffer^(0+384)+8),w
  3676  0FDE  1D03               	btfss	3,2
  3677  0FDF  2B81               	goto	l5756
  3678  0FE0  0020               	movlb	0	; select bank0
  3679  0FE1  1E8D               	btfss	13,5	;volatile
  3680  0FE2  2B81               	goto	l5756
  3681  0FE3  0022               	movlb	2	; select bank2
  3682  0FE4  0320               	decf	_M8^(0+256),w
  3683  0FE5  0421               	iorwf	(_M8+1)^(0+256),w
  3684  0FE6  1D03               	btfss	3,2
  3685  0FE7  2B81               	goto	l5756
  3686                           
  3687                           ;main.c: 851: {
  3688                           ;main.c: 852: if(man==1)
  3689  0FE8  0025               	movlb	5	; select bank5
  3690  0FE9  035A               	decf	main@man^(0+640),w
  3691  0FEA  045B               	iorwf	(main@man+1)^(0+640),w
  3692  0FEB  1D03               	btfss	3,2
  3693  0FEC  2FFA               	goto	l6144
  3694                           
  3695                           ;main.c: 853: {
  3696                           ;main.c: 855: SwitchOffStatustToGatway('8');
  3697  0FED  3038               	movlw	56
  3698  0FEE  0020               	movlb	0	; select bank0
  3699  0FEF  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3700  0FF0  3000               	movlw	0
  3701  0FF1  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3702  0FF2  3195  25C3  318B   	fcall	_SwitchOffStatustToGatway
  3703                           
  3704                           ;main.c: 856: TransmissionIndicationLedBlinking();
  3705  0FF5  3192  223E  318B   	fcall	_TransmissionIndicationLedBlinking
  3706                           
  3707                           ;main.c: 857: PORTFbits.RF4=0;
  3708  0FF8  0025               	movlb	5	; select bank5
  3709  0FF9  120C               	bcf	12,4	;volatile
  3710  0FFA                     l6144:	
  3711                           
  3712                           ;main.c: 858: }
  3713                           ;main.c: 859: man=0;
  3714  0FFA  01DA               	clrf	main@man^(0+640)
  3715  0FFB  01DB               	clrf	(main@man+1)^(0+640)
  3716                           
  3717                           ;main.c: 860: M8=0;
  3718  0FFC  0022               	movlb	2	; select bank2
  3719  0FFD  01A0               	clrf	_M8^(0+256)
  3720  0FFE  01A1               	clrf	(_M8+1)^(0+256)
  3721  0FFF  2B81               	goto	l5756
  3722  1000                     __end_of_main:	
  3723                           
  3724                           	psect	swtext1
  3725  1000                     __pswtext1:	
  3726  1000                     S6278:	
  3727  1000  318C  2C13         	ljmp	l5798
  3728  1002  318C  2C51         	ljmp	l5814
  3729  1004  318C  2C58         	ljmp	l5816
  3730  1006  318C  2C96         	ljmp	l5832
  3731  1008  318C  2CAD         	ljmp	l5836
  3732  100A  318C  2CC4         	ljmp	l5840
  3733  100C  318C  2CDB         	ljmp	l5844
  3734  100E  318D  2D1B         	ljmp	l5860
  3735                           
  3736                           	psect	text1
  3737  0804                     __ptext1:	
  3738 ;; *************** function _strtok *****************
  3739 ;; Defined at:
  3740 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtok.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  s1              1    wreg     PTR unsigned char 
  3743 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3744 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
  3745 ;;		 -> STR_18(2), STR_16(2), 
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;  s1              1   19[BANK0 ] PTR unsigned char 
  3748 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  1    wreg      PTR unsigned char 
  3751 ;; Registers used:
  3752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0
  3760 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  3761 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  3762 ;;Total ram usage:        6 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; Hardware stack levels required when called:    4
  3765 ;; This function calls:
  3766 ;;		_strcspn
  3767 ;;		_strspn
  3768 ;; This function is called by:
  3769 ;;		_main
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           
  3774                           ;psect for function _strtok
  3775  0804                     _strtok:	
  3776                           
  3777                           ;incstack = 0
  3778                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3779                           ;strtok@s1 stored from wreg
  3780  0804  0020               	movlb	0	; select bank0
  3781  0805  00B3               	movwf	strtok@s1
  3782  0806  0833               	movf	strtok@s1,w
  3783  0807  1D03               	btfss	3,2
  3784  0808  280D               	goto	l5664
  3785  0809  085C               	movf	strtok@sp,w
  3786  080A  00B0               	movwf	??_strtok
  3787  080B  0830               	movf	??_strtok,w
  3788  080C  00B3               	movwf	strtok@s1
  3789  080D                     l5664:	
  3790  080D  0833               	movf	strtok@s1,w
  3791  080E  1D03               	btfss	3,2
  3792  080F  2812               	goto	l5670
  3793  0810  3000               	movlw	0
  3794  0811  0008               	return
  3795  0812                     l5670:	
  3796  0812  082F               	movf	strtok@s2+1,w
  3797  0813  00A8               	movwf	strspn@s2+1
  3798  0814  082E               	movf	strtok@s2,w
  3799  0815  00A7               	movwf	strspn@s2
  3800  0816  0833               	movf	strtok@s1,w
  3801  0817  3195  252F  3188   	fcall	_strspn
  3802  081A  0020               	movlb	0	; select bank0
  3803  081B  0827               	movf	?_strspn,w
  3804  081C  00B0               	movwf	??_strtok
  3805  081D  0830               	movf	??_strtok,w
  3806  081E  07B3               	addwf	strtok@s1,f
  3807  081F  0833               	movf	strtok@s1,w
  3808  0820  0086               	movwf	6
  3809  0821  3002               	movlw	2	; select bank4/5
  3810  0822  0087               	movwf	7
  3811  0823  0801               	movf	1,w
  3812  0824  1D03               	btfss	3,2
  3813  0825  2829               	goto	l5678
  3814  0826  01DC               	clrf	strtok@sp
  3815  0827  3000               	movlw	0
  3816  0828  0008               	return
  3817  0829                     l5678:	
  3818  0829  082F               	movf	strtok@s2+1,w
  3819  082A  00A8               	movwf	strcspn@s2+1
  3820  082B  082E               	movf	strtok@s2,w
  3821  082C  00A7               	movwf	strcspn@s2
  3822  082D  0833               	movf	strtok@s1,w
  3823  082E  3194  24FF  3188   	fcall	_strcspn
  3824  0831  0020               	movlb	0	; select bank0
  3825  0832  0827               	movf	?_strcspn,w
  3826  0833  00B0               	movwf	??_strtok
  3827  0834  0828               	movf	?_strcspn+1,w
  3828  0835  00B1               	movwf	??_strtok+1
  3829  0836  0833               	movf	strtok@s1,w
  3830  0837  0730               	addwf	??_strtok,w
  3831  0838  00B2               	movwf	??_strtok+2
  3832  0839  0832               	movf	??_strtok+2,w
  3833  083A  00DC               	movwf	strtok@sp
  3834  083B  085C               	movf	strtok@sp,w
  3835  083C  0086               	movwf	6
  3836  083D  3002               	movlw	2	; select bank4/5
  3837  083E  0087               	movwf	7
  3838  083F  0801               	movf	1,w
  3839  0840  1903               	btfsc	3,2
  3840  0841  284C               	goto	l5686
  3841  0842  085C               	movf	strtok@sp,w
  3842  0843  0086               	movwf	6
  3843  0844  3002               	movlw	2	; select bank4/5
  3844  0845  0087               	movwf	7
  3845  0846  0181               	clrf	1
  3846  0847  3001               	movlw	1
  3847  0848  00B0               	movwf	??_strtok
  3848  0849  0830               	movf	??_strtok,w
  3849  084A  07DC               	addwf	strtok@sp,f
  3850  084B  284D               	goto	l5688
  3851  084C                     l5686:	
  3852  084C  01DC               	clrf	strtok@sp
  3853  084D                     l5688:	
  3854  084D  0833               	movf	strtok@s1,w
  3855  084E  0008               	return
  3856  084F                     __end_of_strtok:	
  3857                           
  3858                           	psect	text2
  3859  152F                     __ptext2:	
  3860 ;; *************** function _strspn *****************
  3861 ;; Defined at:
  3862 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strspn.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  s1              1    wreg     PTR const unsigned char 
  3865 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3866 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  3867 ;;		 -> STR_18(2), STR_16(2), 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  3870 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3871 ;;  i               2   11[BANK0 ] unsigned int 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  2    7[BANK0 ] unsigned int 
  3874 ;; Registers used:
  3875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3881 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3882 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3884 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  3885 ;;Total ram usage:        7 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    3
  3888 ;; This function calls:
  3889 ;;		_strchr
  3890 ;; This function is called by:
  3891 ;;		_strtok
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           
  3896                           ;psect for function _strspn
  3897  152F                     _strspn:	
  3898                           
  3899                           ;incstack = 0
  3900                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3901                           ;strspn@s1 stored from wreg
  3902  152F  0020               	movlb	0	; select bank0
  3903  1530  00AD               	movwf	strspn@s1
  3904  1531  01AB               	clrf	strspn@i
  3905  1532  01AC               	clrf	strspn@i+1
  3906  1533  2D3C               	goto	l5264
  3907  1534                     l5262:	
  3908  1534  3001               	movlw	1
  3909  1535  00A9               	movwf	??_strspn
  3910  1536  0829               	movf	??_strspn,w
  3911  1537  07AD               	addwf	strspn@s1,f
  3912  1538  3001               	movlw	1
  3913  1539  07AB               	addwf	strspn@i,f
  3914  153A  3000               	movlw	0
  3915  153B  3DAC               	addwfc	strspn@i+1,f
  3916  153C                     l5264:	
  3917  153C  082D               	movf	strspn@s1,w
  3918  153D  0086               	movwf	6
  3919  153E  3002               	movlw	2	; select bank4/5
  3920  153F  0087               	movwf	7
  3921  1540  0801               	movf	1,w
  3922  1541  1903               	btfsc	3,2
  3923  1542  2D5A               	goto	l5268
  3924  1543  0828               	movf	strspn@s2+1,w
  3925  1544  00A1               	movwf	strchr@ptr+1
  3926  1545  0827               	movf	strspn@s2,w
  3927  1546  00A0               	movwf	strchr@ptr
  3928  1547  082D               	movf	strspn@s1,w
  3929  1548  0086               	movwf	6
  3930  1549  3002               	movlw	2	; select bank4/5
  3931  154A  0087               	movwf	7
  3932  154B  0801               	movf	1,w
  3933  154C  00A9               	movwf	??_strspn
  3934  154D  01AA               	clrf	??_strspn+1
  3935  154E  0829               	movf	??_strspn,w
  3936  154F  00A2               	movwf	strchr@chr
  3937  1550  082A               	movf	??_strspn+1,w
  3938  1551  00A3               	movwf	strchr@chr+1
  3939  1552  3192  22BA  3195   	fcall	_strchr
  3940  1555  0020               	movlb	0	; select bank0
  3941  1556  0820               	movf	?_strchr,w
  3942  1557  0421               	iorwf	?_strchr+1,w
  3943  1558  1D03               	btfss	3,2
  3944  1559  2D34               	goto	l5262
  3945  155A                     l5268:	
  3946  155A  082C               	movf	strspn@i+1,w
  3947  155B  00A8               	movwf	?_strspn+1
  3948  155C  082B               	movf	strspn@i,w
  3949  155D  00A7               	movwf	?_strspn
  3950  155E  0008               	return
  3951  155F                     __end_of_strspn:	
  3952                           
  3953                           	psect	text3
  3954  14FF                     __ptext3:	
  3955 ;; *************** function _strcspn *****************
  3956 ;; Defined at:
  3957 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  s1              1    wreg     PTR const unsigned char 
  3960 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3961 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  3962 ;;		 -> STR_18(2), STR_16(2), 
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  3965 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3966 ;;  i               2   11[BANK0 ] unsigned int 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  2    7[BANK0 ] unsigned int 
  3969 ;; Registers used:
  3970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3976 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3977 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3979 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  3980 ;;Total ram usage:        7 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    3
  3983 ;; This function calls:
  3984 ;;		_strchr
  3985 ;; This function is called by:
  3986 ;;		_strtok
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           
  3991                           ;psect for function _strcspn
  3992  14FF                     _strcspn:	
  3993                           
  3994                           ;incstack = 0
  3995                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3996                           ;strcspn@s1 stored from wreg
  3997  14FF  0020               	movlb	0	; select bank0
  3998  1500  00AD               	movwf	strcspn@s1
  3999  1501  01AB               	clrf	strcspn@i
  4000  1502  01AC               	clrf	strcspn@i+1
  4001  1503  2D0C               	goto	l5276
  4002  1504                     l5274:	
  4003  1504  3001               	movlw	1
  4004  1505  00A9               	movwf	??_strcspn
  4005  1506  0829               	movf	??_strcspn,w
  4006  1507  07AD               	addwf	strcspn@s1,f
  4007  1508  3001               	movlw	1
  4008  1509  07AB               	addwf	strcspn@i,f
  4009  150A  3000               	movlw	0
  4010  150B  3DAC               	addwfc	strcspn@i+1,f
  4011  150C                     l5276:	
  4012  150C  082D               	movf	strcspn@s1,w
  4013  150D  0086               	movwf	6
  4014  150E  3002               	movlw	2	; select bank4/5
  4015  150F  0087               	movwf	7
  4016  1510  0801               	movf	1,w
  4017  1511  1903               	btfsc	3,2
  4018  1512  2D2A               	goto	l5280
  4019  1513  0828               	movf	strcspn@s2+1,w
  4020  1514  00A1               	movwf	strchr@ptr+1
  4021  1515  0827               	movf	strcspn@s2,w
  4022  1516  00A0               	movwf	strchr@ptr
  4023  1517  082D               	movf	strcspn@s1,w
  4024  1518  0086               	movwf	6
  4025  1519  3002               	movlw	2	; select bank4/5
  4026  151A  0087               	movwf	7
  4027  151B  0801               	movf	1,w
  4028  151C  00A9               	movwf	??_strcspn
  4029  151D  01AA               	clrf	??_strcspn+1
  4030  151E  0829               	movf	??_strcspn,w
  4031  151F  00A2               	movwf	strchr@chr
  4032  1520  082A               	movf	??_strcspn+1,w
  4033  1521  00A3               	movwf	strchr@chr+1
  4034  1522  3192  22BA  3194   	fcall	_strchr
  4035  1525  0020               	movlb	0	; select bank0
  4036  1526  0820               	movf	?_strchr,w
  4037  1527  0421               	iorwf	?_strchr+1,w
  4038  1528  1903               	btfsc	3,2
  4039  1529  2D04               	goto	l5274
  4040  152A                     l5280:	
  4041  152A  082C               	movf	strcspn@i+1,w
  4042  152B  00A8               	movwf	?_strcspn+1
  4043  152C  082B               	movf	strcspn@i,w
  4044  152D  00A7               	movwf	?_strcspn
  4045  152E  0008               	return
  4046  152F                     __end_of_strcspn:	
  4047                           
  4048                           	psect	text4
  4049  12BA                     __ptext4:	
  4050 ;; *************** function _strchr *****************
  4051 ;; Defined at:
  4052 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  4055 ;;		 -> STR_18(2), STR_16(2), 
  4056 ;;  chr             2    2[BANK0 ] int 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;		None
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  2    0[BANK0 ] PTR unsigned char 
  4061 ;; Registers used:
  4062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4068 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  4069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  4070 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  4071 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  4072 ;;Total ram usage:        7 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    2
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		_strcspn
  4079 ;;		_strspn
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           
  4084                           ;psect for function _strchr
  4085  12BA                     _strchr:	
  4086  12BA                     l1151:	
  4087                           ;incstack = 0
  4088                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  4089                           
  4090  12BA  0020               	movlb	0	; select bank0
  4091  12BB  0820               	movf	strchr@ptr,w
  4092  12BC  0084               	movwf	4
  4093  12BD  0821               	movf	strchr@ptr+1,w
  4094  12BE  0085               	movwf	5
  4095  12BF  0800               	movf	0,w	;code access
  4096  12C0  0622               	xorwf	strchr@chr,w
  4097  12C1  1903               	btfsc	3,2
  4098  12C2  0008               	return
  4099  12C3  0821               	movf	strchr@ptr+1,w
  4100  12C4  00A5               	movwf	??_strchr+1
  4101  12C5  0820               	movf	strchr@ptr,w
  4102  12C6  00A4               	movwf	??_strchr
  4103  12C7  0AA0               	incf	strchr@ptr,f
  4104  12C8  1903               	skipnz
  4105  12C9  0AA1               	incf	strchr@ptr+1,f
  4106  12CA  0824               	movf	??_strchr,w
  4107  12CB  0084               	movwf	4
  4108  12CC  0825               	movf	??_strchr+1,w
  4109  12CD  0085               	movwf	5
  4110  12CE  0012               	moviw fsr0++
  4111  12CF  1D03               	btfss	3,2
  4112  12D0  2ABA               	goto	l1151
  4113  12D1  01A0               	clrf	?_strchr
  4114  12D2  01A1               	clrf	?_strchr+1
  4115  12D3  0008               	return
  4116  12D4                     __end_of_strchr:	
  4117                           
  4118                           	psect	text5
  4119  144C                     __ptext5:	
  4120 ;; *************** function _strcmp *****************
  4121 ;; Defined at:
  4122 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  s1              1    wreg     PTR const unsigned char 
  4125 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4126 ;;  s2              2    0[BANK0 ] PTR const unsigned char 
  4127 ;;		 -> STR_17(4), 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;  s1              1    4[BANK0 ] PTR const unsigned char 
  4130 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4131 ;;  r               1    3[BANK0 ] char 
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  2    0[BANK0 ] int 
  4134 ;; Registers used:
  4135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4141 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4142 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  4144 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  4145 ;;Total ram usage:        5 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    2
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_main
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _strcmp
  4157  144C                     _strcmp:	
  4158                           
  4159                           ;incstack = 0
  4160                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  4161                           ;strcmp@s1 stored from wreg
  4162  144C  0020               	movlb	0	; select bank0
  4163  144D  00A4               	movwf	strcmp@s1
  4164  144E  2C57               	goto	l5696
  4165  144F                     l5694:	
  4166  144F  3001               	movlw	1
  4167  1450  00A2               	movwf	??_strcmp
  4168  1451  0822               	movf	??_strcmp,w
  4169  1452  07A4               	addwf	strcmp@s1,f
  4170  1453  3001               	movlw	1
  4171  1454  07A0               	addwf	strcmp@s2,f
  4172  1455  3000               	movlw	0
  4173  1456  3DA1               	addwfc	strcmp@s2+1,f
  4174  1457                     l5696:	
  4175  1457  0824               	movf	strcmp@s1,w
  4176  1458  0086               	movwf	6
  4177  1459  3002               	movlw	2	; select bank4/5
  4178  145A  0087               	movwf	7
  4179  145B  0820               	movf	strcmp@s2,w
  4180  145C  0084               	movwf	4
  4181  145D  0821               	movf	strcmp@s2+1,w
  4182  145E  0085               	movwf	5
  4183  145F  0800               	movf	0,w	;code access
  4184  1460  3AFF               	xorlw	255
  4185  1461  3E01               	addlw	1
  4186  1462  0701               	addwf	1,w
  4187  1463  00A2               	movwf	??_strcmp
  4188  1464  0822               	movf	??_strcmp,w
  4189  1465  00A3               	movwf	strcmp@r
  4190  1466  0823               	movf	strcmp@r,w
  4191  1467  1D03               	btfss	3,2
  4192  1468  2C70               	goto	l5700
  4193  1469  0824               	movf	strcmp@s1,w
  4194  146A  0086               	movwf	6
  4195  146B  3002               	movlw	2	; select bank4/5
  4196  146C  0087               	movwf	7
  4197  146D  0801               	movf	1,w
  4198  146E  1D03               	btfss	3,2
  4199  146F  2C4F               	goto	l5694
  4200  1470                     l5700:	
  4201  1470  0823               	movf	strcmp@r,w
  4202  1471  00A0               	movwf	?_strcmp
  4203  1472  01A1               	clrf	?_strcmp+1
  4204  1473  1BA0               	btfsc	?_strcmp,7
  4205  1474  03A1               	decf	?_strcmp+1,f
  4206  1475  0008               	return
  4207  1476                     __end_of_strcmp:	
  4208                           
  4209                           	psect	text6
  4210  1327                     __ptext6:	
  4211 ;; *************** function _errorsMain *****************
  4212 ;; Defined at:
  4213 ;;		line 1240 in file "main.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  errNum          2    0[BANK0 ] PTR const unsigned char 
  4216 ;;		 -> STR_19(5), 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  Tx_count        2    2[BANK0 ] int 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      void 
  4221 ;; Registers used:
  4222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4228 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  4231 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  4232 ;;Total ram usage:        4 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    2
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_main
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function _errorsMain
  4244  1327                     _errorsMain:	
  4245                           
  4246                           ;main.c: 1241: int Tx_count=0;
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in _errorsMain: [wreg-fsr0h+status,2+status,0+pclath]
  4250  1327  0020               	movlb	0	; select bank0
  4251  1328  01A2               	clrf	errorsMain@Tx_count
  4252  1329  01A3               	clrf	errorsMain@Tx_count+1
  4253  132A                     l5712:	
  4254                           ;main.c: 1242: while(Tx_count!=4)
  4255                           
  4256  132A  3004               	movlw	4
  4257  132B  0622               	xorwf	errorsMain@Tx_count,w
  4258  132C  0423               	iorwf	errorsMain@Tx_count+1,w
  4259  132D  1903               	btfsc	3,2
  4260  132E  0008               	return
  4261  132F                     l605:	
  4262                           ;main.c: 1243: {
  4263                           ;main.c: 1244: while (!TX1STAbits.TRMT);
  4264                           
  4265  132F  0023               	movlb	3	; select bank3
  4266  1330  1C9E               	btfss	30,1	;volatile
  4267  1331  2B2F               	goto	l605
  4268                           
  4269                           ;main.c: 1245: TX1REG = *errNum;
  4270  1332  0020               	movlb	0	; select bank0
  4271  1333  0820               	movf	errorsMain@errNum,w
  4272  1334  0084               	movwf	4
  4273  1335  0821               	movf	errorsMain@errNum+1,w
  4274  1336  0085               	movwf	5
  4275  1337  0800               	movf	0,w	;code access
  4276  1338  0023               	movlb	3	; select bank3
  4277  1339  009A               	movwf	26	;volatile
  4278                           
  4279                           ;main.c: 1246: *errNum++;
  4280  133A  3001               	movlw	1
  4281  133B  0020               	movlb	0	; select bank0
  4282  133C  07A0               	addwf	errorsMain@errNum,f
  4283  133D  3000               	movlw	0
  4284  133E  3DA1               	addwfc	errorsMain@errNum+1,f
  4285                           
  4286                           ;main.c: 1247: Tx_count++;
  4287  133F  3001               	movlw	1
  4288  1340  07A2               	addwf	errorsMain@Tx_count,f
  4289  1341  3000               	movlw	0
  4290  1342  3DA3               	addwfc	errorsMain@Tx_count+1,f
  4291  1343  2B2A               	goto	l5712
  4292  1344                     __end_of_errorsMain:	
  4293                           
  4294                           	psect	text7
  4295  155F                     __ptext7:	
  4296 ;; *************** function _copyReceivedDataBuffer *****************
  4297 ;; Defined at:
  4298 ;;		line 1324 in file "main.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  dataBufferCo    2    1[BANK0 ] int 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  1    wreg      void 
  4305 ;; Registers used:
  4306 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  4313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  4315 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
  4316 ;;Total ram usage:        3 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    2
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_main
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function _copyReceivedDataBuffer
  4328  155F                     _copyReceivedDataBuffer:	
  4329                           
  4330                           ;main.c: 1325: int dataBufferCounter=2;
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in _copyReceivedDataBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  4334  155F  3002               	movlw	2
  4335  1560  0020               	movlb	0	; select bank0
  4336  1561  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  4337  1562  3000               	movlw	0
  4338  1563  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  4339                           
  4340                           ;main.c: 1326: for(dataBufferCounter=2;dataBufferCounter<9;dataBufferCounter++){
  4341  1564  3002               	movlw	2
  4342  1565  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  4343  1566  3000               	movlw	0
  4344  1567  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  4345  1568                     L1:	
  4346  1568  0822               	movf	copyReceivedDataBuffer@dataBufferCounter+1,w
  4347  1569  3A80               	xorlw	128
  4348  156A  00A0               	movwf	??_copyReceivedDataBuffer
  4349  156B  3080               	movlw	128
  4350  156C  0220               	subwf	??_copyReceivedDataBuffer,w
  4351  156D  1D03               	skipz
  4352  156E  2D71               	goto	u5545
  4353  156F  3009               	movlw	9
  4354  1570  0221               	subwf	copyReceivedDataBuffer@dataBufferCounter,w
  4355  1571                     u5545:	
  4356  1571  1803               	btfsc	3,0
  4357  1572  0008               	return
  4358                           
  4359                           ;main.c: 1327: tempReceivedDataBuffer[dataBufferCounter-2]=copymainReceivedDataBuffer[da
      +                          taBufferCounter];
  4360  1573  0020               	movlb	0	; select bank0
  4361  1574  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4362  1575  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
  4363  1576  0086               	movwf	6
  4364  1577  3002               	movlw	2	; select bank4/5
  4365  1578  0087               	movwf	7
  4366  1579  0801               	movf	1,w
  4367  157A  00A0               	movwf	??_copyReceivedDataBuffer
  4368  157B  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4369  157C  3EFE               	addlw	254
  4370  157D  3EA0               	addlw	(low (_tempReceivedDataBuffer| (0+256)))& (0+255)
  4371  157E  0086               	movwf	6
  4372  157F  3001               	movlw	1	; select bank3/4
  4373  1580  0087               	movwf	7
  4374  1581  0820               	movf	??_copyReceivedDataBuffer,w
  4375  1582  0081               	movwf	1
  4376                           
  4377                           ;main.c: 1328: copymainReceivedDataBuffer[dataBufferCounter]='#';
  4378  1583  3023               	movlw	35
  4379  1584  00A0               	movwf	??_copyReceivedDataBuffer
  4380  1585  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4381  1586  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
  4382  1587  0086               	movwf	6
  4383  1588  3002               	movlw	2	; select bank4/5
  4384  1589  0087               	movwf	7
  4385  158A  0820               	movf	??_copyReceivedDataBuffer,w
  4386  158B  0081               	movwf	1
  4387  158C  3001               	movlw	1
  4388  158D  07A1               	addwf	copyReceivedDataBuffer@dataBufferCounter,f
  4389  158E  3000               	movlw	0
  4390  158F  3DA2               	addwfc	copyReceivedDataBuffer@dataBufferCounter+1,f
  4391  1590  2D68               	goto	L1
  4392  1591                     __end_of_copyReceivedDataBuffer:	
  4393                           
  4394                           	psect	text8
  4395  017D                     __ptext8:	
  4396 ;; *************** function _applicationControlRGB *****************
  4397 ;; Defined at:
  4398 ;;		line 1 in file "applicationcontrolRGB.h"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;  ModuleNamest    1    wreg     PTR unsigned char 
  4401 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4402 ;;  SwitchNumber    1   44[BANK0 ] PTR unsigned char 
  4403 ;;		 -> switchNumberBuffer(3), NULL(0), 
  4404 ;;  SwitchStatus    1   45[BANK0 ] PTR unsigned char 
  4405 ;;		 -> switchstatusbuffer(2), NULL(0), 
  4406 ;;  RedColorInte    1   46[BANK0 ] PTR unsigned char 
  4407 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4408 ;;  GreenColorIn    1   47[BANK0 ] PTR unsigned char 
  4409 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4410 ;;  BlueColorInt    1   48[BANK0 ] PTR unsigned char 
  4411 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4412 ;;  ChildLockstr    1   49[BANK0 ] PTR unsigned char 
  4413 ;;		 -> ChildLockbuffer(2), NULL(0), 
  4414 ;;  Allcolorstr     1   50[BANK0 ] PTR unsigned char 
  4415 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;  ModuleNamest    1   30[BANK1 ] PTR unsigned char 
  4418 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4419 ;;  HexlevelBuff    5   49[BANK1 ] unsigned char [5]
  4420 ;;  CompleteCloc    4   54[BANK1 ] unsigned long 
  4421 ;;  NeedBluePuls    4   26[BANK1 ] unsigned long 
  4422 ;;  NeedGreenPul    4   22[BANK1 ] unsigned long 
  4423 ;;  NeedRedPulse    4   18[BANK1 ] unsigned long 
  4424 ;;  BluePulse       4   14[BANK1 ] unsigned long 
  4425 ;;  GreenPulse      4   10[BANK1 ] unsigned long 
  4426 ;;  RedPulse        4    6[BANK1 ] unsigned long 
  4427 ;;  strBlueL        3   46[BANK1 ] unsigned char [3]
  4428 ;;  strBlueH        3   43[BANK1 ] unsigned char [3]
  4429 ;;  strGreenL       3   40[BANK1 ] unsigned char [3]
  4430 ;;  strGreenH       3   37[BANK1 ] unsigned char [3]
  4431 ;;  strRedL         3   34[BANK1 ] unsigned char [3]
  4432 ;;  strRedH         3   31[BANK1 ] unsigned char [3]
  4433 ;;  ConvertIntTo    3   72[BANK1 ] unsigned char [3]
  4434 ;;  ConvertIntTo    3   69[BANK1 ] unsigned char [3]
  4435 ;;  ConvertIntTo    3   66[BANK1 ] unsigned char [3]
  4436 ;;  clockPerCycl    3   61[BANK1 ] float 
  4437 ;;  Convert255Ra    3   58[BANK1 ] float 
  4438 ;;  ConvertIntoT    2   64[BANK1 ] int 
  4439 ;;  end             2    4[BANK1 ] int 
  4440 ;;  start           2    2[BANK1 ] int 
  4441 ;;  remainder       2    0[BANK1 ] int 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  1    wreg      void 
  4444 ;; Registers used:
  4445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4451 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0
  4452 ;;      Locals:         0       0      75       0       0       0       0       0       0       0       0
  4453 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  4454 ;;      Totals:         0       9      75       0       0       0       0       0       0       0       0
  4455 ;;Total ram usage:       84 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; Hardware stack levels required when called:    4
  4458 ;; This function calls:
  4459 ;;		___awtoft
  4460 ;;		___ftdiv
  4461 ;;		___ftmul
  4462 ;;		___fttol
  4463 ;;		___lwtoft
  4464 ;;		_abs
  4465 ;;		_atoi
  4466 ;;		_hexadecimalToDecimal
  4467 ;;		_memset
  4468 ;;		_sendAcknowledgmentRGB
  4469 ;;		_sprintf
  4470 ;;		_strcat
  4471 ;;		_strcpy
  4472 ;;		_strlen
  4473 ;;		_strncpy
  4474 ;; This function is called by:
  4475 ;;		_main
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           
  4480                           ;psect for function _applicationControlRGB
  4481  017D                     _applicationControlRGB:	
  4482                           
  4483                           ;incstack = 0
  4484                           ; Regs used in _applicationControlRGB: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4485                           ;applicationControlRGB@ModuleNamestr stored from wreg
  4486  017D  0021               	movlb	1	; select bank1
  4487  017E  00BE               	movwf	applicationControlRGB@ModuleNamestr^(0+128)
  4488                           
  4489                           ;applicationcontrolRGB.h: 7: IntegerSwitchNumber = atoi(SwitchNumberstr);
  4490  017F  0020               	movlb	0	; select bank0
  4491  0180  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4492  0181  00A6               	movwf	atoi@s
  4493  0182  39FF               	andlw	255
  4494  0183  1D03               	skipz
  4495  0184  3001               	movlw	1
  4496  0185  00A7               	movwf	atoi@s+1
  4497  0186  3197  270D  3181   	fcall	_atoi
  4498  0189  0020               	movlb	0	; select bank0
  4499  018A  0827               	movf	?_atoi+1,w
  4500  018B  0022               	movlb	2	; select bank2
  4501  018C  00B5               	movwf	(_IntegerSwitchNumber+1)^(0+256)
  4502  018D  0020               	movlb	0	; select bank0
  4503  018E  0826               	movf	?_atoi,w
  4504  018F  0022               	movlb	2	; select bank2
  4505  0190  00B4               	movwf	_IntegerSwitchNumber^(0+256)
  4506                           
  4507                           ;applicationcontrolRGB.h: 8: IntergerSwitchStatus = atoi(SwitchStatusstr);
  4508  0191  0020               	movlb	0	; select bank0
  4509  0192  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4510  0193  00A6               	movwf	atoi@s
  4511  0194  39FF               	andlw	255
  4512  0195  1D03               	skipz
  4513  0196  3001               	movlw	1
  4514  0197  00A7               	movwf	atoi@s+1
  4515  0198  3197  270D  3181   	fcall	_atoi
  4516  019B  0020               	movlb	0	; select bank0
  4517  019C  0827               	movf	?_atoi+1,w
  4518  019D  0022               	movlb	2	; select bank2
  4519  019E  00B3               	movwf	(_IntergerSwitchStatus+1)^(0+256)
  4520  019F  0020               	movlb	0	; select bank0
  4521  01A0  0826               	movf	?_atoi,w
  4522  01A1  0022               	movlb	2	; select bank2
  4523  01A2  00B2               	movwf	_IntergerSwitchStatus^(0+256)
  4524                           
  4525                           ;applicationcontrolRGB.h: 9: IntergerRedColorIntensity = atoi(RedColorIntensitystr);
  4526  01A3  0020               	movlb	0	; select bank0
  4527  01A4  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4528  01A5  00A6               	movwf	atoi@s
  4529  01A6  39FF               	andlw	255
  4530  01A7  1D03               	skipz
  4531  01A8  3002               	movlw	2
  4532  01A9  00A7               	movwf	atoi@s+1
  4533  01AA  3197  270D  3181   	fcall	_atoi
  4534  01AD  0020               	movlb	0	; select bank0
  4535  01AE  0827               	movf	?_atoi+1,w
  4536  01AF  0021               	movlb	1	; select bank1
  4537  01B0  00EE               	movwf	(_IntergerRedColorIntensity+1)^(0+128)
  4538  01B1  0020               	movlb	0	; select bank0
  4539  01B2  0826               	movf	?_atoi,w
  4540  01B3  0021               	movlb	1	; select bank1
  4541  01B4  00ED               	movwf	_IntergerRedColorIntensity^(0+128)
  4542                           
  4543                           ;applicationcontrolRGB.h: 10: IntegerBlueColorIntensity = atoi(BlueColorIntensitystr);
  4544  01B5  0020               	movlb	0	; select bank0
  4545  01B6  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4546  01B7  00A6               	movwf	atoi@s
  4547  01B8  39FF               	andlw	255
  4548  01B9  1D03               	skipz
  4549  01BA  3002               	movlw	2
  4550  01BB  00A7               	movwf	atoi@s+1
  4551  01BC  3197  270D  3181   	fcall	_atoi
  4552  01BF  0020               	movlb	0	; select bank0
  4553  01C0  0827               	movf	?_atoi+1,w
  4554  01C1  00F1               	movwf	_IntegerBlueColorIntensity+1
  4555  01C2  0826               	movf	?_atoi,w
  4556  01C3  00F0               	movwf	_IntegerBlueColorIntensity
  4557                           
  4558                           ;applicationcontrolRGB.h: 11: IntegerGreenColorIntensity = atoi(GreenColorIntensitystr);
  4559  01C4  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4560  01C5  00A6               	movwf	atoi@s
  4561  01C6  39FF               	andlw	255
  4562  01C7  1D03               	skipz
  4563  01C8  3002               	movlw	2
  4564  01C9  00A7               	movwf	atoi@s+1
  4565  01CA  3197  270D  3181   	fcall	_atoi
  4566  01CD  0020               	movlb	0	; select bank0
  4567  01CE  0827               	movf	?_atoi+1,w
  4568  01CF  0021               	movlb	1	; select bank1
  4569  01D0  00EC               	movwf	(_IntegerGreenColorIntensity+1)^(0+128)
  4570  01D1  0020               	movlb	0	; select bank0
  4571  01D2  0826               	movf	?_atoi,w
  4572  01D3  0021               	movlb	1	; select bank1
  4573  01D4  00EB               	movwf	_IntegerGreenColorIntensity^(0+128)
  4574                           
  4575                           ;applicationcontrolRGB.h: 12: IntegerAllColorIntensity = atoi(Allcolorstr);
  4576  01D5  0020               	movlb	0	; select bank0
  4577  01D6  0852               	movf	applicationControlRGB@Allcolorstr,w
  4578  01D7  00A6               	movwf	atoi@s
  4579  01D8  39FF               	andlw	255
  4580  01D9  1D03               	skipz
  4581  01DA  3002               	movlw	2
  4582  01DB  00A7               	movwf	atoi@s+1
  4583  01DC  3197  270D  3181   	fcall	_atoi
  4584  01DF  0020               	movlb	0	; select bank0
  4585  01E0  0827               	movf	?_atoi+1,w
  4586  01E1  0023               	movlb	3	; select bank3
  4587  01E2  00D5               	movwf	(_IntegerAllColorIntensity+1)^(0+384)
  4588  01E3  0020               	movlb	0	; select bank0
  4589  01E4  0826               	movf	?_atoi,w
  4590  01E5  0023               	movlb	3	; select bank3
  4591  01E6  00D4               	movwf	_IntegerAllColorIntensity^(0+384)
  4592                           
  4593                           ;applicationcontrolRGB.h: 13: IntegerChildLock = atoi(ChildLockstr);
  4594  01E7  0020               	movlb	0	; select bank0
  4595  01E8  0851               	movf	applicationControlRGB@ChildLockstr,w
  4596  01E9  00A6               	movwf	atoi@s
  4597  01EA  39FF               	andlw	255
  4598  01EB  1D03               	skipz
  4599  01EC  3001               	movlw	1
  4600  01ED  00A7               	movwf	atoi@s+1
  4601  01EE  3197  270D  3181   	fcall	_atoi
  4602  01F1  0020               	movlb	0	; select bank0
  4603  01F2  0827               	movf	?_atoi+1,w
  4604  01F3  0022               	movlb	2	; select bank2
  4605  01F4  00B1               	movwf	(_IntegerChildLock+1)^(0+256)
  4606  01F5  0020               	movlb	0	; select bank0
  4607  01F6  0826               	movf	?_atoi,w
  4608  01F7  0022               	movlb	2	; select bank2
  4609  01F8  00B0               	movwf	_IntegerChildLock^(0+256)
  4610                           
  4611                           ;applicationcontrolRGB.h: 16: charchildLock = IntegerChildLock + '0';
  4612  01F9  0830               	movf	_IntegerChildLock^(0+256),w
  4613  01FA  3E30               	addlw	48
  4614  01FB  0020               	movlb	0	; select bank0
  4615  01FC  00D3               	movwf	??_applicationControlRGB
  4616  01FD  0853               	movf	??_applicationControlRGB,w
  4617  01FE  00E7               	movwf	_charchildLock
  4618                           
  4619                           ;applicationcontrolRGB.h: 17: charSwitchState = IntergerSwitchStatus + '0';
  4620  01FF  0022               	movlb	2	; select bank2
  4621  0200  0832               	movf	_IntergerSwitchStatus^(0+256),w
  4622  0201  3E30               	addlw	48
  4623  0202  0020               	movlb	0	; select bank0
  4624  0203  00D3               	movwf	??_applicationControlRGB
  4625  0204  0853               	movf	??_applicationControlRGB,w
  4626  0205  0022               	movlb	2	; select bank2
  4627  0206  00E8               	movwf	_charSwitchState^(0+256)
  4628                           
  4629                           ;applicationcontrolRGB.h: 20: strcpy(sendFinalBufferToGAteway,ModuleNamestr);
  4630  0207  0021               	movlb	1	; select bank1
  4631  0208  083E               	movf	applicationControlRGB@ModuleNamestr^(0+128),w
  4632  0209  0020               	movlb	0	; select bank0
  4633  020A  00D3               	movwf	??_applicationControlRGB
  4634  020B  0853               	movf	??_applicationControlRGB,w
  4635  020C  00A0               	movwf	strcpy@from
  4636  020D  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4637  020E  3193  230B  3181   	fcall	_strcpy
  4638                           
  4639                           ;applicationcontrolRGB.h: 21: strcat(sendFinalBufferToGAteway,".");
  4640  0211  303B               	movlw	low (STR_1| (0+32768))
  4641  0212  0020               	movlb	0	; select bank0
  4642  0213  00A0               	movwf	strcat@from
  4643  0214  3098               	movlw	high (STR_1| (0+32768))
  4644  0215  00A1               	movwf	strcat@from+1
  4645  0216  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4646  0217  3194  2424  3181   	fcall	_strcat
  4647                           
  4648                           ;applicationcontrolRGB.h: 22: strcat(sendFinalBufferToGAteway,SwitchNumberstr);
  4649  021A  0020               	movlb	0	; select bank0
  4650  021B  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4651  021C  00A0               	movwf	strcat@from
  4652  021D  39FF               	andlw	255
  4653  021E  1D03               	skipz
  4654  021F  3001               	movlw	1
  4655  0220  00A1               	movwf	strcat@from+1
  4656  0221  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4657  0222  3194  2424  3181   	fcall	_strcat
  4658                           
  4659                           ;applicationcontrolRGB.h: 23: strcat(sendFinalBufferToGAteway,".");
  4660  0225  303B               	movlw	low (STR_1| (0+32768))
  4661  0226  0020               	movlb	0	; select bank0
  4662  0227  00A0               	movwf	strcat@from
  4663  0228  3098               	movlw	high (STR_1| (0+32768))
  4664  0229  00A1               	movwf	strcat@from+1
  4665  022A  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4666  022B  3194  2424  3181   	fcall	_strcat
  4667                           
  4668                           ;applicationcontrolRGB.h: 24: strcat(sendFinalBufferToGAteway,"ACTACK");
  4669  022E  3019               	movlw	low (STR_3| (0+32768))
  4670  022F  0020               	movlb	0	; select bank0
  4671  0230  00A0               	movwf	strcat@from
  4672  0231  3098               	movlw	high (STR_3| (0+32768))
  4673  0232  00A1               	movwf	strcat@from+1
  4674  0233  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4675  0234  3194  2424  3181   	fcall	_strcat
  4676                           
  4677                           ;applicationcontrolRGB.h: 25: strcat(sendFinalBufferToGAteway,".");
  4678  0237  303B               	movlw	low (STR_1| (0+32768))
  4679  0238  0020               	movlb	0	; select bank0
  4680  0239  00A0               	movwf	strcat@from
  4681  023A  3098               	movlw	high (STR_1| (0+32768))
  4682  023B  00A1               	movwf	strcat@from+1
  4683  023C  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4684  023D  3194  2424  3181   	fcall	_strcat
  4685                           
  4686                           ;applicationcontrolRGB.h: 26: strcat(sendFinalBufferToGAteway,SwitchStatusstr);
  4687  0240  0020               	movlb	0	; select bank0
  4688  0241  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4689  0242  00A0               	movwf	strcat@from
  4690  0243  39FF               	andlw	255
  4691  0244  1D03               	skipz
  4692  0245  3001               	movlw	1
  4693  0246  00A1               	movwf	strcat@from+1
  4694  0247  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4695  0248  3194  2424  3181   	fcall	_strcat
  4696                           
  4697                           ;applicationcontrolRGB.h: 27: strcat(sendFinalBufferToGAteway,".");
  4698  024B  303B               	movlw	low (STR_1| (0+32768))
  4699  024C  0020               	movlb	0	; select bank0
  4700  024D  00A0               	movwf	strcat@from
  4701  024E  3098               	movlw	high (STR_1| (0+32768))
  4702  024F  00A1               	movwf	strcat@from+1
  4703  0250  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4704  0251  3194  2424  3181   	fcall	_strcat
  4705                           
  4706                           ;applicationcontrolRGB.h: 28: strcat(sendFinalBufferToGAteway,RedColorIntensitystr);
  4707  0254  0020               	movlb	0	; select bank0
  4708  0255  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4709  0256  00A0               	movwf	strcat@from
  4710  0257  39FF               	andlw	255
  4711  0258  1D03               	skipz
  4712  0259  3002               	movlw	2
  4713  025A  00A1               	movwf	strcat@from+1
  4714  025B  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4715  025C  3194  2424  3181   	fcall	_strcat
  4716                           
  4717                           ;applicationcontrolRGB.h: 29: strcat(sendFinalBufferToGAteway,".");
  4718  025F  303B               	movlw	low (STR_1| (0+32768))
  4719  0260  0020               	movlb	0	; select bank0
  4720  0261  00A0               	movwf	strcat@from
  4721  0262  3098               	movlw	high (STR_1| (0+32768))
  4722  0263  00A1               	movwf	strcat@from+1
  4723  0264  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4724  0265  3194  2424  3181   	fcall	_strcat
  4725                           
  4726                           ;applicationcontrolRGB.h: 30: strcat(sendFinalBufferToGAteway,GreenColorIntensitystr);
  4727  0268  0020               	movlb	0	; select bank0
  4728  0269  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4729  026A  00A0               	movwf	strcat@from
  4730  026B  39FF               	andlw	255
  4731  026C  1D03               	skipz
  4732  026D  3002               	movlw	2
  4733  026E  00A1               	movwf	strcat@from+1
  4734  026F  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4735  0270  3194  2424  3181   	fcall	_strcat
  4736                           
  4737                           ;applicationcontrolRGB.h: 31: strcat(sendFinalBufferToGAteway,".");
  4738  0273  303B               	movlw	low (STR_1| (0+32768))
  4739  0274  0020               	movlb	0	; select bank0
  4740  0275  00A0               	movwf	strcat@from
  4741  0276  3098               	movlw	high (STR_1| (0+32768))
  4742  0277  00A1               	movwf	strcat@from+1
  4743  0278  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4744  0279  3194  2424  3181   	fcall	_strcat
  4745                           
  4746                           ;applicationcontrolRGB.h: 32: strcat(sendFinalBufferToGAteway,BlueColorIntensitystr);
  4747  027C  0020               	movlb	0	; select bank0
  4748  027D  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4749  027E  00A0               	movwf	strcat@from
  4750  027F  39FF               	andlw	255
  4751  0280  1D03               	skipz
  4752  0281  3002               	movlw	2
  4753  0282  00A1               	movwf	strcat@from+1
  4754  0283  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4755  0284  3194  2424  3181   	fcall	_strcat
  4756                           
  4757                           ;applicationcontrolRGB.h: 33: strcat(sendFinalBufferToGAteway,".");
  4758  0287  303B               	movlw	low (STR_1| (0+32768))
  4759  0288  0020               	movlb	0	; select bank0
  4760  0289  00A0               	movwf	strcat@from
  4761  028A  3098               	movlw	high (STR_1| (0+32768))
  4762  028B  00A1               	movwf	strcat@from+1
  4763  028C  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4764  028D  3194  2424  3181   	fcall	_strcat
  4765                           
  4766                           ;applicationcontrolRGB.h: 34: strcat(sendFinalBufferToGAteway,ChildLockstr);
  4767  0290  0020               	movlb	0	; select bank0
  4768  0291  0851               	movf	applicationControlRGB@ChildLockstr,w
  4769  0292  00A0               	movwf	strcat@from
  4770  0293  39FF               	andlw	255
  4771  0294  1D03               	skipz
  4772  0295  3001               	movlw	1
  4773  0296  00A1               	movwf	strcat@from+1
  4774  0297  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4775  0298  3194  2424  3181   	fcall	_strcat
  4776                           
  4777                           ;applicationcontrolRGB.h: 35: strcat(sendFinalBufferToGAteway,".");
  4778  029B  303B               	movlw	low (STR_1| (0+32768))
  4779  029C  0020               	movlb	0	; select bank0
  4780  029D  00A0               	movwf	strcat@from
  4781  029E  3098               	movlw	high (STR_1| (0+32768))
  4782  029F  00A1               	movwf	strcat@from+1
  4783  02A0  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4784  02A1  3194  2424  3181   	fcall	_strcat
  4785                           
  4786                           ;applicationcontrolRGB.h: 36: strcat(sendFinalBufferToGAteway,"100|");
  4787  02A4  302F               	movlw	low (STR_10| (0+32768))
  4788  02A5  0020               	movlb	0	; select bank0
  4789  02A6  00A0               	movwf	strcat@from
  4790  02A7  3098               	movlw	high (STR_10| (0+32768))
  4791  02A8  00A1               	movwf	strcat@from+1
  4792  02A9  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4793  02AA  3194  2424  3181   	fcall	_strcat
  4794                           
  4795                           ;applicationcontrolRGB.h: 37: sendAcknowledgmentRGB(sendFinalBufferToGAteway);
  4796  02AD  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4797  02AE  3193  2381  3181   	fcall	_sendAcknowledgmentRGB
  4798                           
  4799                           ;applicationcontrolRGB.h: 39: parentalLockBuffer[IntegerSwitchNumber] = charchildLock;
  4800  02B1  0020               	movlb	0	; select bank0
  4801  02B2  0867               	movf	_charchildLock,w
  4802  02B3  00D3               	movwf	??_applicationControlRGB
  4803  02B4  0022               	movlb	2	; select bank2
  4804  02B5  0834               	movf	_IntegerSwitchNumber^(0+256),w
  4805  02B6  3EC0               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  4806  02B7  0086               	movwf	6
  4807  02B8  3002               	movlw	2	; select bank5/6
  4808  02B9  0087               	movwf	7
  4809  02BA  0020               	movlb	0	; select bank0
  4810  02BB  0853               	movf	??_applicationControlRGB,w
  4811  02BC  0081               	movwf	1
  4812                           
  4813                           ;applicationcontrolRGB.h: 41: double ConvertIntToTimeInMicrosecRed;
  4814                           ;applicationcontrolRGB.h: 42: double ConvertIntToTimeInMicrosecGreen;
  4815                           ;applicationcontrolRGB.h: 43: double ConvertIntToTimeInMicrosecBlue;
  4816                           ;applicationcontrolRGB.h: 44: unsigned long long int RedPulse=0,GreenPulse=0,BluePulse=0
      +                          ,NeedRedPulse=0,NeedGreenPulse=0,NeedBluePulse=0,CompleteClock = 65535;
  4817  02BD  3000               	movlw	0
  4818  02BE  0021               	movlb	1	; select bank1
  4819  02BF  00A9               	movwf	(applicationControlRGB@RedPulse+3)^(0+128)
  4820  02C0  3000               	movlw	0
  4821  02C1  00A8               	movwf	(applicationControlRGB@RedPulse+2)^(0+128)
  4822  02C2  3000               	movlw	0
  4823  02C3  00A7               	movwf	(applicationControlRGB@RedPulse+1)^(0+128)
  4824  02C4  3000               	movlw	0
  4825  02C5  00A6               	movwf	applicationControlRGB@RedPulse^(0+128)
  4826  02C6  3000               	movlw	0
  4827  02C7  00AD               	movwf	(applicationControlRGB@GreenPulse+3)^(0+128)
  4828  02C8  3000               	movlw	0
  4829  02C9  00AC               	movwf	(applicationControlRGB@GreenPulse+2)^(0+128)
  4830  02CA  3000               	movlw	0
  4831  02CB  00AB               	movwf	(applicationControlRGB@GreenPulse+1)^(0+128)
  4832  02CC  3000               	movlw	0
  4833  02CD  00AA               	movwf	applicationControlRGB@GreenPulse^(0+128)
  4834  02CE  3000               	movlw	0
  4835  02CF  00B1               	movwf	(applicationControlRGB@BluePulse+3)^(0+128)
  4836  02D0  3000               	movlw	0
  4837  02D1  00B0               	movwf	(applicationControlRGB@BluePulse+2)^(0+128)
  4838  02D2  3000               	movlw	0
  4839  02D3  00AF               	movwf	(applicationControlRGB@BluePulse+1)^(0+128)
  4840  02D4  3000               	movlw	0
  4841  02D5  00AE               	movwf	applicationControlRGB@BluePulse^(0+128)
  4842  02D6  3000               	movlw	0
  4843  02D7  00B5               	movwf	(applicationControlRGB@NeedRedPulse+3)^(0+128)
  4844  02D8  3000               	movlw	0
  4845  02D9  00B4               	movwf	(applicationControlRGB@NeedRedPulse+2)^(0+128)
  4846  02DA  3000               	movlw	0
  4847  02DB  00B3               	movwf	(applicationControlRGB@NeedRedPulse+1)^(0+128)
  4848  02DC  3000               	movlw	0
  4849  02DD  00B2               	movwf	applicationControlRGB@NeedRedPulse^(0+128)
  4850  02DE  3000               	movlw	0
  4851  02DF  00B9               	movwf	(applicationControlRGB@NeedGreenPulse+3)^(0+128)
  4852  02E0  3000               	movlw	0
  4853  02E1  00B8               	movwf	(applicationControlRGB@NeedGreenPulse+2)^(0+128)
  4854  02E2  3000               	movlw	0
  4855  02E3  00B7               	movwf	(applicationControlRGB@NeedGreenPulse+1)^(0+128)
  4856  02E4  3000               	movlw	0
  4857  02E5  00B6               	movwf	applicationControlRGB@NeedGreenPulse^(0+128)
  4858  02E6  3000               	movlw	0
  4859  02E7  00BD               	movwf	(applicationControlRGB@NeedBluePulse+3)^(0+128)
  4860  02E8  3000               	movlw	0
  4861  02E9  00BC               	movwf	(applicationControlRGB@NeedBluePulse+2)^(0+128)
  4862  02EA  3000               	movlw	0
  4863  02EB  00BB               	movwf	(applicationControlRGB@NeedBluePulse+1)^(0+128)
  4864  02EC  3000               	movlw	0
  4865  02ED  00BA               	movwf	applicationControlRGB@NeedBluePulse^(0+128)
  4866  02EE  3000               	movlw	0
  4867  02EF  00D9               	movwf	(applicationControlRGB@CompleteClock+3)^(0+128)
  4868  02F0  3000               	movlw	0
  4869  02F1  00D8               	movwf	(applicationControlRGB@CompleteClock+2)^(0+128)
  4870  02F2  30FF               	movlw	255
  4871  02F3  00D7               	movwf	(applicationControlRGB@CompleteClock+1)^(0+128)
  4872  02F4  30FF               	movlw	255
  4873  02F5  00D6               	movwf	applicationControlRGB@CompleteClock^(0+128)
  4874                           
  4875                           ;applicationcontrolRGB.h: 45: float Convert255RangeintoHundred = 2.57;
  4876  02F6  307B               	movlw	123
  4877  02F7  00DA               	movwf	applicationControlRGB@Convert255RangeintoHundred^(0+128)
  4878  02F8  3024               	movlw	36
  4879  02F9  00DB               	movwf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128)
  4880  02FA  3040               	movlw	64
  4881  02FB  00DC               	movwf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128)
  4882                           
  4883                           ;applicationcontrolRGB.h: 46: int ConvertIntoTenMsRangeFactor = 10;
  4884  02FC  300A               	movlw	10
  4885  02FD  00E0               	movwf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128)
  4886  02FE  3000               	movlw	0
  4887  02FF  00E1               	movwf	(applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128)+1)
  4888                           
  4889                           ;applicationcontrolRGB.h: 47: float clockPerCycle=0.25;
  4890  0300  3000               	movlw	0
  4891  0301  00DD               	movwf	applicationControlRGB@clockPerCycle^(0+128)
  4892  0302  3080               	movlw	128
  4893  0303  00DE               	movwf	(applicationControlRGB@clockPerCycle+1)^(0+128)
  4894  0304  303E               	movlw	62
  4895  0305  00DF               	movwf	(applicationControlRGB@clockPerCycle+2)^(0+128)
  4896                           
  4897                           ;applicationcontrolRGB.h: 48: int remainder=0;
  4898  0306  01A0               	clrf	applicationControlRGB@remainder^(0+128)
  4899  0307  01A1               	clrf	(applicationControlRGB@remainder+1)^(0+128)
  4900                           
  4901                           ;applicationcontrolRGB.h: 49: char HexlevelBuffer[5];
  4902                           ;applicationcontrolRGB.h: 50: int start=0;
  4903  0308  01A2               	clrf	applicationControlRGB@start^(0+128)
  4904  0309  01A3               	clrf	(applicationControlRGB@start+1)^(0+128)
  4905                           
  4906                           ;applicationcontrolRGB.h: 51: int end = strlen(HexlevelBuffer)-1;
  4907  030A  30D1               	movlw	low applicationControlRGB@HexlevelBuffer
  4908  030B  0020               	movlb	0	; select bank0
  4909  030C  00A0               	movwf	strlen@s
  4910  030D  3000               	movlw	high applicationControlRGB@HexlevelBuffer
  4911  030E  00A1               	movwf	strlen@s+1
  4912  030F  3193  2362  3181   	fcall	_strlen
  4913  0312  0020               	movlb	0	; select bank0
  4914  0313  0820               	movf	?_strlen,w
  4915  0314  3EFF               	addlw	255
  4916  0315  0021               	movlb	1	; select bank1
  4917  0316  00A4               	movwf	applicationControlRGB@end^(0+128)
  4918  0317  30FF               	movlw	255
  4919  0318  0020               	movlb	0	; select bank0
  4920  0319  3D21               	addwfc	?_strlen+1,w
  4921  031A  0021               	movlb	1	; select bank1
  4922  031B  00A5               	movwf	(applicationControlRGB@end+1)^(0+128)
  4923                           
  4924                           ;applicationcontrolRGB.h: 52: char strRedH[3],strRedL[3];
  4925                           ;applicationcontrolRGB.h: 53: char strGreenH[3],strGreenL[3];
  4926                           ;applicationcontrolRGB.h: 54: char strBlueH[3],strBlueL[3];
  4927                           ;applicationcontrolRGB.h: 56: IntegerSwitchNumber = atoi(SwitchNumberstr);
  4928  031C  0020               	movlb	0	; select bank0
  4929  031D  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4930  031E  00A6               	movwf	atoi@s
  4931  031F  39FF               	andlw	255
  4932  0320  1D03               	skipz
  4933  0321  3001               	movlw	1
  4934  0322  00A7               	movwf	atoi@s+1
  4935  0323  3197  270D  3181   	fcall	_atoi
  4936  0326  0020               	movlb	0	; select bank0
  4937  0327  0827               	movf	?_atoi+1,w
  4938  0328  0022               	movlb	2	; select bank2
  4939  0329  00B5               	movwf	(_IntegerSwitchNumber+1)^(0+256)
  4940  032A  0020               	movlb	0	; select bank0
  4941  032B  0826               	movf	?_atoi,w
  4942  032C  0022               	movlb	2	; select bank2
  4943  032D  00B4               	movwf	_IntegerSwitchNumber^(0+256)
  4944                           
  4945                           ;applicationcontrolRGB.h: 57: IntergerSwitchStatus = atoi(SwitchStatusstr);
  4946  032E  0020               	movlb	0	; select bank0
  4947  032F  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4948  0330  00A6               	movwf	atoi@s
  4949  0331  39FF               	andlw	255
  4950  0332  1D03               	skipz
  4951  0333  3001               	movlw	1
  4952  0334  00A7               	movwf	atoi@s+1
  4953  0335  3197  270D  3181   	fcall	_atoi
  4954  0338  0020               	movlb	0	; select bank0
  4955  0339  0827               	movf	?_atoi+1,w
  4956  033A  0022               	movlb	2	; select bank2
  4957  033B  00B3               	movwf	(_IntergerSwitchStatus+1)^(0+256)
  4958  033C  0020               	movlb	0	; select bank0
  4959  033D  0826               	movf	?_atoi,w
  4960  033E  0022               	movlb	2	; select bank2
  4961  033F  00B2               	movwf	_IntergerSwitchStatus^(0+256)
  4962                           
  4963                           ;applicationcontrolRGB.h: 58: IntergerRedColorIntensity = atoi(RedColorIntensitystr);
  4964  0340  0020               	movlb	0	; select bank0
  4965  0341  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4966  0342  00A6               	movwf	atoi@s
  4967  0343  39FF               	andlw	255
  4968  0344  1D03               	skipz
  4969  0345  3002               	movlw	2
  4970  0346  00A7               	movwf	atoi@s+1
  4971  0347  3197  270D  3181   	fcall	_atoi
  4972  034A  0020               	movlb	0	; select bank0
  4973  034B  0827               	movf	?_atoi+1,w
  4974  034C  0021               	movlb	1	; select bank1
  4975  034D  00EE               	movwf	(_IntergerRedColorIntensity+1)^(0+128)
  4976  034E  0020               	movlb	0	; select bank0
  4977  034F  0826               	movf	?_atoi,w
  4978  0350  0021               	movlb	1	; select bank1
  4979  0351  00ED               	movwf	_IntergerRedColorIntensity^(0+128)
  4980                           
  4981                           ;applicationcontrolRGB.h: 59: IntegerBlueColorIntensity = atoi(BlueColorIntensitystr);
  4982  0352  0020               	movlb	0	; select bank0
  4983  0353  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4984  0354  00A6               	movwf	atoi@s
  4985  0355  39FF               	andlw	255
  4986  0356  1D03               	skipz
  4987  0357  3002               	movlw	2
  4988  0358  00A7               	movwf	atoi@s+1
  4989  0359  3197  270D  3181   	fcall	_atoi
  4990  035C  0020               	movlb	0	; select bank0
  4991  035D  0827               	movf	?_atoi+1,w
  4992  035E  00F1               	movwf	_IntegerBlueColorIntensity+1
  4993  035F  0826               	movf	?_atoi,w
  4994  0360  00F0               	movwf	_IntegerBlueColorIntensity
  4995                           
  4996                           ;applicationcontrolRGB.h: 60: IntegerGreenColorIntensity = atoi(GreenColorIntensitystr);
  4997  0361  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4998  0362  00A6               	movwf	atoi@s
  4999  0363  39FF               	andlw	255
  5000  0364  1D03               	skipz
  5001  0365  3002               	movlw	2
  5002  0366  00A7               	movwf	atoi@s+1
  5003  0367  3197  270D  3181   	fcall	_atoi
  5004  036A  0020               	movlb	0	; select bank0
  5005  036B  0827               	movf	?_atoi+1,w
  5006  036C  0021               	movlb	1	; select bank1
  5007  036D  00EC               	movwf	(_IntegerGreenColorIntensity+1)^(0+128)
  5008  036E  0020               	movlb	0	; select bank0
  5009  036F  0826               	movf	?_atoi,w
  5010  0370  0021               	movlb	1	; select bank1
  5011  0371  00EB               	movwf	_IntegerGreenColorIntensity^(0+128)
  5012                           
  5013                           ;applicationcontrolRGB.h: 61: IntegerAllColorIntensity = atoi(Allcolorstr);
  5014  0372  0020               	movlb	0	; select bank0
  5015  0373  0852               	movf	applicationControlRGB@Allcolorstr,w
  5016  0374  00A6               	movwf	atoi@s
  5017  0375  39FF               	andlw	255
  5018  0376  1D03               	skipz
  5019  0377  3002               	movlw	2
  5020  0378  00A7               	movwf	atoi@s+1
  5021  0379  3197  270D  3181   	fcall	_atoi
  5022  037C  0020               	movlb	0	; select bank0
  5023  037D  0827               	movf	?_atoi+1,w
  5024  037E  0023               	movlb	3	; select bank3
  5025  037F  00D5               	movwf	(_IntegerAllColorIntensity+1)^(0+384)
  5026  0380  0020               	movlb	0	; select bank0
  5027  0381  0826               	movf	?_atoi,w
  5028  0382  0023               	movlb	3	; select bank3
  5029  0383  00D4               	movwf	_IntegerAllColorIntensity^(0+384)
  5030                           
  5031                           ;applicationcontrolRGB.h: 62: IntegerChildLock = atoi(ChildLockstr);
  5032  0384  0020               	movlb	0	; select bank0
  5033  0385  0851               	movf	applicationControlRGB@ChildLockstr,w
  5034  0386  00A6               	movwf	atoi@s
  5035  0387  39FF               	andlw	255
  5036  0388  1D03               	skipz
  5037  0389  3001               	movlw	1
  5038  038A  00A7               	movwf	atoi@s+1
  5039  038B  3197  270D  3181   	fcall	_atoi
  5040  038E  0020               	movlb	0	; select bank0
  5041  038F  0827               	movf	?_atoi+1,w
  5042  0390  0022               	movlb	2	; select bank2
  5043  0391  00B1               	movwf	(_IntegerChildLock+1)^(0+256)
  5044  0392  0020               	movlb	0	; select bank0
  5045  0393  0826               	movf	?_atoi,w
  5046  0394  0022               	movlb	2	; select bank2
  5047  0395  00B0               	movwf	_IntegerChildLock^(0+256)
  5048                           
  5049                           ;applicationcontrolRGB.h: 66: ConvertIntToTimeInMicrosecRed = (IntergerRedColorIntensity
      +                          /Convert255RangeintoHundred);
  5050  0396  0021               	movlb	1	; select bank1
  5051  0397  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5052  0398  0020               	movlb	0	; select bank0
  5053  0399  00AE               	movwf	___ftdiv@f2
  5054  039A  0021               	movlb	1	; select bank1
  5055  039B  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5056  039C  0020               	movlb	0	; select bank0
  5057  039D  00AF               	movwf	___ftdiv@f2+1
  5058  039E  0021               	movlb	1	; select bank1
  5059  039F  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5060  03A0  0020               	movlb	0	; select bank0
  5061  03A1  00B0               	movwf	___ftdiv@f2+2
  5062  03A2  0021               	movlb	1	; select bank1
  5063  03A3  086E               	movf	(_IntergerRedColorIntensity+1)^(0+128),w
  5064  03A4  0020               	movlb	0	; select bank0
  5065  03A5  00A9               	movwf	___lwtoft@c+1
  5066  03A6  0021               	movlb	1	; select bank1
  5067  03A7  086D               	movf	_IntergerRedColorIntensity^(0+128),w
  5068  03A8  0020               	movlb	0	; select bank0
  5069  03A9  00A8               	movwf	___lwtoft@c
  5070  03AA  3192  2276  3181   	fcall	___lwtoft
  5071  03AD  0020               	movlb	0	; select bank0
  5072  03AE  0828               	movf	?___lwtoft,w
  5073  03AF  00B1               	movwf	___ftdiv@f1
  5074  03B0  0829               	movf	?___lwtoft+1,w
  5075  03B1  00B2               	movwf	___ftdiv@f1+1
  5076  03B2  082A               	movf	?___lwtoft+2,w
  5077  03B3  00B3               	movwf	___ftdiv@f1+2
  5078  03B4  3188  204F  3181   	fcall	___ftdiv
  5079  03B7  0020               	movlb	0	; select bank0
  5080  03B8  082E               	movf	?___ftdiv,w
  5081  03B9  0021               	movlb	1	; select bank1
  5082  03BA  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5083  03BB  0020               	movlb	0	; select bank0
  5084  03BC  082F               	movf	?___ftdiv+1,w
  5085  03BD  0021               	movlb	1	; select bank1
  5086  03BE  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5087  03BF  0020               	movlb	0	; select bank0
  5088  03C0  0830               	movf	?___ftdiv+2,w
  5089  03C1  0021               	movlb	1	; select bank1
  5090  03C2  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5091                           
  5092                           ;applicationcontrolRGB.h: 67: ConvertIntToTimeInMicrosecRed = (ConvertIntToTimeInMicrose
      +                          cRed/ConvertIntoTenMsRangeFactor);
  5093  03C3  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5094  03C4  0020               	movlb	0	; select bank0
  5095  03C5  00A9               	movwf	___awtoft@c+1
  5096  03C6  0021               	movlb	1	; select bank1
  5097  03C7  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5098  03C8  0020               	movlb	0	; select bank0
  5099  03C9  00A8               	movwf	___awtoft@c
  5100  03CA  3194  2402  3181   	fcall	___awtoft
  5101  03CD  0020               	movlb	0	; select bank0
  5102  03CE  0828               	movf	?___awtoft,w
  5103  03CF  00AE               	movwf	___ftdiv@f2
  5104  03D0  0829               	movf	?___awtoft+1,w
  5105  03D1  00AF               	movwf	___ftdiv@f2+1
  5106  03D2  082A               	movf	?___awtoft+2,w
  5107  03D3  00B0               	movwf	___ftdiv@f2+2
  5108  03D4  0021               	movlb	1	; select bank1
  5109  03D5  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5110  03D6  0020               	movlb	0	; select bank0
  5111  03D7  00B1               	movwf	___ftdiv@f1
  5112  03D8  0021               	movlb	1	; select bank1
  5113  03D9  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5114  03DA  0020               	movlb	0	; select bank0
  5115  03DB  00B2               	movwf	___ftdiv@f1+1
  5116  03DC  0021               	movlb	1	; select bank1
  5117  03DD  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5118  03DE  0020               	movlb	0	; select bank0
  5119  03DF  00B3               	movwf	___ftdiv@f1+2
  5120  03E0  3188  204F  3181   	fcall	___ftdiv
  5121  03E3  0020               	movlb	0	; select bank0
  5122  03E4  082E               	movf	?___ftdiv,w
  5123  03E5  0021               	movlb	1	; select bank1
  5124  03E6  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5125  03E7  0020               	movlb	0	; select bank0
  5126  03E8  082F               	movf	?___ftdiv+1,w
  5127  03E9  0021               	movlb	1	; select bank1
  5128  03EA  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5129  03EB  0020               	movlb	0	; select bank0
  5130  03EC  0830               	movf	?___ftdiv+2,w
  5131  03ED  0021               	movlb	1	; select bank1
  5132  03EE  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5133                           
  5134                           ;applicationcontrolRGB.h: 68: ConvertIntToTimeInMicrosecRed = (ConvertIntToTimeInMicrose
      +                          cRed*1000);
  5135  03EF  3000               	movlw	0
  5136  03F0  0020               	movlb	0	; select bank0
  5137  03F1  00A8               	movwf	___ftmul@f1
  5138  03F2  307A               	movlw	122
  5139  03F3  00A9               	movwf	___ftmul@f1+1
  5140  03F4  3044               	movlw	68
  5141  03F5  00AA               	movwf	___ftmul@f1+2
  5142  03F6  0021               	movlb	1	; select bank1
  5143  03F7  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5144  03F8  0020               	movlb	0	; select bank0
  5145  03F9  00AB               	movwf	___ftmul@f2
  5146  03FA  0021               	movlb	1	; select bank1
  5147  03FB  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5148  03FC  0020               	movlb	0	; select bank0
  5149  03FD  00AC               	movwf	___ftmul@f2+1
  5150  03FE  0021               	movlb	1	; select bank1
  5151  03FF  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5152  0400  0020               	movlb	0	; select bank0
  5153  0401  00AD               	movwf	___ftmul@f2+2
  5154  0402  3189  21AB  3181   	fcall	___ftmul
  5155  0405  0020               	movlb	0	; select bank0
  5156  0406  0828               	movf	?___ftmul,w
  5157  0407  0021               	movlb	1	; select bank1
  5158  0408  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5159  0409  0020               	movlb	0	; select bank0
  5160  040A  0829               	movf	?___ftmul+1,w
  5161  040B  0021               	movlb	1	; select bank1
  5162  040C  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5163  040D  0020               	movlb	0	; select bank0
  5164  040E  082A               	movf	?___ftmul+2,w
  5165  040F  0021               	movlb	1	; select bank1
  5166  0410  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5167                           
  5168                           ;applicationcontrolRGB.h: 69: RedPulse = (int)(ConvertIntToTimeInMicrosecRed/clockPerCyc
      +                          le);
  5169  0411  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5170  0412  0020               	movlb	0	; select bank0
  5171  0413  00B1               	movwf	___ftdiv@f1
  5172  0414  0021               	movlb	1	; select bank1
  5173  0415  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5174  0416  0020               	movlb	0	; select bank0
  5175  0417  00B2               	movwf	___ftdiv@f1+1
  5176  0418  0021               	movlb	1	; select bank1
  5177  0419  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5178  041A  0020               	movlb	0	; select bank0
  5179  041B  00B3               	movwf	___ftdiv@f1+2
  5180  041C  0021               	movlb	1	; select bank1
  5181  041D  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5182  041E  0020               	movlb	0	; select bank0
  5183  041F  00AE               	movwf	___ftdiv@f2
  5184  0420  0021               	movlb	1	; select bank1
  5185  0421  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5186  0422  0020               	movlb	0	; select bank0
  5187  0423  00AF               	movwf	___ftdiv@f2+1
  5188  0424  0021               	movlb	1	; select bank1
  5189  0425  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5190  0426  0020               	movlb	0	; select bank0
  5191  0427  00B0               	movwf	___ftdiv@f2+2
  5192  0428  3188  204F  3181   	fcall	___ftdiv
  5193  042B  0020               	movlb	0	; select bank0
  5194  042C  082E               	movf	?___ftdiv,w
  5195  042D  00BE               	movwf	___fttol@f1
  5196  042E  082F               	movf	?___ftdiv+1,w
  5197  042F  00BF               	movwf	___fttol@f1+1
  5198  0430  0830               	movf	?___ftdiv+2,w
  5199  0431  00C0               	movwf	___fttol@f1+2
  5200  0432  3187  2779  3181   	fcall	___fttol
  5201  0435  0020               	movlb	0	; select bank0
  5202  0436  083E               	movf	?___fttol,w
  5203  0437  0021               	movlb	1	; select bank1
  5204  0438  00A6               	movwf	applicationControlRGB@RedPulse^(0+128)
  5205  0439  0020               	movlb	0	; select bank0
  5206  043A  083F               	movf	?___fttol+1,w
  5207  043B  0021               	movlb	1	; select bank1
  5208  043C  00A7               	movwf	(applicationControlRGB@RedPulse+1)^(0+128)
  5209  043D  0D89               	rlf	9,f
  5210  043E  3B89               	subwfb	9,f
  5211  043F  0989               	comf	9,f
  5212  0440  00A8               	movwf	(applicationControlRGB@RedPulse+2)^(0+128)
  5213  0441  00A9               	movwf	(applicationControlRGB@RedPulse+3)^(0+128)
  5214                           
  5215                           ;applicationcontrolRGB.h: 70: NeedRedPulse = abs(CompleteClock - RedPulse);
  5216  0442  0926               	comf	applicationControlRGB@RedPulse^(0+128),w
  5217  0443  0020               	movlb	0	; select bank0
  5218  0444  00D3               	movwf	??_applicationControlRGB
  5219  0445  0021               	movlb	1	; select bank1
  5220  0446  0927               	comf	(applicationControlRGB@RedPulse+1)^(0+128),w
  5221  0447  0020               	movlb	0	; select bank0
  5222  0448  00D4               	movwf	??_applicationControlRGB+1
  5223  0449  0AD3               	incf	??_applicationControlRGB,f
  5224  044A  1903               	skipnz
  5225  044B  0AD4               	incf	??_applicationControlRGB+1,f
  5226  044C  0021               	movlb	1	; select bank1
  5227  044D  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5228  044E  0020               	movlb	0	; select bank0
  5229  044F  0753               	addwf	??_applicationControlRGB,w
  5230  0450  00A0               	movwf	abs@a
  5231  0451  0021               	movlb	1	; select bank1
  5232  0452  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5233  0453  0020               	movlb	0	; select bank0
  5234  0454  3D54               	addwfc	??_applicationControlRGB+1,w
  5235  0455  00A1               	movwf	abs@a+1
  5236  0456  3192  221E  3181   	fcall	_abs
  5237  0459  0020               	movlb	0	; select bank0
  5238  045A  0820               	movf	?_abs,w
  5239  045B  0021               	movlb	1	; select bank1
  5240  045C  00B2               	movwf	applicationControlRGB@NeedRedPulse^(0+128)
  5241  045D  0020               	movlb	0	; select bank0
  5242  045E  0821               	movf	?_abs+1,w
  5243  045F  0021               	movlb	1	; select bank1
  5244  0460  00B3               	movwf	(applicationControlRGB@NeedRedPulse+1)^(0+128)
  5245  0461  0D89               	rlf	9,f
  5246  0462  3B89               	subwfb	9,f
  5247  0463  0989               	comf	9,f
  5248  0464  00B4               	movwf	(applicationControlRGB@NeedRedPulse+2)^(0+128)
  5249  0465  00B5               	movwf	(applicationControlRGB@NeedRedPulse+3)^(0+128)
  5250                           
  5251                           ;applicationcontrolRGB.h: 74: ConvertIntToTimeInMicrosecGreen = (IntegerGreenColorIntens
      +                          ity/Convert255RangeintoHundred);
  5252  0466  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5253  0467  0020               	movlb	0	; select bank0
  5254  0468  00AE               	movwf	___ftdiv@f2
  5255  0469  0021               	movlb	1	; select bank1
  5256  046A  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5257  046B  0020               	movlb	0	; select bank0
  5258  046C  00AF               	movwf	___ftdiv@f2+1
  5259  046D  0021               	movlb	1	; select bank1
  5260  046E  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5261  046F  0020               	movlb	0	; select bank0
  5262  0470  00B0               	movwf	___ftdiv@f2+2
  5263  0471  0021               	movlb	1	; select bank1
  5264  0472  086C               	movf	(_IntegerGreenColorIntensity+1)^(0+128),w
  5265  0473  0020               	movlb	0	; select bank0
  5266  0474  00A9               	movwf	___lwtoft@c+1
  5267  0475  0021               	movlb	1	; select bank1
  5268  0476  086B               	movf	_IntegerGreenColorIntensity^(0+128),w
  5269  0477  0020               	movlb	0	; select bank0
  5270  0478  00A8               	movwf	___lwtoft@c
  5271  0479  3192  2276  3181   	fcall	___lwtoft
  5272  047C  0020               	movlb	0	; select bank0
  5273  047D  0828               	movf	?___lwtoft,w
  5274  047E  00B1               	movwf	___ftdiv@f1
  5275  047F  0829               	movf	?___lwtoft+1,w
  5276  0480  00B2               	movwf	___ftdiv@f1+1
  5277  0481  082A               	movf	?___lwtoft+2,w
  5278  0482  00B3               	movwf	___ftdiv@f1+2
  5279  0483  3188  204F  3181   	fcall	___ftdiv
  5280  0486  0020               	movlb	0	; select bank0
  5281  0487  082E               	movf	?___ftdiv,w
  5282  0488  0021               	movlb	1	; select bank1
  5283  0489  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5284  048A  0020               	movlb	0	; select bank0
  5285  048B  082F               	movf	?___ftdiv+1,w
  5286  048C  0021               	movlb	1	; select bank1
  5287  048D  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5288  048E  0020               	movlb	0	; select bank0
  5289  048F  0830               	movf	?___ftdiv+2,w
  5290  0490  0021               	movlb	1	; select bank1
  5291  0491  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5292                           
  5293                           ;applicationcontrolRGB.h: 75: ConvertIntToTimeInMicrosecGreen = (ConvertIntToTimeInMicro
      +                          secGreen/ConvertIntoTenMsRangeFactor);
  5294  0492  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5295  0493  0020               	movlb	0	; select bank0
  5296  0494  00A9               	movwf	___awtoft@c+1
  5297  0495  0021               	movlb	1	; select bank1
  5298  0496  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5299  0497  0020               	movlb	0	; select bank0
  5300  0498  00A8               	movwf	___awtoft@c
  5301  0499  3194  2402  3181   	fcall	___awtoft
  5302  049C  0020               	movlb	0	; select bank0
  5303  049D  0828               	movf	?___awtoft,w
  5304  049E  00AE               	movwf	___ftdiv@f2
  5305  049F  0829               	movf	?___awtoft+1,w
  5306  04A0  00AF               	movwf	___ftdiv@f2+1
  5307  04A1  082A               	movf	?___awtoft+2,w
  5308  04A2  00B0               	movwf	___ftdiv@f2+2
  5309  04A3  0021               	movlb	1	; select bank1
  5310  04A4  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5311  04A5  0020               	movlb	0	; select bank0
  5312  04A6  00B1               	movwf	___ftdiv@f1
  5313  04A7  0021               	movlb	1	; select bank1
  5314  04A8  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5315  04A9  0020               	movlb	0	; select bank0
  5316  04AA  00B2               	movwf	___ftdiv@f1+1
  5317  04AB  0021               	movlb	1	; select bank1
  5318  04AC  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5319  04AD  0020               	movlb	0	; select bank0
  5320  04AE  00B3               	movwf	___ftdiv@f1+2
  5321  04AF  3188  204F  3181   	fcall	___ftdiv
  5322  04B2  0020               	movlb	0	; select bank0
  5323  04B3  082E               	movf	?___ftdiv,w
  5324  04B4  0021               	movlb	1	; select bank1
  5325  04B5  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5326  04B6  0020               	movlb	0	; select bank0
  5327  04B7  082F               	movf	?___ftdiv+1,w
  5328  04B8  0021               	movlb	1	; select bank1
  5329  04B9  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5330  04BA  0020               	movlb	0	; select bank0
  5331  04BB  0830               	movf	?___ftdiv+2,w
  5332  04BC  0021               	movlb	1	; select bank1
  5333  04BD  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5334                           
  5335                           ;applicationcontrolRGB.h: 76: ConvertIntToTimeInMicrosecGreen = (ConvertIntToTimeInMicro
      +                          secGreen*1000);
  5336  04BE  3000               	movlw	0
  5337  04BF  0020               	movlb	0	; select bank0
  5338  04C0  00A8               	movwf	___ftmul@f1
  5339  04C1  307A               	movlw	122
  5340  04C2  00A9               	movwf	___ftmul@f1+1
  5341  04C3  3044               	movlw	68
  5342  04C4  00AA               	movwf	___ftmul@f1+2
  5343  04C5  0021               	movlb	1	; select bank1
  5344  04C6  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5345  04C7  0020               	movlb	0	; select bank0
  5346  04C8  00AB               	movwf	___ftmul@f2
  5347  04C9  0021               	movlb	1	; select bank1
  5348  04CA  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5349  04CB  0020               	movlb	0	; select bank0
  5350  04CC  00AC               	movwf	___ftmul@f2+1
  5351  04CD  0021               	movlb	1	; select bank1
  5352  04CE  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5353  04CF  0020               	movlb	0	; select bank0
  5354  04D0  00AD               	movwf	___ftmul@f2+2
  5355  04D1  3189  21AB  3181   	fcall	___ftmul
  5356  04D4  0020               	movlb	0	; select bank0
  5357  04D5  0828               	movf	?___ftmul,w
  5358  04D6  0021               	movlb	1	; select bank1
  5359  04D7  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5360  04D8  0020               	movlb	0	; select bank0
  5361  04D9  0829               	movf	?___ftmul+1,w
  5362  04DA  0021               	movlb	1	; select bank1
  5363  04DB  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5364  04DC  0020               	movlb	0	; select bank0
  5365  04DD  082A               	movf	?___ftmul+2,w
  5366  04DE  0021               	movlb	1	; select bank1
  5367  04DF  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5368                           
  5369                           ;applicationcontrolRGB.h: 77: GreenPulse = (int)(ConvertIntToTimeInMicrosecGreen/clockPe
      +                          rCycle);
  5370  04E0  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5371  04E1  0020               	movlb	0	; select bank0
  5372  04E2  00B1               	movwf	___ftdiv@f1
  5373  04E3  0021               	movlb	1	; select bank1
  5374  04E4  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5375  04E5  0020               	movlb	0	; select bank0
  5376  04E6  00B2               	movwf	___ftdiv@f1+1
  5377  04E7  0021               	movlb	1	; select bank1
  5378  04E8  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5379  04E9  0020               	movlb	0	; select bank0
  5380  04EA  00B3               	movwf	___ftdiv@f1+2
  5381  04EB  0021               	movlb	1	; select bank1
  5382  04EC  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5383  04ED  0020               	movlb	0	; select bank0
  5384  04EE  00AE               	movwf	___ftdiv@f2
  5385  04EF  0021               	movlb	1	; select bank1
  5386  04F0  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5387  04F1  0020               	movlb	0	; select bank0
  5388  04F2  00AF               	movwf	___ftdiv@f2+1
  5389  04F3  0021               	movlb	1	; select bank1
  5390  04F4  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5391  04F5  0020               	movlb	0	; select bank0
  5392  04F6  00B0               	movwf	___ftdiv@f2+2
  5393  04F7  3188  204F  3181   	fcall	___ftdiv
  5394  04FA  0020               	movlb	0	; select bank0
  5395  04FB  082E               	movf	?___ftdiv,w
  5396  04FC  00BE               	movwf	___fttol@f1
  5397  04FD  082F               	movf	?___ftdiv+1,w
  5398  04FE  00BF               	movwf	___fttol@f1+1
  5399  04FF  0830               	movf	?___ftdiv+2,w
  5400  0500  00C0               	movwf	___fttol@f1+2
  5401  0501  3187  2779  3181   	fcall	___fttol
  5402  0504  0020               	movlb	0	; select bank0
  5403  0505  083E               	movf	?___fttol,w
  5404  0506  0021               	movlb	1	; select bank1
  5405  0507  00AA               	movwf	applicationControlRGB@GreenPulse^(0+128)
  5406  0508  0020               	movlb	0	; select bank0
  5407  0509  083F               	movf	?___fttol+1,w
  5408  050A  0021               	movlb	1	; select bank1
  5409  050B  00AB               	movwf	(applicationControlRGB@GreenPulse+1)^(0+128)
  5410  050C  0D89               	rlf	9,f
  5411  050D  3B89               	subwfb	9,f
  5412  050E  0989               	comf	9,f
  5413  050F  00AC               	movwf	(applicationControlRGB@GreenPulse+2)^(0+128)
  5414  0510  00AD               	movwf	(applicationControlRGB@GreenPulse+3)^(0+128)
  5415                           
  5416                           ;applicationcontrolRGB.h: 78: NeedGreenPulse = abs(CompleteClock - GreenPulse);
  5417  0511  092A               	comf	applicationControlRGB@GreenPulse^(0+128),w
  5418  0512  0020               	movlb	0	; select bank0
  5419  0513  00D3               	movwf	??_applicationControlRGB
  5420  0514  0021               	movlb	1	; select bank1
  5421  0515  092B               	comf	(applicationControlRGB@GreenPulse+1)^(0+128),w
  5422  0516  0020               	movlb	0	; select bank0
  5423  0517  00D4               	movwf	??_applicationControlRGB+1
  5424  0518  0AD3               	incf	??_applicationControlRGB,f
  5425  0519  1903               	skipnz
  5426  051A  0AD4               	incf	??_applicationControlRGB+1,f
  5427  051B  0021               	movlb	1	; select bank1
  5428  051C  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5429  051D  0020               	movlb	0	; select bank0
  5430  051E  0753               	addwf	??_applicationControlRGB,w
  5431  051F  00A0               	movwf	abs@a
  5432  0520  0021               	movlb	1	; select bank1
  5433  0521  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5434  0522  0020               	movlb	0	; select bank0
  5435  0523  3D54               	addwfc	??_applicationControlRGB+1,w
  5436  0524  00A1               	movwf	abs@a+1
  5437  0525  3192  221E  3181   	fcall	_abs
  5438  0528  0020               	movlb	0	; select bank0
  5439  0529  0820               	movf	?_abs,w
  5440  052A  0021               	movlb	1	; select bank1
  5441  052B  00B6               	movwf	applicationControlRGB@NeedGreenPulse^(0+128)
  5442  052C  0020               	movlb	0	; select bank0
  5443  052D  0821               	movf	?_abs+1,w
  5444  052E  0021               	movlb	1	; select bank1
  5445  052F  00B7               	movwf	(applicationControlRGB@NeedGreenPulse+1)^(0+128)
  5446  0530  0D89               	rlf	9,f
  5447  0531  3B89               	subwfb	9,f
  5448  0532  0989               	comf	9,f
  5449  0533  00B8               	movwf	(applicationControlRGB@NeedGreenPulse+2)^(0+128)
  5450  0534  00B9               	movwf	(applicationControlRGB@NeedGreenPulse+3)^(0+128)
  5451                           
  5452                           ;applicationcontrolRGB.h: 82: ConvertIntToTimeInMicrosecBlue = (IntegerBlueColorIntensit
      +                          y/Convert255RangeintoHundred);
  5453  0535  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5454  0536  0020               	movlb	0	; select bank0
  5455  0537  00AE               	movwf	___ftdiv@f2
  5456  0538  0021               	movlb	1	; select bank1
  5457  0539  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5458  053A  0020               	movlb	0	; select bank0
  5459  053B  00AF               	movwf	___ftdiv@f2+1
  5460  053C  0021               	movlb	1	; select bank1
  5461  053D  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5462  053E  0020               	movlb	0	; select bank0
  5463  053F  00B0               	movwf	___ftdiv@f2+2
  5464  0540  0871               	movf	_IntegerBlueColorIntensity+1,w
  5465  0541  00A9               	movwf	___lwtoft@c+1
  5466  0542  0870               	movf	_IntegerBlueColorIntensity,w
  5467  0543  00A8               	movwf	___lwtoft@c
  5468  0544  3192  2276  3181   	fcall	___lwtoft
  5469  0547  0020               	movlb	0	; select bank0
  5470  0548  0828               	movf	?___lwtoft,w
  5471  0549  00B1               	movwf	___ftdiv@f1
  5472  054A  0829               	movf	?___lwtoft+1,w
  5473  054B  00B2               	movwf	___ftdiv@f1+1
  5474  054C  082A               	movf	?___lwtoft+2,w
  5475  054D  00B3               	movwf	___ftdiv@f1+2
  5476  054E  3188  204F  3181   	fcall	___ftdiv
  5477  0551  0020               	movlb	0	; select bank0
  5478  0552  082E               	movf	?___ftdiv,w
  5479  0553  0021               	movlb	1	; select bank1
  5480  0554  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5481  0555  0020               	movlb	0	; select bank0
  5482  0556  082F               	movf	?___ftdiv+1,w
  5483  0557  0021               	movlb	1	; select bank1
  5484  0558  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5485  0559  0020               	movlb	0	; select bank0
  5486  055A  0830               	movf	?___ftdiv+2,w
  5487  055B  0021               	movlb	1	; select bank1
  5488  055C  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5489                           
  5490                           ;applicationcontrolRGB.h: 83: ConvertIntToTimeInMicrosecBlue = (ConvertIntToTimeInMicros
      +                          ecBlue/ConvertIntoTenMsRangeFactor);
  5491  055D  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5492  055E  0020               	movlb	0	; select bank0
  5493  055F  00A9               	movwf	___awtoft@c+1
  5494  0560  0021               	movlb	1	; select bank1
  5495  0561  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5496  0562  0020               	movlb	0	; select bank0
  5497  0563  00A8               	movwf	___awtoft@c
  5498  0564  3194  2402  3181   	fcall	___awtoft
  5499  0567  0020               	movlb	0	; select bank0
  5500  0568  0828               	movf	?___awtoft,w
  5501  0569  00AE               	movwf	___ftdiv@f2
  5502  056A  0829               	movf	?___awtoft+1,w
  5503  056B  00AF               	movwf	___ftdiv@f2+1
  5504  056C  082A               	movf	?___awtoft+2,w
  5505  056D  00B0               	movwf	___ftdiv@f2+2
  5506  056E  0021               	movlb	1	; select bank1
  5507  056F  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5508  0570  0020               	movlb	0	; select bank0
  5509  0571  00B1               	movwf	___ftdiv@f1
  5510  0572  0021               	movlb	1	; select bank1
  5511  0573  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5512  0574  0020               	movlb	0	; select bank0
  5513  0575  00B2               	movwf	___ftdiv@f1+1
  5514  0576  0021               	movlb	1	; select bank1
  5515  0577  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5516  0578  0020               	movlb	0	; select bank0
  5517  0579  00B3               	movwf	___ftdiv@f1+2
  5518  057A  3188  204F  3181   	fcall	___ftdiv
  5519  057D  0020               	movlb	0	; select bank0
  5520  057E  082E               	movf	?___ftdiv,w
  5521  057F  0021               	movlb	1	; select bank1
  5522  0580  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5523  0581  0020               	movlb	0	; select bank0
  5524  0582  082F               	movf	?___ftdiv+1,w
  5525  0583  0021               	movlb	1	; select bank1
  5526  0584  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5527  0585  0020               	movlb	0	; select bank0
  5528  0586  0830               	movf	?___ftdiv+2,w
  5529  0587  0021               	movlb	1	; select bank1
  5530  0588  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5531                           
  5532                           ;applicationcontrolRGB.h: 84: ConvertIntToTimeInMicrosecBlue = (ConvertIntToTimeInMicros
      +                          ecBlue*1000);
  5533  0589  3000               	movlw	0
  5534  058A  0020               	movlb	0	; select bank0
  5535  058B  00A8               	movwf	___ftmul@f1
  5536  058C  307A               	movlw	122
  5537  058D  00A9               	movwf	___ftmul@f1+1
  5538  058E  3044               	movlw	68
  5539  058F  00AA               	movwf	___ftmul@f1+2
  5540  0590  0021               	movlb	1	; select bank1
  5541  0591  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5542  0592  0020               	movlb	0	; select bank0
  5543  0593  00AB               	movwf	___ftmul@f2
  5544  0594  0021               	movlb	1	; select bank1
  5545  0595  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5546  0596  0020               	movlb	0	; select bank0
  5547  0597  00AC               	movwf	___ftmul@f2+1
  5548  0598  0021               	movlb	1	; select bank1
  5549  0599  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5550  059A  0020               	movlb	0	; select bank0
  5551  059B  00AD               	movwf	___ftmul@f2+2
  5552  059C  3189  21AB  3181   	fcall	___ftmul
  5553  059F  0020               	movlb	0	; select bank0
  5554  05A0  0828               	movf	?___ftmul,w
  5555  05A1  0021               	movlb	1	; select bank1
  5556  05A2  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5557  05A3  0020               	movlb	0	; select bank0
  5558  05A4  0829               	movf	?___ftmul+1,w
  5559  05A5  0021               	movlb	1	; select bank1
  5560  05A6  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5561  05A7  0020               	movlb	0	; select bank0
  5562  05A8  082A               	movf	?___ftmul+2,w
  5563  05A9  0021               	movlb	1	; select bank1
  5564  05AA  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5565                           
  5566                           ;applicationcontrolRGB.h: 85: BluePulse = (int)(ConvertIntToTimeInMicrosecBlue/clockPerC
      +                          ycle);
  5567  05AB  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5568  05AC  0020               	movlb	0	; select bank0
  5569  05AD  00B1               	movwf	___ftdiv@f1
  5570  05AE  0021               	movlb	1	; select bank1
  5571  05AF  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5572  05B0  0020               	movlb	0	; select bank0
  5573  05B1  00B2               	movwf	___ftdiv@f1+1
  5574  05B2  0021               	movlb	1	; select bank1
  5575  05B3  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5576  05B4  0020               	movlb	0	; select bank0
  5577  05B5  00B3               	movwf	___ftdiv@f1+2
  5578  05B6  0021               	movlb	1	; select bank1
  5579  05B7  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5580  05B8  0020               	movlb	0	; select bank0
  5581  05B9  00AE               	movwf	___ftdiv@f2
  5582  05BA  0021               	movlb	1	; select bank1
  5583  05BB  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5584  05BC  0020               	movlb	0	; select bank0
  5585  05BD  00AF               	movwf	___ftdiv@f2+1
  5586  05BE  0021               	movlb	1	; select bank1
  5587  05BF  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5588  05C0  0020               	movlb	0	; select bank0
  5589  05C1  00B0               	movwf	___ftdiv@f2+2
  5590  05C2  3188  204F  3181   	fcall	___ftdiv
  5591  05C5  0020               	movlb	0	; select bank0
  5592  05C6  082E               	movf	?___ftdiv,w
  5593  05C7  00BE               	movwf	___fttol@f1
  5594  05C8  082F               	movf	?___ftdiv+1,w
  5595  05C9  00BF               	movwf	___fttol@f1+1
  5596  05CA  0830               	movf	?___ftdiv+2,w
  5597  05CB  00C0               	movwf	___fttol@f1+2
  5598  05CC  3187  2779  3181   	fcall	___fttol
  5599  05CF  0020               	movlb	0	; select bank0
  5600  05D0  083E               	movf	?___fttol,w
  5601  05D1  0021               	movlb	1	; select bank1
  5602  05D2  00AE               	movwf	applicationControlRGB@BluePulse^(0+128)
  5603  05D3  0020               	movlb	0	; select bank0
  5604  05D4  083F               	movf	?___fttol+1,w
  5605  05D5  0021               	movlb	1	; select bank1
  5606  05D6  00AF               	movwf	(applicationControlRGB@BluePulse+1)^(0+128)
  5607  05D7  0D89               	rlf	9,f
  5608  05D8  3B89               	subwfb	9,f
  5609  05D9  0989               	comf	9,f
  5610  05DA  00B0               	movwf	(applicationControlRGB@BluePulse+2)^(0+128)
  5611  05DB  00B1               	movwf	(applicationControlRGB@BluePulse+3)^(0+128)
  5612                           
  5613                           ;applicationcontrolRGB.h: 86: NeedBluePulse = abs(CompleteClock - BluePulse);
  5614  05DC  092E               	comf	applicationControlRGB@BluePulse^(0+128),w
  5615  05DD  0020               	movlb	0	; select bank0
  5616  05DE  00D3               	movwf	??_applicationControlRGB
  5617  05DF  0021               	movlb	1	; select bank1
  5618  05E0  092F               	comf	(applicationControlRGB@BluePulse+1)^(0+128),w
  5619  05E1  0020               	movlb	0	; select bank0
  5620  05E2  00D4               	movwf	??_applicationControlRGB+1
  5621  05E3  0AD3               	incf	??_applicationControlRGB,f
  5622  05E4  1903               	skipnz
  5623  05E5  0AD4               	incf	??_applicationControlRGB+1,f
  5624  05E6  0021               	movlb	1	; select bank1
  5625  05E7  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5626  05E8  0020               	movlb	0	; select bank0
  5627  05E9  0753               	addwf	??_applicationControlRGB,w
  5628  05EA  00A0               	movwf	abs@a
  5629  05EB  0021               	movlb	1	; select bank1
  5630  05EC  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5631  05ED  0020               	movlb	0	; select bank0
  5632  05EE  3D54               	addwfc	??_applicationControlRGB+1,w
  5633  05EF  00A1               	movwf	abs@a+1
  5634  05F0  3192  221E  3181   	fcall	_abs
  5635  05F3  0020               	movlb	0	; select bank0
  5636  05F4  0820               	movf	?_abs,w
  5637  05F5  0021               	movlb	1	; select bank1
  5638  05F6  00BA               	movwf	applicationControlRGB@NeedBluePulse^(0+128)
  5639  05F7  0020               	movlb	0	; select bank0
  5640  05F8  0821               	movf	?_abs+1,w
  5641  05F9  0021               	movlb	1	; select bank1
  5642  05FA  00BB               	movwf	(applicationControlRGB@NeedBluePulse+1)^(0+128)
  5643  05FB  0D89               	rlf	9,f
  5644  05FC  3B89               	subwfb	9,f
  5645  05FD  0989               	comf	9,f
  5646  05FE  00BC               	movwf	(applicationControlRGB@NeedBluePulse+2)^(0+128)
  5647  05FF  00BD               	movwf	(applicationControlRGB@NeedBluePulse+3)^(0+128)
  5648                           
  5649                           ;applicationcontrolRGB.h: 90: sprintf(HexlevelBuffer,"%X",NeedRedPulse);
  5650  0600  3038               	movlw	low (STR_11| (0+32768))
  5651  0601  0020               	movlb	0	; select bank0
  5652  0602  00A8               	movwf	sprintf@f
  5653  0603  3098               	movlw	high (STR_11| (0+32768))
  5654  0604  00A9               	movwf	sprintf@f+1
  5655  0605  0021               	movlb	1	; select bank1
  5656  0606  0835               	movf	(applicationControlRGB@NeedRedPulse+3)^(0+128),w
  5657  0607  0020               	movlb	0	; select bank0
  5658  0608  00AD               	movwf	?_sprintf+5
  5659  0609  0021               	movlb	1	; select bank1
  5660  060A  0834               	movf	(applicationControlRGB@NeedRedPulse+2)^(0+128),w
  5661  060B  0020               	movlb	0	; select bank0
  5662  060C  00AC               	movwf	?_sprintf+4
  5663  060D  0021               	movlb	1	; select bank1
  5664  060E  0833               	movf	(applicationControlRGB@NeedRedPulse+1)^(0+128),w
  5665  060F  0020               	movlb	0	; select bank0
  5666  0610  00AB               	movwf	?_sprintf+3
  5667  0611  0021               	movlb	1	; select bank1
  5668  0612  0832               	movf	applicationControlRGB@NeedRedPulse^(0+128),w
  5669  0613  0020               	movlb	0	; select bank0
  5670  0614  00AA               	movwf	?_sprintf+2
  5671  0615  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5672  0616  3188  20F8  3181   	fcall	_sprintf
  5673                           
  5674                           ;applicationcontrolRGB.h: 91: strncpy(strRedH,HexlevelBuffer,2);
  5675  0619  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5676  061A  0020               	movlb	0	; select bank0
  5677  061B  00D3               	movwf	??_applicationControlRGB
  5678  061C  0853               	movf	??_applicationControlRGB,w
  5679  061D  00A0               	movwf	strncpy@from
  5680  061E  3002               	movlw	2
  5681  061F  00A1               	movwf	strncpy@size
  5682  0620  3000               	movlw	0
  5683  0621  00A2               	movwf	strncpy@size+1
  5684  0622  30BF               	movlw	(low (applicationControlRGB@strRedH| 0))& (0+255)
  5685  0623  3194  24A1  3181   	fcall	_strncpy
  5686                           
  5687                           ;applicationcontrolRGB.h: 92: strRedH[2]='\0';
  5688  0626  0021               	movlb	1	; select bank1
  5689  0627  01C1               	clrf	(applicationControlRGB@strRedH^(0+128)+2)
  5690                           
  5691                           ;applicationcontrolRGB.h: 93: strncpy(strRedL,HexlevelBuffer+2,2);
  5692  0628  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5693  0629  0020               	movlb	0	; select bank0
  5694  062A  00D3               	movwf	??_applicationControlRGB
  5695  062B  0853               	movf	??_applicationControlRGB,w
  5696  062C  00A0               	movwf	strncpy@from
  5697  062D  3002               	movlw	2
  5698  062E  00A1               	movwf	strncpy@size
  5699  062F  3000               	movlw	0
  5700  0630  00A2               	movwf	strncpy@size+1
  5701  0631  30C2               	movlw	(low (applicationControlRGB@strRedL| 0))& (0+255)
  5702  0632  3194  24A1  3181   	fcall	_strncpy
  5703                           
  5704                           ;applicationcontrolRGB.h: 94: strRedL[2]='\0';
  5705  0635  0021               	movlb	1	; select bank1
  5706  0636  01C4               	clrf	(applicationControlRGB@strRedL^(0+128)+2)
  5707                           
  5708                           ;applicationcontrolRGB.h: 95: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5709  0637  3030               	movlw	48
  5710  0638  0020               	movlb	0	; select bank0
  5711  0639  00A0               	movwf	memset@c
  5712  063A  3000               	movlw	0
  5713  063B  00A1               	movwf	memset@c+1
  5714  063C  3005               	movlw	5
  5715  063D  00A2               	movwf	memset@n
  5716  063E  3000               	movlw	0
  5717  063F  00A3               	movwf	memset@n+1
  5718  0640  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5719  0641  3192  22D4  3181   	fcall	_memset
  5720                           
  5721                           ;applicationcontrolRGB.h: 97: sprintf(HexlevelBuffer,"%X",NeedGreenPulse);
  5722  0644  3038               	movlw	low (STR_11| (0+32768))
  5723  0645  0020               	movlb	0	; select bank0
  5724  0646  00A8               	movwf	sprintf@f
  5725  0647  3098               	movlw	high (STR_11| (0+32768))
  5726  0648  00A9               	movwf	sprintf@f+1
  5727  0649  0021               	movlb	1	; select bank1
  5728  064A  0839               	movf	(applicationControlRGB@NeedGreenPulse+3)^(0+128),w
  5729  064B  0020               	movlb	0	; select bank0
  5730  064C  00AD               	movwf	?_sprintf+5
  5731  064D  0021               	movlb	1	; select bank1
  5732  064E  0838               	movf	(applicationControlRGB@NeedGreenPulse+2)^(0+128),w
  5733  064F  0020               	movlb	0	; select bank0
  5734  0650  00AC               	movwf	?_sprintf+4
  5735  0651  0021               	movlb	1	; select bank1
  5736  0652  0837               	movf	(applicationControlRGB@NeedGreenPulse+1)^(0+128),w
  5737  0653  0020               	movlb	0	; select bank0
  5738  0654  00AB               	movwf	?_sprintf+3
  5739  0655  0021               	movlb	1	; select bank1
  5740  0656  0836               	movf	applicationControlRGB@NeedGreenPulse^(0+128),w
  5741  0657  0020               	movlb	0	; select bank0
  5742  0658  00AA               	movwf	?_sprintf+2
  5743  0659  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5744  065A  3188  20F8  3181   	fcall	_sprintf
  5745                           
  5746                           ;applicationcontrolRGB.h: 98: strncpy(strGreenH,HexlevelBuffer,2);
  5747  065D  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5748  065E  0020               	movlb	0	; select bank0
  5749  065F  00D3               	movwf	??_applicationControlRGB
  5750  0660  0853               	movf	??_applicationControlRGB,w
  5751  0661  00A0               	movwf	strncpy@from
  5752  0662  3002               	movlw	2
  5753  0663  00A1               	movwf	strncpy@size
  5754  0664  3000               	movlw	0
  5755  0665  00A2               	movwf	strncpy@size+1
  5756  0666  30C5               	movlw	(low (applicationControlRGB@strGreenH| 0))& (0+255)
  5757  0667  3194  24A1  3181   	fcall	_strncpy
  5758                           
  5759                           ;applicationcontrolRGB.h: 99: strGreenH[2]='\0';
  5760  066A  0021               	movlb	1	; select bank1
  5761  066B  01C7               	clrf	(applicationControlRGB@strGreenH^(0+128)+2)
  5762                           
  5763                           ;applicationcontrolRGB.h: 100: strncpy(strGreenL,HexlevelBuffer+2,2);
  5764  066C  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5765  066D  0020               	movlb	0	; select bank0
  5766  066E  00D3               	movwf	??_applicationControlRGB
  5767  066F  0853               	movf	??_applicationControlRGB,w
  5768  0670  00A0               	movwf	strncpy@from
  5769  0671  3002               	movlw	2
  5770  0672  00A1               	movwf	strncpy@size
  5771  0673  3000               	movlw	0
  5772  0674  00A2               	movwf	strncpy@size+1
  5773  0675  30C8               	movlw	(low (applicationControlRGB@strGreenL| 0))& (0+255)
  5774  0676  3194  24A1  3181   	fcall	_strncpy
  5775                           
  5776                           ;applicationcontrolRGB.h: 101: strGreenL[2]='\0';
  5777  0679  0021               	movlb	1	; select bank1
  5778  067A  01CA               	clrf	(applicationControlRGB@strGreenL^(0+128)+2)
  5779                           
  5780                           ;applicationcontrolRGB.h: 102: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5781  067B  3030               	movlw	48
  5782  067C  0020               	movlb	0	; select bank0
  5783  067D  00A0               	movwf	memset@c
  5784  067E  3000               	movlw	0
  5785  067F  00A1               	movwf	memset@c+1
  5786  0680  3005               	movlw	5
  5787  0681  00A2               	movwf	memset@n
  5788  0682  3000               	movlw	0
  5789  0683  00A3               	movwf	memset@n+1
  5790  0684  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5791  0685  3192  22D4  3181   	fcall	_memset
  5792                           
  5793                           ;applicationcontrolRGB.h: 105: sprintf(HexlevelBuffer,"%X",NeedBluePulse);
  5794  0688  3038               	movlw	low (STR_11| (0+32768))
  5795  0689  0020               	movlb	0	; select bank0
  5796  068A  00A8               	movwf	sprintf@f
  5797  068B  3098               	movlw	high (STR_11| (0+32768))
  5798  068C  00A9               	movwf	sprintf@f+1
  5799  068D  0021               	movlb	1	; select bank1
  5800  068E  083D               	movf	(applicationControlRGB@NeedBluePulse+3)^(0+128),w
  5801  068F  0020               	movlb	0	; select bank0
  5802  0690  00AD               	movwf	?_sprintf+5
  5803  0691  0021               	movlb	1	; select bank1
  5804  0692  083C               	movf	(applicationControlRGB@NeedBluePulse+2)^(0+128),w
  5805  0693  0020               	movlb	0	; select bank0
  5806  0694  00AC               	movwf	?_sprintf+4
  5807  0695  0021               	movlb	1	; select bank1
  5808  0696  083B               	movf	(applicationControlRGB@NeedBluePulse+1)^(0+128),w
  5809  0697  0020               	movlb	0	; select bank0
  5810  0698  00AB               	movwf	?_sprintf+3
  5811  0699  0021               	movlb	1	; select bank1
  5812  069A  083A               	movf	applicationControlRGB@NeedBluePulse^(0+128),w
  5813  069B  0020               	movlb	0	; select bank0
  5814  069C  00AA               	movwf	?_sprintf+2
  5815  069D  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5816  069E  3188  20F8  3181   	fcall	_sprintf
  5817                           
  5818                           ;applicationcontrolRGB.h: 106: strncpy(strBlueH,HexlevelBuffer,2);
  5819  06A1  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5820  06A2  0020               	movlb	0	; select bank0
  5821  06A3  00D3               	movwf	??_applicationControlRGB
  5822  06A4  0853               	movf	??_applicationControlRGB,w
  5823  06A5  00A0               	movwf	strncpy@from
  5824  06A6  3002               	movlw	2
  5825  06A7  00A1               	movwf	strncpy@size
  5826  06A8  3000               	movlw	0
  5827  06A9  00A2               	movwf	strncpy@size+1
  5828  06AA  30CB               	movlw	(low (applicationControlRGB@strBlueH| 0))& (0+255)
  5829  06AB  3194  24A1  3181   	fcall	_strncpy
  5830                           
  5831                           ;applicationcontrolRGB.h: 107: strBlueH[2]='\0';
  5832  06AE  0021               	movlb	1	; select bank1
  5833  06AF  01CD               	clrf	(applicationControlRGB@strBlueH^(0+128)+2)
  5834                           
  5835                           ;applicationcontrolRGB.h: 108: strncpy(strBlueL,HexlevelBuffer+2,2);
  5836  06B0  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5837  06B1  0020               	movlb	0	; select bank0
  5838  06B2  00D3               	movwf	??_applicationControlRGB
  5839  06B3  0853               	movf	??_applicationControlRGB,w
  5840  06B4  00A0               	movwf	strncpy@from
  5841  06B5  3002               	movlw	2
  5842  06B6  00A1               	movwf	strncpy@size
  5843  06B7  3000               	movlw	0
  5844  06B8  00A2               	movwf	strncpy@size+1
  5845  06B9  30CE               	movlw	(low (applicationControlRGB@strBlueL| 0))& (0+255)
  5846  06BA  3194  24A1  3181   	fcall	_strncpy
  5847                           
  5848                           ;applicationcontrolRGB.h: 109: strBlueL[2]='\0';
  5849  06BD  0021               	movlb	1	; select bank1
  5850  06BE  01D0               	clrf	(applicationControlRGB@strBlueL^(0+128)+2)
  5851                           
  5852                           ;applicationcontrolRGB.h: 110: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5853  06BF  3030               	movlw	48
  5854  06C0  0020               	movlb	0	; select bank0
  5855  06C1  00A0               	movwf	memset@c
  5856  06C2  3000               	movlw	0
  5857  06C3  00A1               	movwf	memset@c+1
  5858  06C4  3005               	movlw	5
  5859  06C5  00A2               	movwf	memset@n
  5860  06C6  3000               	movlw	0
  5861  06C7  00A3               	movwf	memset@n+1
  5862  06C8  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5863  06C9  3192  22D4  3181   	fcall	_memset
  5864                           
  5865                           ;applicationcontrolRGB.h: 114: switch(IntegerSwitchNumber)
  5866  06CC  2F6D               	goto	l5490
  5867  06CD                     l5434:	
  5868                           ;applicationcontrolRGB.h: 118: case 0:
  5869                           
  5870                           ;applicationcontrolRGB.h: 117: switch(IntergerSwitchStatus){
  5871                           
  5872                           ;applicationcontrolRGB.h: 115: {
  5873                           ;applicationcontrolRGB.h: 116: case 9 :{
  5874                           
  5875                           
  5876                           ;applicationcontrolRGB.h: 119: start_PWM_Generation_For_BlueLed = start_PWM_Generation_F
      +                          or_GreenLed = start_PWM_Generation_For_RedLed = 0;
  5877  06CD  0022               	movlb	2	; select bank2
  5878  06CE  01CC               	clrf	_start_PWM_Generation_For_RedLed^(0+256)
  5879  06CF  01CD               	clrf	(_start_PWM_Generation_For_RedLed+1)^(0+256)
  5880  06D0  01CA               	clrf	_start_PWM_Generation_For_GreenLed^(0+256)
  5881  06D1  01CB               	clrf	(_start_PWM_Generation_For_GreenLed+1)^(0+256)
  5882  06D2  01C8               	clrf	_start_PWM_Generation_For_BlueLed^(0+256)
  5883  06D3  01C9               	clrf	(_start_PWM_Generation_For_BlueLed+1)^(0+256)
  5884                           
  5885                           ;applicationcontrolRGB.h: 120: PORTDbits.RD4 = 0;
  5886  06D4  0020               	movlb	0	; select bank0
  5887  06D5  120F               	bcf	15,4	;volatile
  5888                           
  5889                           ;applicationcontrolRGB.h: 121: PORTDbits.RD3 = 0;
  5890  06D6  118F               	bcf	15,3	;volatile
  5891                           
  5892                           ;applicationcontrolRGB.h: 122: PORTDbits.RD2 = 0;
  5893  06D7  110F               	bcf	15,2	;volatile
  5894                           
  5895                           ;applicationcontrolRGB.h: 123: break;
  5896  06D8  0008               	return
  5897  06D9                     l5442:	
  5898                           ;applicationcontrolRGB.h: 124: case 1:
  5899                           
  5900                           
  5901                           ;applicationcontrolRGB.h: 125: if(IntergerRedColorIntensity == 255)
  5902  06D9  0021               	movlb	1	; select bank1
  5903  06DA  0A6D               	incf	_IntergerRedColorIntensity^(0+128),w
  5904  06DB  046E               	iorwf	(_IntergerRedColorIntensity+1)^(0+128),w
  5905  06DC  1D03               	btfss	3,2
  5906  06DD  2EE1               	goto	l5446
  5907                           
  5908                           ;applicationcontrolRGB.h: 126: PORTDbits.RD4=1;
  5909  06DE  0020               	movlb	0	; select bank0
  5910  06DF  160F               	bsf	15,4	;volatile
  5911  06E0  2F06               	goto	l5456
  5912  06E1                     l5446:	
  5913                           
  5914                           ;applicationcontrolRGB.h: 128: else if(IntergerRedColorIntensity == 0)
  5915  06E1  0021               	movlb	1	; select bank1
  5916  06E2  086D               	movf	_IntergerRedColorIntensity^(0+128),w
  5917  06E3  046E               	iorwf	(_IntergerRedColorIntensity+1)^(0+128),w
  5918  06E4  1D03               	btfss	3,2
  5919  06E5  2EE9               	goto	l5450
  5920                           
  5921                           ;applicationcontrolRGB.h: 129: PORTDbits.RD4=0;
  5922  06E6  0020               	movlb	0	; select bank0
  5923  06E7  120F               	bcf	15,4	;volatile
  5924  06E8  2F06               	goto	l5456
  5925  06E9                     l5450:	
  5926                           
  5927                           ;applicationcontrolRGB.h: 130: else
  5928                           ;applicationcontrolRGB.h: 131: {
  5929                           ;applicationcontrolRGB.h: 132: start_PWM_Generation_For_RedLed = 1;
  5930  06E9  3001               	movlw	1
  5931  06EA  0022               	movlb	2	; select bank2
  5932  06EB  00CC               	movwf	_start_PWM_Generation_For_RedLed^(0+256)
  5933  06EC  3000               	movlw	0
  5934  06ED  00CD               	movwf	(_start_PWM_Generation_For_RedLed^(0+256)+1)
  5935                           
  5936                           ;applicationcontrolRGB.h: 133: Timer1H = hexadecimalToDecimal(strRedH);
  5937  06EE  30BF               	movlw	(low (applicationControlRGB@strRedH| 0))& (0+255)
  5938  06EF  3197  277E  3181   	fcall	_hexadecimalToDecimal
  5939  06F2  0020               	movlb	0	; select bank0
  5940  06F3  0827               	movf	?_hexadecimalToDecimal+1,w
  5941  06F4  0022               	movlb	2	; select bank2
  5942  06F5  00C7               	movwf	(_Timer1H+1)^(0+256)
  5943  06F6  0020               	movlb	0	; select bank0
  5944  06F7  0826               	movf	?_hexadecimalToDecimal,w
  5945  06F8  0022               	movlb	2	; select bank2
  5946  06F9  00C6               	movwf	_Timer1H^(0+256)
  5947                           
  5948                           ;applicationcontrolRGB.h: 134: Timer1L = hexadecimalToDecimal(strRedL);
  5949  06FA  30C2               	movlw	(low (applicationControlRGB@strRedL| 0))& (0+255)
  5950  06FB  3197  277E  3181   	fcall	_hexadecimalToDecimal
  5951  06FE  0020               	movlb	0	; select bank0
  5952  06FF  0827               	movf	?_hexadecimalToDecimal+1,w
  5953  0700  0022               	movlb	2	; select bank2
  5954  0701  00C5               	movwf	(_Timer1L+1)^(0+256)
  5955  0702  0020               	movlb	0	; select bank0
  5956  0703  0826               	movf	?_hexadecimalToDecimal,w
  5957  0704  0022               	movlb	2	; select bank2
  5958  0705  00C4               	movwf	_Timer1L^(0+256)
  5959  0706                     l5456:	
  5960                           
  5961                           ;applicationcontrolRGB.h: 136: }
  5962                           ;applicationcontrolRGB.h: 138: if(IntegerGreenColorIntensity == 255)
  5963  0706  0021               	movlb	1	; select bank1
  5964  0707  0A6B               	incf	_IntegerGreenColorIntensity^(0+128),w
  5965  0708  046C               	iorwf	(_IntegerGreenColorIntensity+1)^(0+128),w
  5966  0709  1D03               	btfss	3,2
  5967  070A  2F0E               	goto	l5460
  5968                           
  5969                           ;applicationcontrolRGB.h: 139: PORTDbits.RD3=1;
  5970  070B  0020               	movlb	0	; select bank0
  5971  070C  158F               	bsf	15,3	;volatile
  5972  070D  2F33               	goto	l5470
  5973  070E                     l5460:	
  5974                           
  5975                           ;applicationcontrolRGB.h: 140: else if(IntegerGreenColorIntensity == 0)
  5976  070E  0021               	movlb	1	; select bank1
  5977  070F  086B               	movf	_IntegerGreenColorIntensity^(0+128),w
  5978  0710  046C               	iorwf	(_IntegerGreenColorIntensity+1)^(0+128),w
  5979  0711  1D03               	btfss	3,2
  5980  0712  2F16               	goto	l5464
  5981                           
  5982                           ;applicationcontrolRGB.h: 141: PORTDbits.RD3=0;
  5983  0713  0020               	movlb	0	; select bank0
  5984  0714  118F               	bcf	15,3	;volatile
  5985  0715  2F33               	goto	l5470
  5986  0716                     l5464:	
  5987                           
  5988                           ;applicationcontrolRGB.h: 142: else
  5989                           ;applicationcontrolRGB.h: 143: {
  5990                           ;applicationcontrolRGB.h: 145: start_PWM_Generation_For_GreenLed = 1;
  5991  0716  3001               	movlw	1
  5992  0717  0022               	movlb	2	; select bank2
  5993  0718  00CA               	movwf	_start_PWM_Generation_For_GreenLed^(0+256)
  5994  0719  3000               	movlw	0
  5995  071A  00CB               	movwf	(_start_PWM_Generation_For_GreenLed^(0+256)+1)
  5996                           
  5997                           ;applicationcontrolRGB.h: 146: Timer3H = hexadecimalToDecimal(strGreenH);
  5998  071B  30C5               	movlw	(low (applicationControlRGB@strGreenH| 0))& (0+255)
  5999  071C  3197  277E  3181   	fcall	_hexadecimalToDecimal
  6000  071F  0020               	movlb	0	; select bank0
  6001  0720  0827               	movf	?_hexadecimalToDecimal+1,w
  6002  0721  0022               	movlb	2	; select bank2
  6003  0722  00C3               	movwf	(_Timer3H+1)^(0+256)
  6004  0723  0020               	movlb	0	; select bank0
  6005  0724  0826               	movf	?_hexadecimalToDecimal,w
  6006  0725  0022               	movlb	2	; select bank2
  6007  0726  00C2               	movwf	_Timer3H^(0+256)
  6008                           
  6009                           ;applicationcontrolRGB.h: 147: Timer3L = hexadecimalToDecimal(strGreenL);
  6010  0727  30C8               	movlw	(low (applicationControlRGB@strGreenL| 0))& (0+255)
  6011  0728  3197  277E  3181   	fcall	_hexadecimalToDecimal
  6012  072B  0020               	movlb	0	; select bank0
  6013  072C  0827               	movf	?_hexadecimalToDecimal+1,w
  6014  072D  0022               	movlb	2	; select bank2
  6015  072E  00C1               	movwf	(_Timer3L+1)^(0+256)
  6016  072F  0020               	movlb	0	; select bank0
  6017  0730  0826               	movf	?_hexadecimalToDecimal,w
  6018  0731  0022               	movlb	2	; select bank2
  6019  0732  00C0               	movwf	_Timer3L^(0+256)
  6020  0733                     l5470:	
  6021                           
  6022                           ;applicationcontrolRGB.h: 148: }
  6023                           ;applicationcontrolRGB.h: 152: if(IntegerBlueColorIntensity == 255)
  6024  0733  0A70               	incf	_IntegerBlueColorIntensity,w
  6025  0734  0471               	iorwf	_IntegerBlueColorIntensity+1,w
  6026  0735  1D03               	btfss	3,2
  6027  0736  2F3A               	goto	l5474
  6028                           
  6029                           ;applicationcontrolRGB.h: 153: PORTDbits.RD2=1;
  6030  0737  0020               	movlb	0	; select bank0
  6031  0738  150F               	bsf	15,2	;volatile
  6032  0739  0008               	return
  6033  073A                     l5474:	
  6034                           
  6035                           ;applicationcontrolRGB.h: 154: else if(IntegerBlueColorIntensity == 0)
  6036  073A  0870               	movf	_IntegerBlueColorIntensity,w
  6037  073B  0471               	iorwf	_IntegerBlueColorIntensity+1,w
  6038  073C  1D03               	btfss	3,2
  6039  073D  2F41               	goto	l5478
  6040                           
  6041                           ;applicationcontrolRGB.h: 155: PORTDbits.RD2=0;
  6042  073E  0020               	movlb	0	; select bank0
  6043  073F  110F               	bcf	15,2	;volatile
  6044  0740  0008               	return
  6045  0741                     l5478:	
  6046                           
  6047                           ;applicationcontrolRGB.h: 156: else{
  6048                           ;applicationcontrolRGB.h: 158: start_PWM_Generation_For_BlueLed = 1;
  6049  0741  3001               	movlw	1
  6050  0742  0022               	movlb	2	; select bank2
  6051  0743  00C8               	movwf	_start_PWM_Generation_For_BlueLed^(0+256)
  6052  0744  3000               	movlw	0
  6053  0745  00C9               	movwf	(_start_PWM_Generation_For_BlueLed^(0+256)+1)
  6054                           
  6055                           ;applicationcontrolRGB.h: 159: Timer5H = hexadecimalToDecimal(strBlueH);
  6056  0746  30CB               	movlw	(low (applicationControlRGB@strBlueH| 0))& (0+255)
  6057  0747  3197  277E  3181   	fcall	_hexadecimalToDecimal
  6058  074A  0020               	movlb	0	; select bank0
  6059  074B  0827               	movf	?_hexadecimalToDecimal+1,w
  6060  074C  0022               	movlb	2	; select bank2
  6061  074D  00BF               	movwf	(_Timer5H+1)^(0+256)
  6062  074E  0020               	movlb	0	; select bank0
  6063  074F  0826               	movf	?_hexadecimalToDecimal,w
  6064  0750  0022               	movlb	2	; select bank2
  6065  0751  00BE               	movwf	_Timer5H^(0+256)
  6066                           
  6067                           ;applicationcontrolRGB.h: 160: Timer5L = hexadecimalToDecimal(strBlueL);
  6068  0752  30CE               	movlw	(low (applicationControlRGB@strBlueL| 0))& (0+255)
  6069  0753  3197  277E         	fcall	_hexadecimalToDecimal
  6070  0755  0020               	movlb	0	; select bank0
  6071  0756  0827               	movf	?_hexadecimalToDecimal+1,w
  6072  0757  0022               	movlb	2	; select bank2
  6073  0758  00BD               	movwf	(_Timer5L+1)^(0+256)
  6074  0759  0020               	movlb	0	; select bank0
  6075  075A  0826               	movf	?_hexadecimalToDecimal,w
  6076  075B  0022               	movlb	2	; select bank2
  6077  075C  00BC               	movwf	_Timer5L^(0+256)
  6078                           
  6079                           ;applicationcontrolRGB.h: 165: }
  6080                           
  6081                           ;applicationcontrolRGB.h: 164: break;
  6082                           
  6083                           ;applicationcontrolRGB.h: 163: default:
  6084                           
  6085                           ;applicationcontrolRGB.h: 161: }
  6086                           ;applicationcontrolRGB.h: 162: break;
  6087  075D  0008               	return
  6088  075E                     l5486:	
  6089                           
  6090                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6091                           ; Switch size 1, requested type "space"
  6092                           ; Number of cases is 1, Range of values is 0 to 0
  6093                           ; switch strategies available:
  6094                           ; Name         Instructions Cycles
  6095                           ; simple_byte            4     3 (average)
  6096                           ; direct_byte            8     6 (fixed)
  6097                           ; jumptable            260     6 (fixed)
  6098                           ;	Chosen strategy is simple_byte
  6099  075E  0022               	movlb	2	; select bank2
  6100  075F  0833               	movf	(_IntergerSwitchStatus+1)^(0+256),w
  6101  0760  3A00               	xorlw	0	; case 0
  6102  0761  1903               	skipnz
  6103  0762  2F64               	goto	l6280
  6104  0763  2F78               	goto	l424
  6105  0764                     l6280:	
  6106                           
  6107                           ; Switch size 1, requested type "space"
  6108                           ; Number of cases is 2, Range of values is 0 to 1
  6109                           ; switch strategies available:
  6110                           ; Name         Instructions Cycles
  6111                           ; simple_byte            7     4 (average)
  6112                           ; direct_byte           10     6 (fixed)
  6113                           ; jumptable            260     6 (fixed)
  6114                           ;	Chosen strategy is simple_byte
  6115  0764  0832               	movf	_IntergerSwitchStatus^(0+256),w
  6116  0765  3A00               	xorlw	0	; case 0
  6117  0766  1903               	skipnz
  6118  0767  2ECD               	goto	l5434
  6119  0768  3A01               	xorlw	1	; case 1
  6120  0769  1903               	skipnz
  6121  076A  2ED9               	goto	l5442
  6122  076B  2F78               	goto	l424
  6123                           
  6124                           ;applicationcontrolRGB.h: 169: }
  6125                           ;applicationcontrolRGB.h: 176: }
  6126                           
  6127                           ;applicationcontrolRGB.h: 168: break;
  6128                           
  6129                           ;applicationcontrolRGB.h: 167: default:
  6130                           
  6131                           ;applicationcontrolRGB.h: 166: break;
  6132  076C  0008               	return
  6133  076D                     l5490:	
  6134                           
  6135                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6136                           ; Switch size 1, requested type "space"
  6137                           ; Number of cases is 1, Range of values is 0 to 0
  6138                           ; switch strategies available:
  6139                           ; Name         Instructions Cycles
  6140                           ; simple_byte            4     3 (average)
  6141                           ; direct_byte            8     6 (fixed)
  6142                           ; jumptable            260     6 (fixed)
  6143                           ;	Chosen strategy is simple_byte
  6144  076D  0022               	movlb	2	; select bank2
  6145  076E  0835               	movf	(_IntegerSwitchNumber+1)^(0+256),w
  6146  076F  3A00               	xorlw	0	; case 0
  6147  0770  1903               	skipnz
  6148  0771  2F73               	goto	l6282
  6149  0772  2F78               	goto	l424
  6150  0773                     l6282:	
  6151                           
  6152                           ; Switch size 1, requested type "space"
  6153                           ; Number of cases is 1, Range of values is 9 to 9
  6154                           ; switch strategies available:
  6155                           ; Name         Instructions Cycles
  6156                           ; simple_byte            4     3 (average)
  6157                           ; direct_byte           11     9 (fixed)
  6158                           ; jumptable            263     9 (fixed)
  6159                           ;	Chosen strategy is simple_byte
  6160  0773  0834               	movf	_IntegerSwitchNumber^(0+256),w
  6161  0774  3A09               	xorlw	9	; case 9
  6162  0775  1903               	skipnz
  6163  0776  2F5E               	goto	l5486
  6164  0777  2F78               	goto	l424
  6165  0778                     l424:	
  6166  0778  0008               	return
  6167  0779                     __end_of_applicationControlRGB:	
  6168                           
  6169                           	psect	text9
  6170  14A1                     __ptext9:	
  6171 ;; *************** function _strncpy *****************
  6172 ;; Defined at:
  6173 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncpy.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  to              1    wreg     PTR unsigned char 
  6176 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6177 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6178 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  6179 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6180 ;;  size            2    1[BANK0 ] unsigned int 
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;  to              1    5[BANK0 ] PTR unsigned char 
  6183 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6184 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6185 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  6186 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6187 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  1    wreg      PTR unsigned char 
  6190 ;; Registers used:
  6191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6197 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  6198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6200 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  6201 ;;Total ram usage:        6 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    2
  6204 ;; This function calls:
  6205 ;;		Nothing
  6206 ;; This function is called by:
  6207 ;;		_applicationControlRGB
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           
  6212                           ;psect for function _strncpy
  6213  14A1                     _strncpy:	
  6214                           
  6215                           ;incstack = 0
  6216                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
  6217                           ;strncpy@to stored from wreg
  6218  14A1  0020               	movlb	0	; select bank0
  6219  14A2  00A5               	movwf	strncpy@to
  6220  14A3  0825               	movf	strncpy@to,w
  6221  14A4  00A3               	movwf	??_strncpy
  6222  14A5  0823               	movf	??_strncpy,w
  6223  14A6  00A4               	movwf	strncpy@cp
  6224  14A7                     l4924:	
  6225  14A7  0821               	movf	strncpy@size,w
  6226  14A8  0422               	iorwf	strncpy@size+1,w
  6227  14A9  1903               	btfsc	3,2
  6228  14AA  2CC5               	goto	l4930
  6229  14AB  3001               	movlw	1
  6230  14AC  02A1               	subwf	strncpy@size,f
  6231  14AD  3000               	movlw	0
  6232  14AE  3BA2               	subwfb	strncpy@size+1,f
  6233  14AF  0824               	movf	strncpy@cp,w
  6234  14B0  0086               	movwf	6
  6235  14B1  0187               	clrf	7
  6236  14B2  0AA4               	incf	strncpy@cp,f
  6237  14B3  0820               	movf	strncpy@from,w
  6238  14B4  0084               	movwf	4
  6239  14B5  0185               	clrf	5
  6240  14B6  0AA0               	incf	strncpy@from,f
  6241  14B7  0800               	movf	0,w
  6242  14B8  3FC0               	movwi [0]fsr1
  6243  14B9  0889               	movf	9,f
  6244  14BA  1903               	btfsc	3,2
  6245  14BB  2CC5               	goto	l4930
  6246  14BC  2CA7               	goto	l4924
  6247  14BD                     l4926:	
  6248  14BD  0824               	movf	strncpy@cp,w
  6249  14BE  0086               	movwf	6
  6250  14BF  0187               	clrf	7
  6251  14C0  0181               	clrf	1
  6252  14C1  3001               	movlw	1
  6253  14C2  00A3               	movwf	??_strncpy
  6254  14C3  0823               	movf	??_strncpy,w
  6255  14C4  07A4               	addwf	strncpy@cp,f
  6256  14C5                     l4930:	
  6257  14C5  3001               	movlw	1
  6258  14C6  02A1               	subwf	strncpy@size,f
  6259  14C7  3000               	movlw	0
  6260  14C8  3BA2               	subwfb	strncpy@size+1,f
  6261  14C9  0A21               	incf	strncpy@size,w
  6262  14CA  1D03               	skipz
  6263  14CB  2CBD               	goto	l4926
  6264  14CC  0A22               	incf	strncpy@size+1,w
  6265  14CD  1903               	btfsc	3,2
  6266  14CE  0008               	return
  6267  14CF  2CBD               	goto	l4926
  6268  14D0                     __end_of_strncpy:	
  6269                           ;	Return value of _strncpy is never used
  6270                           
  6271                           
  6272                           	psect	text10
  6273  130B                     __ptext10:	
  6274 ;; *************** function _strcpy *****************
  6275 ;; Defined at:
  6276 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  to              1    wreg     PTR unsigned char 
  6279 ;;		 -> sendFinalBufferToGAteway(46), 
  6280 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  6281 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;  to              1    2[BANK0 ] PTR unsigned char 
  6284 ;;		 -> sendFinalBufferToGAteway(46), 
  6285 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  6286 ;;		 -> sendFinalBufferToGAteway(46), 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      PTR unsigned char 
  6289 ;; Registers used:
  6290 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6296 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0
  6297 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6299 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  6300 ;;Total ram usage:        4 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    2
  6303 ;; This function calls:
  6304 ;;		Nothing
  6305 ;; This function is called by:
  6306 ;;		_applicationControlRGB
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           
  6311                           ;psect for function _strcpy
  6312  130B                     _strcpy:	
  6313                           
  6314                           ;incstack = 0
  6315                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  6316                           ;strcpy@to stored from wreg
  6317  130B  0020               	movlb	0	; select bank0
  6318  130C  00A2               	movwf	strcpy@to
  6319  130D  0822               	movf	strcpy@to,w
  6320  130E  00A1               	movwf	??_strcpy
  6321  130F  0821               	movf	??_strcpy,w
  6322  1310  00A3               	movwf	strcpy@cp
  6323  1311                     l4840:	
  6324  1311  0823               	movf	strcpy@cp,w
  6325  1312  0086               	movwf	6
  6326  1313  3002               	movlw	2	; select bank4/5
  6327  1314  0087               	movwf	7
  6328  1315  0820               	movf	strcpy@from,w
  6329  1316  0084               	movwf	4
  6330  1317  3002               	movlw	2	; select bank4/5
  6331  1318  0085               	movwf	5
  6332  1319  0800               	movf	0,w
  6333  131A  3FC0               	movwi [0]fsr1
  6334  131B  0889               	movf	9,f
  6335  131C  1903               	btfsc	3,2
  6336  131D  0008               	return
  6337  131E  3001               	movlw	1
  6338  131F  00A1               	movwf	??_strcpy
  6339  1320  0821               	movf	??_strcpy,w
  6340  1321  07A3               	addwf	strcpy@cp,f
  6341  1322  3001               	movlw	1
  6342  1323  00A1               	movwf	??_strcpy
  6343  1324  0821               	movf	??_strcpy,w
  6344  1325  07A0               	addwf	strcpy@from,f
  6345  1326  2B11               	goto	l4840
  6346  1327                     __end_of_strcpy:	
  6347                           ;	Return value of _strcpy is never used
  6348                           
  6349                           
  6350                           	psect	text11
  6351  1424                     __ptext11:	
  6352 ;; *************** function _strcat *****************
  6353 ;; Defined at:
  6354 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  to              1    wreg     PTR unsigned char 
  6357 ;;		 -> sendFinalBufferToGAteway(46), 
  6358 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  6359 ;;		 -> ChildLockbuffer(2), switchstatusbuffer(2), switchNumberBuffer(3), copymainReceivedDataBuffer(32), 
  6360 ;;		 -> STR_10(5), STR_9(2), STR_8(2), STR_7(2), 
  6361 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(7), 
  6362 ;;		 -> STR_2(2), STR_1(2), NULL(0), 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  to              1    4[BANK0 ] PTR unsigned char 
  6365 ;;		 -> sendFinalBufferToGAteway(46), 
  6366 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  6367 ;;		 -> sendFinalBufferToGAteway(46), 
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      PTR unsigned char 
  6370 ;; Registers used:
  6371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6377 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  6378 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6380 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  6381 ;;Total ram usage:        5 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    2
  6384 ;; This function calls:
  6385 ;;		Nothing
  6386 ;; This function is called by:
  6387 ;;		_applicationControlRGB
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           
  6392                           ;psect for function _strcat
  6393  1424                     _strcat:	
  6394                           
  6395                           ;incstack = 0
  6396                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  6397                           ;strcat@to stored from wreg
  6398  1424  0020               	movlb	0	; select bank0
  6399  1425  00A4               	movwf	strcat@to
  6400  1426  0824               	movf	strcat@to,w
  6401  1427  00A2               	movwf	??_strcat
  6402  1428  0822               	movf	??_strcat,w
  6403  1429  00A3               	movwf	strcat@cp
  6404  142A                     l4846:	
  6405  142A  0823               	movf	strcat@cp,w
  6406  142B  0086               	movwf	6
  6407  142C  3002               	movlw	2	; select bank4/5
  6408  142D  0087               	movwf	7
  6409  142E  0801               	movf	1,w
  6410  142F  1903               	btfsc	3,2
  6411  1430  2C3E               	goto	l4852
  6412  1431  3001               	movlw	1
  6413  1432  00A2               	movwf	??_strcat
  6414  1433  0822               	movf	??_strcat,w
  6415  1434  07A3               	addwf	strcat@cp,f
  6416  1435  2C2A               	goto	l4846
  6417  1436                     l4848:	
  6418  1436  3001               	movlw	1
  6419  1437  00A2               	movwf	??_strcat
  6420  1438  0822               	movf	??_strcat,w
  6421  1439  07A3               	addwf	strcat@cp,f
  6422  143A  3001               	movlw	1
  6423  143B  07A0               	addwf	strcat@from,f
  6424  143C  3000               	movlw	0
  6425  143D  3DA1               	addwfc	strcat@from+1,f
  6426  143E                     l4852:	
  6427  143E  0823               	movf	strcat@cp,w
  6428  143F  0086               	movwf	6
  6429  1440  3002               	movlw	2	; select bank4/5
  6430  1441  0087               	movwf	7
  6431  1442  0820               	movf	strcat@from,w
  6432  1443  0084               	movwf	4
  6433  1444  0821               	movf	strcat@from+1,w
  6434  1445  0085               	movwf	5
  6435  1446  0800               	movf	0,w	;code access
  6436  1447  3FC0               	movwi [0]fsr1
  6437  1448  0889               	movf	9,f
  6438  1449  1903               	btfsc	3,2
  6439  144A  0008               	return
  6440  144B  2C36               	goto	l4848
  6441  144C                     __end_of_strcat:	
  6442                           ;	Return value of _strcat is never used
  6443                           
  6444                           
  6445                           	psect	text12
  6446  08F8                     __ptext12:	
  6447 ;; *************** function _sprintf *****************
  6448 ;; Defined at:
  6449 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;  sp              1    wreg     PTR unsigned char 
  6452 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6453 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  6454 ;;		 -> STR_13(3), STR_12(3), STR_11(3), 
  6455 ;; Auto vars:     Size  Location     Type
  6456 ;;  sp              1   24[BANK0 ] PTR unsigned char 
  6457 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6458 ;;  idx             1   19[BANK0 ] unsigned char 
  6459 ;;  tmpval          4    0        struct .
  6460 ;;  val             2   21[BANK0 ] unsigned int 
  6461 ;;  cp              2    0        PTR const unsigned char 
  6462 ;;  len             2    0        unsigned int 
  6463 ;;  c               1   25[BANK0 ] char 
  6464 ;;  prec            1   23[BANK0 ] char 
  6465 ;;  ap              1   20[BANK0 ] PTR void [1]
  6466 ;;		 -> ?_sprintf(2), 
  6467 ;;  flag            1   18[BANK0 ] unsigned char 
  6468 ;; Return value:  Size  Location     Type
  6469 ;;                  2    8[BANK0 ] int 
  6470 ;; Registers used:
  6471 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6477 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  6478 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0
  6479 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  6480 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0
  6481 ;;Total ram usage:       18 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    3
  6484 ;; This function calls:
  6485 ;;		___lwdiv
  6486 ;; This function is called by:
  6487 ;;		_applicationControlRGB
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           
  6492                           ;psect for function _sprintf
  6493  08F8                     _sprintf:	
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6497                           ;sprintf@sp stored from wreg
  6498  08F8  0020               	movlb	0	; select bank0
  6499  08F9  00B8               	movwf	sprintf@sp
  6500                           
  6501                           ;doprnt.c: 494: va_list ap;
  6502                           ;doprnt.c: 499: signed char c;
  6503                           ;doprnt.c: 506: signed char prec;
  6504                           ;doprnt.c: 508: unsigned char flag;
  6505                           ;doprnt.c: 523: union {
  6506                           ;doprnt.c: 524: unsigned long vd;
  6507                           ;doprnt.c: 525: double integ;
  6508                           ;doprnt.c: 526: } tmpval;
  6509                           ;doprnt.c: 528: unsigned int val;
  6510                           ;doprnt.c: 529: unsigned len;
  6511                           ;doprnt.c: 530: const char * cp;
  6512                           ;doprnt.c: 533: *ap = __va_start();
  6513  08FA  302A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6514  08FB  00AE               	movwf	??_sprintf
  6515  08FC  082E               	movf	??_sprintf,w
  6516  08FD  00B4               	movwf	sprintf@ap
  6517  08FE                     l4910:	
  6518                           ;doprnt.c: 536: while(c = *f++) {
  6519                           
  6520  08FE  0829               	movf	sprintf@f+1,w
  6521  08FF  00AF               	movwf	??_sprintf+1
  6522  0900  0828               	movf	sprintf@f,w
  6523  0901  00AE               	movwf	??_sprintf
  6524  0902  0AA8               	incf	sprintf@f,f
  6525  0903  1903               	skipnz
  6526  0904  0AA9               	incf	sprintf@f+1,f
  6527  0905  082E               	movf	??_sprintf,w
  6528  0906  0084               	movwf	4
  6529  0907  082F               	movf	??_sprintf+1,w
  6530  0908  0085               	movwf	5
  6531  0909  0800               	movf	0,w	;code access
  6532  090A  00B0               	movwf	??_sprintf+2
  6533  090B  0830               	movf	??_sprintf+2,w
  6534  090C  00B9               	movwf	sprintf@c
  6535  090D  0839               	movf	sprintf@c,w
  6536  090E  1903               	btfsc	3,2
  6537  090F  29A6               	goto	l4912
  6538                           
  6539                           ;doprnt.c: 538: if(c != '%')
  6540  0910  3025               	movlw	37
  6541  0911  0639               	xorwf	sprintf@c,w
  6542  0912  1903               	btfsc	3,2
  6543  0913  2920               	goto	l4876
  6544                           
  6545                           ;doprnt.c: 540: {
  6546                           ;doprnt.c: 541: ((*sp++ = (c)));
  6547  0914  0839               	movf	sprintf@c,w
  6548  0915  00AE               	movwf	??_sprintf
  6549  0916  0838               	movf	sprintf@sp,w
  6550  0917  0086               	movwf	6
  6551  0918  0187               	clrf	7
  6552  0919  082E               	movf	??_sprintf,w
  6553  091A  0081               	movwf	1
  6554  091B  3001               	movlw	1
  6555  091C  00AE               	movwf	??_sprintf
  6556  091D  082E               	movf	??_sprintf,w
  6557  091E  07B8               	addwf	sprintf@sp,f
  6558                           
  6559                           ;doprnt.c: 542: continue;
  6560  091F  28FE               	goto	l4910
  6561  0920                     l4876:	
  6562                           
  6563                           ;doprnt.c: 543: }
  6564                           ;doprnt.c: 548: flag = 0;
  6565  0920  01B2               	clrf	sprintf@flag
  6566                           
  6567                           ;doprnt.c: 822: }
  6568                           
  6569                           ;doprnt.c: 813: continue;
  6570                           
  6571                           ;doprnt.c: 802: default:
  6572                           
  6573                           ;doprnt.c: 718: case 'x':
  6574                           ;doprnt.c: 723: break;
  6575                           
  6576                           ;doprnt.c: 712: case 'X':
  6577                           
  6578                           ;doprnt.c: 638: goto alldone;
  6579                           
  6580                           ;doprnt.c: 637: case 0:
  6581                           
  6582                           ;doprnt.c: 635: switch(c = *f++) {
  6583  0921  0829               	movf	sprintf@f+1,w
  6584  0922  00AF               	movwf	??_sprintf+1
  6585  0923  0828               	movf	sprintf@f,w
  6586  0924  00AE               	movwf	??_sprintf
  6587  0925  0AA8               	incf	sprintf@f,f
  6588  0926  1903               	skipnz
  6589  0927  0AA9               	incf	sprintf@f+1,f
  6590  0928  082E               	movf	??_sprintf,w
  6591  0929  0084               	movwf	4
  6592  092A  082F               	movf	??_sprintf+1,w
  6593  092B  0085               	movwf	5
  6594  092C  0800               	movf	0,w	;code access
  6595  092D  00B9               	movwf	sprintf@c
  6596                           
  6597                           ; Switch size 1, requested type "space"
  6598                           ; Number of cases is 3, Range of values is 0 to 120
  6599                           ; switch strategies available:
  6600                           ; Name         Instructions Cycles
  6601                           ; simple_byte           10     6 (average)
  6602                           ; direct_byte          248     6 (fixed)
  6603                           ; jumptable            260     6 (fixed)
  6604                           ;	Chosen strategy is simple_byte
  6605  092E  3A00               	xorlw	0	; case 0
  6606  092F  1903               	skipnz
  6607  0930  29A6               	goto	l4912
  6608  0931  3A58               	xorlw	88	; case 88
  6609  0932  1903               	skipnz
  6610  0933  2938               	goto	l4882
  6611  0934  3A20               	xorlw	32	; case 120
  6612  0935  1903               	skipnz
  6613  0936  2938               	goto	l4882
  6614  0937  28FE               	goto	l4910
  6615  0938                     l4882:	
  6616                           
  6617                           ;doprnt.c: 1273: {
  6618                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6619  0938  0834               	movf	sprintf@ap,w
  6620  0939  0086               	movwf	6
  6621  093A  0187               	clrf	7
  6622  093B  3F40               	moviw [0]fsr1
  6623  093C  00B5               	movwf	sprintf@val
  6624  093D  3F41               	moviw [1]fsr1
  6625  093E  00B6               	movwf	sprintf@val+1
  6626  093F  3002               	movlw	2
  6627  0940  00AE               	movwf	??_sprintf
  6628  0941  082E               	movf	??_sprintf,w
  6629  0942  07B4               	addwf	sprintf@ap,f
  6630                           
  6631                           ;doprnt.c: 1287: }
  6632                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6633  0943  01B9               	clrf	sprintf@c
  6634  0944  0AB9               	incf	sprintf@c,f
  6635  0945  3004               	movlw	4
  6636  0946  0639               	xorwf	sprintf@c,w
  6637  0947  1903               	btfsc	3,2
  6638  0948  2968               	goto	l4898
  6639  0949                     l4892:	
  6640                           
  6641                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6642  0949  0839               	movf	sprintf@c,w
  6643  094A  00AE               	movwf	??_sprintf
  6644  094B  01AF               	clrf	??_sprintf+1
  6645  094C  35AE               	lslf	??_sprintf,f
  6646  094D  0DAF               	rlf	??_sprintf+1,f
  6647  094E  3000               	movlw	low (_hexpowers| (0+32768))
  6648  094F  072E               	addwf	??_sprintf,w
  6649  0950  0084               	movwf	4
  6650  0951  3098               	movlw	high (_hexpowers| (0+32768))
  6651  0952  3D2F               	addwfc	??_sprintf+1,w
  6652  0953  0085               	movwf	5
  6653  0954  3F00               	moviw [0]fsr0
  6654  0955  00B0               	movwf	??_sprintf+2
  6655  0956  3F01               	moviw [1]fsr0
  6656  0957  00B1               	movwf	??_sprintf+3
  6657  0958  0831               	movf	??_sprintf+3,w
  6658  0959  0236               	subwf	sprintf@val+1,w
  6659  095A  1D03               	skipz
  6660  095B  295E               	goto	u4965
  6661  095C  0830               	movf	??_sprintf+2,w
  6662  095D  0235               	subwf	sprintf@val,w
  6663  095E                     u4965:	
  6664  095E  1C03               	btfss	3,0
  6665  095F  2968               	goto	l4898
  6666                           
  6667                           ;doprnt.c: 1318: break;
  6668  0960  3001               	movlw	1
  6669  0961  00AE               	movwf	??_sprintf
  6670  0962  082E               	movf	??_sprintf,w
  6671  0963  07B9               	addwf	sprintf@c,f
  6672  0964  3004               	movlw	4
  6673  0965  0639               	xorwf	sprintf@c,w
  6674  0966  1D03               	btfss	3,2
  6675  0967  2949               	goto	l4892
  6676  0968                     l4898:	
  6677                           
  6678                           ;doprnt.c: 1422: {
  6679                           ;doprnt.c: 1469: }
  6680                           ;doprnt.c: 1472: prec = c;
  6681  0968  0839               	movf	sprintf@c,w
  6682  0969  00AE               	movwf	??_sprintf
  6683  096A  082E               	movf	??_sprintf,w
  6684  096B  00B7               	movwf	sprintf@prec
  6685  096C                     l4908:	
  6686                           ;doprnt.c: 1474: while(prec--) {
  6687                           
  6688  096C  30FF               	movlw	255
  6689  096D  00AE               	movwf	??_sprintf
  6690  096E  082E               	movf	??_sprintf,w
  6691  096F  07B7               	addwf	sprintf@prec,f
  6692  0970  0A37               	incf	sprintf@prec,w
  6693  0971  1903               	btfsc	3,2
  6694  0972  28FE               	goto	l4910
  6695                           
  6696                           ;doprnt.c: 1478: {
  6697                           ;doprnt.c: 1499: {
  6698                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6699  0973  0837               	movf	sprintf@prec,w
  6700  0974  00AE               	movwf	??_sprintf
  6701  0975  01AF               	clrf	??_sprintf+1
  6702  0976  35AE               	lslf	??_sprintf,f
  6703  0977  0DAF               	rlf	??_sprintf+1,f
  6704  0978  3000               	movlw	low (_hexpowers| (0+32768))
  6705  0979  072E               	addwf	??_sprintf,w
  6706  097A  0084               	movwf	4
  6707  097B  3098               	movlw	high (_hexpowers| (0+32768))
  6708  097C  3D2F               	addwfc	??_sprintf+1,w
  6709  097D  0085               	movwf	5
  6710  097E  3F00               	moviw [0]fsr0
  6711  097F  00A0               	movwf	___lwdiv@divisor
  6712  0980  3F01               	moviw [1]fsr0
  6713  0981  00A1               	movwf	___lwdiv@divisor+1
  6714  0982  0836               	movf	sprintf@val+1,w
  6715  0983  00A3               	movwf	___lwdiv@dividend+1
  6716  0984  0835               	movf	sprintf@val,w
  6717  0985  00A2               	movwf	___lwdiv@dividend
  6718  0986  3196  2629  3188   	fcall	___lwdiv
  6719  0989  0020               	movlb	0	; select bank0
  6720  098A  0820               	movf	?___lwdiv,w
  6721  098B  390F               	andlw	15
  6722  098C  00B0               	movwf	??_sprintf+2
  6723  098D  0830               	movf	??_sprintf+2,w
  6724  098E  00B3               	movwf	sprintf@idx
  6725                           
  6726                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  6727  098F  0833               	movf	sprintf@idx,w
  6728  0990  3E08               	addlw	low (STR_20| (0+32768))
  6729  0991  0084               	movwf	4
  6730  0992  3098               	movlw	high (STR_20| (0+32768))
  6731  0993  1803               	skipnc
  6732  0994  3E01               	addlw	1
  6733  0995  0085               	movwf	5
  6734  0996  0800               	movf	0,w	;code access
  6735  0997  00AE               	movwf	??_sprintf
  6736  0998  082E               	movf	??_sprintf,w
  6737  0999  00B9               	movwf	sprintf@c
  6738                           
  6739                           ;doprnt.c: 1508: }
  6740                           ;doprnt.c: 1523: }
  6741                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6742  099A  0839               	movf	sprintf@c,w
  6743  099B  00AE               	movwf	??_sprintf
  6744  099C  0838               	movf	sprintf@sp,w
  6745  099D  0086               	movwf	6
  6746  099E  0187               	clrf	7
  6747  099F  082E               	movf	??_sprintf,w
  6748  09A0  0081               	movwf	1
  6749  09A1  3001               	movlw	1
  6750  09A2  00AE               	movwf	??_sprintf
  6751  09A3  082E               	movf	??_sprintf,w
  6752  09A4  07B8               	addwf	sprintf@sp,f
  6753  09A5  296C               	goto	l4908
  6754  09A6                     l4912:	
  6755                           ;doprnt.c: 1525: }
  6756                           ;doprnt.c: 1533: }
  6757                           ;doprnt.c: 1535: alldone:
  6758                           
  6759                           
  6760                           ;doprnt.c: 1538: *sp = 0;
  6761  09A6  0838               	movf	sprintf@sp,w
  6762  09A7  0086               	movwf	6
  6763  09A8  0187               	clrf	7
  6764  09A9  0181               	clrf	1
  6765  09AA  0008               	return
  6766  09AB                     __end_of_sprintf:	
  6767                           ;doprnt.c: 1540: return 0;
  6768                           ;	Return value of _sprintf is never used
  6769                           
  6770                           
  6771                           	psect	text13
  6772  1629                     __ptext13:	
  6773 ;; *************** function ___lwdiv *****************
  6774 ;; Defined at:
  6775 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  divisor         2    0[BANK0 ] unsigned int 
  6778 ;;  dividend        2    2[BANK0 ] unsigned int 
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  quotient        2    6[BANK0 ] unsigned int 
  6781 ;;  counter         1    5[BANK0 ] unsigned char 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  2    0[BANK0 ] unsigned int 
  6784 ;; Registers used:
  6785 ;;		wreg, status,2, status,0
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6791 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  6792 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  6793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6794 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  6795 ;;Total ram usage:        8 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    2
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_sprintf
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           
  6806                           ;psect for function ___lwdiv
  6807  1629                     ___lwdiv:	
  6808                           
  6809                           ;incstack = 0
  6810                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6811  1629  0020               	movlb	0	; select bank0
  6812  162A  01A6               	clrf	___lwdiv@quotient
  6813  162B  01A7               	clrf	___lwdiv@quotient+1
  6814  162C  0820               	movf	___lwdiv@divisor,w
  6815  162D  0421               	iorwf	___lwdiv@divisor+1,w
  6816  162E  1903               	btfsc	3,2
  6817  162F  2E59               	goto	l4786
  6818  1630  01A5               	clrf	___lwdiv@counter
  6819  1631  0AA5               	incf	___lwdiv@counter,f
  6820  1632                     l4774:	
  6821  1632  1BA1               	btfsc	___lwdiv@divisor+1,7
  6822  1633  2E3E               	goto	l4776
  6823  1634  3001               	movlw	1
  6824  1635                     u4745:	
  6825  1635  35A0               	lslf	___lwdiv@divisor,f
  6826  1636  0DA1               	rlf	___lwdiv@divisor+1,f
  6827  1637  0B89               	decfsz	9,f
  6828  1638  2E35               	goto	u4745
  6829  1639  3001               	movlw	1
  6830  163A  00A4               	movwf	??___lwdiv
  6831  163B  0824               	movf	??___lwdiv,w
  6832  163C  07A5               	addwf	___lwdiv@counter,f
  6833  163D  2E32               	goto	l4774
  6834  163E                     l4776:	
  6835  163E  3001               	movlw	1
  6836  163F                     u4765:	
  6837  163F  35A6               	lslf	___lwdiv@quotient,f
  6838  1640  0DA7               	rlf	___lwdiv@quotient+1,f
  6839  1641  0B89               	decfsz	9,f
  6840  1642  2E3F               	goto	u4765
  6841  1643  0821               	movf	___lwdiv@divisor+1,w
  6842  1644  0223               	subwf	___lwdiv@dividend+1,w
  6843  1645  1D03               	skipz
  6844  1646  2E49               	goto	u4775
  6845  1647  0820               	movf	___lwdiv@divisor,w
  6846  1648  0222               	subwf	___lwdiv@dividend,w
  6847  1649                     u4775:	
  6848  1649  1C03               	skipc
  6849  164A  2E50               	goto	l4782
  6850  164B  0820               	movf	___lwdiv@divisor,w
  6851  164C  02A2               	subwf	___lwdiv@dividend,f
  6852  164D  0821               	movf	___lwdiv@divisor+1,w
  6853  164E  3BA3               	subwfb	___lwdiv@dividend+1,f
  6854  164F  1426               	bsf	___lwdiv@quotient,0
  6855  1650                     l4782:	
  6856  1650  3001               	movlw	1
  6857  1651                     u4785:	
  6858  1651  36A1               	lsrf	___lwdiv@divisor+1,f
  6859  1652  0CA0               	rrf	___lwdiv@divisor,f
  6860  1653  0B89               	decfsz	9,f
  6861  1654  2E51               	goto	u4785
  6862  1655  3001               	movlw	1
  6863  1656  02A5               	subwf	___lwdiv@counter,f
  6864  1657  1D03               	btfss	3,2
  6865  1658  2E3E               	goto	l4776
  6866  1659                     l4786:	
  6867  1659  0827               	movf	___lwdiv@quotient+1,w
  6868  165A  00A1               	movwf	?___lwdiv+1
  6869  165B  0826               	movf	___lwdiv@quotient,w
  6870  165C  00A0               	movwf	?___lwdiv
  6871  165D  0008               	return
  6872  165E                     __end_of___lwdiv:	
  6873                           
  6874                           	psect	text14
  6875  1381                     __ptext14:	
  6876 ;; *************** function _sendAcknowledgmentRGB *****************
  6877 ;; Defined at:
  6878 ;;		line 1299 in file "main.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  currentState    1    wreg     PTR unsigned char 
  6881 ;;		 -> sendFinalBufferToGAteway(46), 
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;  currentState    1    3[BANK0 ] PTR unsigned char 
  6884 ;;		 -> sendFinalBufferToGAteway(46), 
  6885 ;;  Tx_count        2    1[BANK0 ] int 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  6896 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  6897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6898 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  6899 ;;Total ram usage:        4 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    2
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		_applicationControlRGB
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           
  6910                           ;psect for function _sendAcknowledgmentRGB
  6911  1381                     _sendAcknowledgmentRGB:	
  6912                           
  6913                           ;incstack = 0
  6914                           ; Regs used in _sendAcknowledgmentRGB: [wreg+fsr1l+fsr1h+status,2+status,0]
  6915                           ;sendAcknowledgmentRGB@currentStateBufferRGB stored from wreg
  6916  1381  0020               	movlb	0	; select bank0
  6917  1382  00A3               	movwf	sendAcknowledgmentRGB@currentStateBufferRGB
  6918                           
  6919                           ;main.c: 1300: int Tx_count=0;
  6920  1383  01A1               	clrf	sendAcknowledgmentRGB@Tx_count
  6921  1384  01A2               	clrf	sendAcknowledgmentRGB@Tx_count+1
  6922  1385                     l626:	
  6923                           ;main.c: 1301: while(*currentStateBufferRGB != (0))
  6924                           
  6925  1385  0823               	movf	sendAcknowledgmentRGB@currentStateBufferRGB,w
  6926  1386  0086               	movwf	6
  6927  1387  3002               	movlw	2	; select bank4/5
  6928  1388  0087               	movwf	7
  6929  1389  0801               	movf	1,w
  6930  138A  1903               	btfsc	3,2
  6931  138B  0008               	return
  6932  138C                     l628:	
  6933                           ;main.c: 1302: {
  6934                           ;main.c: 1303: while (!TX1STAbits.TRMT);
  6935                           
  6936  138C  0023               	movlb	3	; select bank3
  6937  138D  1C9E               	btfss	30,1	;volatile
  6938  138E  2B8C               	goto	l628
  6939                           
  6940                           ;main.c: 1304: TX1REG = *currentStateBufferRGB;
  6941  138F  0020               	movlb	0	; select bank0
  6942  1390  0823               	movf	sendAcknowledgmentRGB@currentStateBufferRGB,w
  6943  1391  0086               	movwf	6
  6944  1392  3002               	movlw	2	; select bank4/5
  6945  1393  0087               	movwf	7
  6946  1394  0801               	movf	1,w
  6947  1395  0023               	movlb	3	; select bank3
  6948  1396  009A               	movwf	26	;volatile
  6949                           
  6950                           ;main.c: 1305: *currentStateBufferRGB++;
  6951  1397  3001               	movlw	1
  6952  1398  0020               	movlb	0	; select bank0
  6953  1399  00A0               	movwf	??_sendAcknowledgmentRGB
  6954  139A  0820               	movf	??_sendAcknowledgmentRGB,w
  6955  139B  07A3               	addwf	sendAcknowledgmentRGB@currentStateBufferRGB,f
  6956                           
  6957                           ;main.c: 1306: Tx_count++;
  6958  139C  3001               	movlw	1
  6959  139D  07A1               	addwf	sendAcknowledgmentRGB@Tx_count,f
  6960  139E  3000               	movlw	0
  6961  139F  3DA2               	addwfc	sendAcknowledgmentRGB@Tx_count+1,f
  6962  13A0  2B85               	goto	l626
  6963  13A1                     __end_of_sendAcknowledgmentRGB:	
  6964                           
  6965                           	psect	text15
  6966  12D4                     __ptext15:	
  6967 ;; *************** function _memset *****************
  6968 ;; Defined at:
  6969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;  p1              1    wreg     PTR void 
  6972 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6973 ;;  c               2    0[BANK0 ] int 
  6974 ;;  n               2    2[BANK0 ] unsigned int 
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;  p1              1    6[BANK0 ] PTR void 
  6977 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6978 ;;  p               1    5[BANK0 ] PTR unsigned char 
  6979 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  1    wreg      PTR void 
  6982 ;; Registers used:
  6983 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6989 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  6990 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6992 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  6993 ;;Total ram usage:        7 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    2
  6996 ;; This function calls:
  6997 ;;		Nothing
  6998 ;; This function is called by:
  6999 ;;		_applicationControlRGB
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           
  7004                           ;psect for function _memset
  7005  12D4                     _memset:	
  7006                           
  7007                           ;incstack = 0
  7008                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7009                           ;memset@p1 stored from wreg
  7010  12D4  0020               	movlb	0	; select bank0
  7011  12D5  00A6               	movwf	memset@p1
  7012  12D6  0826               	movf	memset@p1,w
  7013  12D7  00A4               	movwf	??_memset
  7014  12D8  0824               	movf	??_memset,w
  7015  12D9  00A5               	movwf	memset@p
  7016  12DA                     l4938:	
  7017  12DA  3001               	movlw	1
  7018  12DB  02A2               	subwf	memset@n,f
  7019  12DC  3000               	movlw	0
  7020  12DD  3BA3               	subwfb	memset@n+1,f
  7021  12DE  0A22               	incf	memset@n,w
  7022  12DF  1903               	btfsc	3,2
  7023  12E0  0A23               	incf	memset@n+1,w
  7024  12E1  1903               	btfsc	3,2
  7025  12E2  0008               	return
  7026  12E3  0820               	movf	memset@c,w
  7027  12E4  00A4               	movwf	??_memset
  7028  12E5  0825               	movf	memset@p,w
  7029  12E6  0086               	movwf	6
  7030  12E7  0187               	clrf	7
  7031  12E8  0824               	movf	??_memset,w
  7032  12E9  0081               	movwf	1
  7033  12EA  3001               	movlw	1
  7034  12EB  00A4               	movwf	??_memset
  7035  12EC  0824               	movf	??_memset,w
  7036  12ED  07A5               	addwf	memset@p,f
  7037  12EE  2ADA               	goto	l4938
  7038  12EF                     __end_of_memset:	
  7039                           ;	Return value of _memset is never used
  7040                           
  7041                           
  7042                           	psect	text16
  7043  177E                     __ptext16:	
  7044 ;; *************** function _hexadecimalToDecimal *****************
  7045 ;; Defined at:
  7046 ;;		line 1251 in file "main.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;  hexVal          1    wreg     PTR unsigned char 
  7049 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  7050 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;  hexVal          1   18[BANK0 ] PTR unsigned char 
  7053 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  7054 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  7055 ;;  i               2   16[BANK0 ] int 
  7056 ;;  base            2   14[BANK0 ] int 
  7057 ;;  dec_val         2   12[BANK0 ] int 
  7058 ;;  len             2   10[BANK0 ] int 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  2    6[BANK0 ] int 
  7061 ;; Registers used:
  7062 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7068 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7069 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0
  7070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  7071 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0
  7072 ;;Total ram usage:       13 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    3
  7075 ;; This function calls:
  7076 ;;		___wmul
  7077 ;;		_strlen
  7078 ;; This function is called by:
  7079 ;;		_applicationControlRGB
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           
  7084                           ;psect for function _hexadecimalToDecimal
  7085  177E                     _hexadecimalToDecimal:	
  7086                           
  7087                           ;incstack = 0
  7088                           ; Regs used in _hexadecimalToDecimal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7089                           ;hexadecimalToDecimal@hexVal stored from wreg
  7090  177E  0020               	movlb	0	; select bank0
  7091  177F  00B2               	movwf	hexadecimalToDecimal@hexVal
  7092                           
  7093                           ;main.c: 1253: int len = strlen(hexVal);
  7094  1780  0832               	movf	hexadecimalToDecimal@hexVal,w
  7095  1781  00A0               	movwf	strlen@s
  7096  1782  3000               	movlw	0
  7097  1783  00A1               	movwf	strlen@s+1
  7098  1784  3193  2362  3197   	fcall	_strlen
  7099  1787  0020               	movlb	0	; select bank0
  7100  1788  0821               	movf	?_strlen+1,w
  7101  1789  00AB               	movwf	hexadecimalToDecimal@len+1
  7102  178A  0820               	movf	?_strlen,w
  7103  178B  00AA               	movwf	hexadecimalToDecimal@len
  7104                           
  7105                           ;main.c: 1256: int base = 1;
  7106  178C  3001               	movlw	1
  7107  178D  00AE               	movwf	hexadecimalToDecimal@base
  7108  178E  3000               	movlw	0
  7109  178F  00AF               	movwf	hexadecimalToDecimal@base+1
  7110                           
  7111                           ;main.c: 1258: int dec_val = 0;
  7112  1790  01AC               	clrf	hexadecimalToDecimal@dec_val
  7113  1791  01AD               	clrf	hexadecimalToDecimal@dec_val+1
  7114                           
  7115                           ;main.c: 1261: for (int i=len-1; i>=0; i--)
  7116  1792  082A               	movf	hexadecimalToDecimal@len,w
  7117  1793  3EFF               	addlw	255
  7118  1794  00B0               	movwf	hexadecimalToDecimal@i
  7119  1795  30FF               	movlw	255
  7120  1796  3D2B               	addwfc	hexadecimalToDecimal@len+1,w
  7121  1797  00B1               	movwf	hexadecimalToDecimal@i+1
  7122  1798  1BB1               	btfsc	hexadecimalToDecimal@i+1,7
  7123  1799  2FFB               	goto	l4972
  7124  179A                     l4952:	
  7125                           
  7126                           ;main.c: 1262: {
  7127                           ;main.c: 1266: if (hexVal[i]>='0' && hexVal[i]<='9')
  7128  179A  0830               	movf	hexadecimalToDecimal@i,w
  7129  179B  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7130  179C  00A8               	movwf	??_hexadecimalToDecimal
  7131  179D  0828               	movf	??_hexadecimalToDecimal,w
  7132  179E  0086               	movwf	6
  7133  179F  0187               	clrf	7
  7134  17A0  3030               	movlw	48
  7135  17A1  0201               	subwf	1,w
  7136  17A2  1C03               	skipc
  7137  17A3  2FB7               	goto	l4960
  7138  17A4  0830               	movf	hexadecimalToDecimal@i,w
  7139  17A5  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7140  17A6  00A8               	movwf	??_hexadecimalToDecimal
  7141  17A7  0828               	movf	??_hexadecimalToDecimal,w
  7142  17A8  0086               	movwf	6
  7143  17A9  0187               	clrf	7
  7144  17AA  303A               	movlw	58
  7145  17AB  0201               	subwf	1,w
  7146  17AC  1803               	skipnc
  7147  17AD  2FB7               	goto	l4960
  7148                           
  7149                           ;main.c: 1267: {
  7150                           ;main.c: 1268: dec_val += (hexVal[i] - 48)*base;
  7151  17AE  0830               	movf	hexadecimalToDecimal@i,w
  7152  17AF  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7153  17B0  00A8               	movwf	??_hexadecimalToDecimal
  7154  17B1  0828               	movf	??_hexadecimalToDecimal,w
  7155  17B2  0086               	movwf	6
  7156  17B3  0187               	clrf	7
  7157  17B4  0801               	movf	1,w
  7158  17B5  3ED0               	addlw	208
  7159  17B6  2FD3               	goto	L2
  7160  17B7                     l4960:	
  7161                           ;main.c: 1272: }
  7162                           
  7163                           ;main.c: 1271: base = base * 16;
  7164                           
  7165                           
  7166                           ;main.c: 1277: else if (hexVal[i]>='A' && hexVal[i]<='F')
  7167  17B7  0830               	movf	hexadecimalToDecimal@i,w
  7168  17B8  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7169  17B9  00A8               	movwf	??_hexadecimalToDecimal
  7170  17BA  0828               	movf	??_hexadecimalToDecimal,w
  7171  17BB  0086               	movwf	6
  7172  17BC  0187               	clrf	7
  7173  17BD  3041               	movlw	65
  7174  17BE  0201               	subwf	1,w
  7175  17BF  1C03               	skipc
  7176  17C0  2FF5               	goto	l4968
  7177  17C1  0830               	movf	hexadecimalToDecimal@i,w
  7178  17C2  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7179  17C3  00A8               	movwf	??_hexadecimalToDecimal
  7180  17C4  0828               	movf	??_hexadecimalToDecimal,w
  7181  17C5  0086               	movwf	6
  7182  17C6  0187               	clrf	7
  7183  17C7  3047               	movlw	71
  7184  17C8  0201               	subwf	1,w
  7185  17C9  1803               	skipnc
  7186  17CA  2FF5               	goto	l4968
  7187                           
  7188                           ;main.c: 1278: {
  7189                           ;main.c: 1279: dec_val += (hexVal[i] - 55)*base;
  7190  17CB  0830               	movf	hexadecimalToDecimal@i,w
  7191  17CC  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7192  17CD  00A8               	movwf	??_hexadecimalToDecimal
  7193  17CE  0828               	movf	??_hexadecimalToDecimal,w
  7194  17CF  0086               	movwf	6
  7195  17D0  0187               	clrf	7
  7196  17D1  0801               	movf	1,w
  7197  17D2  3EC9               	addlw	201
  7198  17D3                     L2:	
  7199  17D3  00A0               	movwf	___wmul@multiplier
  7200  17D4  30FF               	movlw	255
  7201  17D5  1803               	skipnc
  7202  17D6  3000               	movlw	0
  7203  17D7  00A1               	movwf	___wmul@multiplier+1
  7204  17D8  082F               	movf	hexadecimalToDecimal@base+1,w
  7205  17D9  00A3               	movwf	___wmul@multiplicand+1
  7206  17DA  082E               	movf	hexadecimalToDecimal@base,w
  7207  17DB  00A2               	movwf	___wmul@multiplicand
  7208  17DC  3192  22EF  3197   	fcall	___wmul
  7209  17DF  0020               	movlb	0	; select bank0
  7210  17E0  0820               	movf	?___wmul,w
  7211  17E1  07AC               	addwf	hexadecimalToDecimal@dec_val,f
  7212  17E2  0821               	movf	?___wmul+1,w
  7213  17E3  3DAD               	addwfc	hexadecimalToDecimal@dec_val+1,f
  7214                           
  7215                           ;main.c: 1282: base = base*16;
  7216  17E4  082F               	movf	hexadecimalToDecimal@base+1,w
  7217  17E5  00A9               	movwf	??_hexadecimalToDecimal+1
  7218  17E6  082E               	movf	hexadecimalToDecimal@base,w
  7219  17E7  00A8               	movwf	??_hexadecimalToDecimal
  7220  17E8  0EA8               	swapf	??_hexadecimalToDecimal,f
  7221  17E9  0EA9               	swapf	??_hexadecimalToDecimal+1,f
  7222  17EA  30F0               	movlw	240
  7223  17EB  05A9               	andwf	??_hexadecimalToDecimal+1,f
  7224  17EC  0828               	movf	??_hexadecimalToDecimal,w
  7225  17ED  390F               	andlw	15
  7226  17EE  04A9               	iorwf	??_hexadecimalToDecimal+1,f
  7227  17EF  30F0               	movlw	240
  7228  17F0  05A8               	andwf	??_hexadecimalToDecimal,f
  7229  17F1  0828               	movf	??_hexadecimalToDecimal,w
  7230  17F2  00AE               	movwf	hexadecimalToDecimal@base
  7231  17F3  0829               	movf	??_hexadecimalToDecimal+1,w
  7232  17F4  00AF               	movwf	hexadecimalToDecimal@base+1
  7233  17F5                     l4968:	
  7234  17F5  30FF               	movlw	255
  7235  17F6  07B0               	addwf	hexadecimalToDecimal@i,f
  7236  17F7  30FF               	movlw	255
  7237  17F8  3DB1               	addwfc	hexadecimalToDecimal@i+1,f
  7238  17F9  1FB1               	btfss	hexadecimalToDecimal@i+1,7
  7239  17FA  2F9A               	goto	l4952
  7240  17FB                     l4972:	
  7241                           
  7242                           ;main.c: 1283: }
  7243                           ;main.c: 1284: }
  7244                           ;main.c: 1286: return dec_val;
  7245  17FB  082D               	movf	hexadecimalToDecimal@dec_val+1,w
  7246  17FC  00A7               	movwf	?_hexadecimalToDecimal+1
  7247  17FD  082C               	movf	hexadecimalToDecimal@dec_val,w
  7248  17FE  00A6               	movwf	?_hexadecimalToDecimal
  7249  17FF  0008               	return
  7250  1800                     __end_of_hexadecimalToDecimal:	
  7251                           
  7252                           	psect	text17
  7253  1362                     __ptext17:	
  7254 ;; *************** function _strlen *****************
  7255 ;; Defined at:
  7256 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  7259 ;;		 -> copymainReceivedDataBuffer(32), applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicatio
      +nControlRGB@strGreenL(3), 
  7260 ;;		 -> applicationControlRGB@strGreenH(3), applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applicat
      +ionControlRGB@HexlevelBuffer(5), 
  7261 ;;		 -> NULL(0), 
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  7264 ;;		 -> copymainReceivedDataBuffer(32), applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicatio
      +nControlRGB@strGreenL(3), 
  7265 ;;		 -> applicationControlRGB@strGreenH(3), applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applicat
      +ionControlRGB@HexlevelBuffer(5), 
  7266 ;;		 -> NULL(0), 
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  2    0[BANK0 ] unsigned int 
  7269 ;; Registers used:
  7270 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7276 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7277 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  7278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  7279 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  7280 ;;Total ram usage:        6 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    2
  7283 ;; This function calls:
  7284 ;;		Nothing
  7285 ;; This function is called by:
  7286 ;;		_applicationControlRGB
  7287 ;;		_main
  7288 ;;		_hexadecimalToDecimal
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           
  7293                           ;psect for function _strlen
  7294  1362                     _strlen:	
  7295                           
  7296                           ;incstack = 0
  7297                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  7298  1362  0020               	movlb	0	; select bank0
  7299  1363  0821               	movf	strlen@s+1,w
  7300  1364  00A5               	movwf	strlen@cp+1
  7301  1365  0820               	movf	strlen@s,w
  7302  1366  00A4               	movwf	strlen@cp
  7303  1367                     l4700:	
  7304  1367  0824               	movf	strlen@cp,w
  7305  1368  0086               	movwf	6
  7306  1369  0825               	movf	strlen@cp+1,w
  7307  136A  0087               	movwf	7
  7308  136B  0801               	movf	1,w
  7309  136C  1903               	btfsc	3,2
  7310  136D  2B73               	goto	l4702
  7311  136E  3001               	movlw	1
  7312  136F  07A4               	addwf	strlen@cp,f
  7313  1370  3000               	movlw	0
  7314  1371  3DA5               	addwfc	strlen@cp+1,f
  7315  1372  2B67               	goto	l4700
  7316  1373                     l4702:	
  7317  1373  0920               	comf	strlen@s,w
  7318  1374  00A2               	movwf	??_strlen
  7319  1375  0921               	comf	strlen@s+1,w
  7320  1376  00A3               	movwf	??_strlen+1
  7321  1377  0AA2               	incf	??_strlen,f
  7322  1378  1903               	skipnz
  7323  1379  0AA3               	incf	??_strlen+1,f
  7324  137A  0824               	movf	strlen@cp,w
  7325  137B  0722               	addwf	??_strlen,w
  7326  137C  00A0               	movwf	?_strlen
  7327  137D  0825               	movf	strlen@cp+1,w
  7328  137E  3D23               	addwfc	??_strlen+1,w
  7329  137F  00A1               	movwf	?_strlen+1
  7330  1380  0008               	return
  7331  1381                     __end_of_strlen:	
  7332                           
  7333                           	psect	text18
  7334  121E                     __ptext18:	
  7335 ;; *************** function _abs *****************
  7336 ;; Defined at:
  7337 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;  a               2    0[BANK0 ] int 
  7340 ;; Auto vars:     Size  Location     Type
  7341 ;;		None
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  2    0[BANK0 ] int 
  7344 ;; Registers used:
  7345 ;;		wreg, status,2, status,0
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7351 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  7353 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  7354 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  7355 ;;Total ram usage:        4 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    2
  7358 ;; This function calls:
  7359 ;;		Nothing
  7360 ;; This function is called by:
  7361 ;;		_applicationControlRGB
  7362 ;; This function uses a non-reentrant model
  7363 ;;
  7364                           
  7365                           
  7366                           ;psect for function _abs
  7367  121E                     _abs:	
  7368                           
  7369                           ;incstack = 0
  7370                           ; Regs used in _abs: [wreg+status,2+status,0]
  7371  121E  0020               	movlb	0	; select bank0
  7372  121F  1FA1               	btfss	abs@a+1,7
  7373  1220  0008               	return
  7374  1221  0920               	comf	abs@a,w
  7375  1222  00A2               	movwf	??_abs
  7376  1223  0921               	comf	abs@a+1,w
  7377  1224  00A3               	movwf	??_abs+1
  7378  1225  0AA2               	incf	??_abs,f
  7379  1226  1903               	skipnz
  7380  1227  0AA3               	incf	??_abs+1,f
  7381  1228  0822               	movf	??_abs,w
  7382  1229  00A0               	movwf	?_abs
  7383  122A  0823               	movf	??_abs+1,w
  7384  122B  00A1               	movwf	?_abs+1
  7385  122C  0008               	return
  7386  122D                     __end_of_abs:	
  7387                           
  7388                           	psect	text19
  7389  1276                     __ptext19:	
  7390 ;; *************** function ___lwtoft *****************
  7391 ;; Defined at:
  7392 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  c               2    8[BANK0 ] unsigned int 
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  3    8[BANK0 ] float 
  7399 ;; Registers used:
  7400 ;;		wreg, status,2, status,0, pclath, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7406 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  7407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  7408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  7409 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  7410 ;;Total ram usage:        4 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    3
  7413 ;; This function calls:
  7414 ;;		___ftpack
  7415 ;; This function is called by:
  7416 ;;		_applicationControlRGB
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           
  7421                           ;psect for function ___lwtoft
  7422  1276                     ___lwtoft:	
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7426  1276  0020               	movlb	0	; select bank0
  7427  1277  0828               	movf	___lwtoft@c,w
  7428  1278  00A0               	movwf	___ftpack@arg
  7429  1279  0829               	movf	___lwtoft@c+1,w
  7430  127A  00A1               	movwf	___ftpack@arg+1
  7431  127B  01A2               	clrf	___ftpack@arg+2
  7432  127C  308E               	movlw	142
  7433  127D  00AB               	movwf	??___lwtoft
  7434  127E  082B               	movf	??___lwtoft,w
  7435  127F  00A3               	movwf	___ftpack@exp
  7436  1280  01A4               	clrf	___ftpack@sign
  7437  1281  3196  26A8         	fcall	___ftpack
  7438  1283  0020               	movlb	0	; select bank0
  7439  1284  0820               	movf	?___ftpack,w
  7440  1285  00A8               	movwf	?___lwtoft
  7441  1286  0821               	movf	?___ftpack+1,w
  7442  1287  00A9               	movwf	?___lwtoft+1
  7443  1288  0822               	movf	?___ftpack+2,w
  7444  1289  00AA               	movwf	?___lwtoft+2
  7445  128A  0008               	return
  7446  128B                     __end_of___lwtoft:	
  7447                           
  7448                           	psect	text20
  7449  0779                     __ptext20:	
  7450 ;; *************** function ___fttol *****************
  7451 ;; Defined at:
  7452 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  f1              3   30[BANK0 ] float 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;  lval            4   39[BANK0 ] unsigned long 
  7457 ;;  exp1            1   43[BANK0 ] unsigned char 
  7458 ;;  sign1           1   38[BANK0 ] unsigned char 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  4   30[BANK0 ] long 
  7461 ;; Registers used:
  7462 ;;		wreg, status,2, status,0
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  7469 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  7470 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  7471 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0
  7472 ;;Total ram usage:       14 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    2
  7475 ;; This function calls:
  7476 ;;		Nothing
  7477 ;; This function is called by:
  7478 ;;		_applicationControlRGB
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           
  7483                           ;psect for function ___fttol
  7484  0779                     ___fttol:	
  7485                           
  7486                           ;incstack = 0
  7487                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7488  0779  0020               	movlb	0	; select bank0
  7489  077A  083E               	movf	___fttol@f1,w
  7490  077B  00C2               	movwf	??___fttol
  7491  077C  083F               	movf	___fttol@f1+1,w
  7492  077D  00C3               	movwf	??___fttol+1
  7493  077E  0840               	movf	___fttol@f1+2,w
  7494  077F  00C4               	movwf	??___fttol+2
  7495  0780  1003               	clrc
  7496  0781  0D43               	rlf	??___fttol+1,w
  7497  0782  0D44               	rlf	??___fttol+2,w
  7498  0783  00C5               	movwf	??___fttol+3
  7499  0784  0845               	movf	??___fttol+3,w
  7500  0785  00CB               	movwf	___fttol@exp1
  7501  0786  084B               	movf	___fttol@exp1,w
  7502  0787  1D03               	btfss	3,2
  7503  0788  2F92               	goto	l5220
  7504  0789  3000               	movlw	0
  7505  078A  00C1               	movwf	?___fttol+3
  7506  078B  3000               	movlw	0
  7507  078C  00C0               	movwf	?___fttol+2
  7508  078D  3000               	movlw	0
  7509  078E  00BF               	movwf	?___fttol+1
  7510  078F  3000               	movlw	0
  7511  0790  00BE               	movwf	?___fttol
  7512  0791  0008               	return
  7513  0792                     l5220:	
  7514  0792  083E               	movf	___fttol@f1,w
  7515  0793  00C2               	movwf	??___fttol
  7516  0794  083F               	movf	___fttol@f1+1,w
  7517  0795  00C3               	movwf	??___fttol+1
  7518  0796  0840               	movf	___fttol@f1+2,w
  7519  0797  00C4               	movwf	??___fttol+2
  7520  0798  3017               	movlw	23
  7521  0799                     u5345:	
  7522  0799  36C4               	lsrf	??___fttol+2,f
  7523  079A  0CC3               	rrf	??___fttol+1,f
  7524  079B  0CC2               	rrf	??___fttol,f
  7525  079C  0B89               	decfsz	9,f
  7526  079D  2F99               	goto	u5345
  7527  079E  0842               	movf	??___fttol,w
  7528  079F  00C5               	movwf	??___fttol+3
  7529  07A0  0845               	movf	??___fttol+3,w
  7530  07A1  00C6               	movwf	___fttol@sign1
  7531  07A2  17BF               	bsf	___fttol@f1+1,7
  7532  07A3  30FF               	movlw	255
  7533  07A4  05BE               	andwf	___fttol@f1,f
  7534  07A5  30FF               	movlw	255
  7535  07A6  05BF               	andwf	___fttol@f1+1,f
  7536  07A7  3000               	movlw	0
  7537  07A8  05C0               	andwf	___fttol@f1+2,f
  7538  07A9  083E               	movf	___fttol@f1,w
  7539  07AA  00C7               	movwf	___fttol@lval
  7540  07AB  083F               	movf	___fttol@f1+1,w
  7541  07AC  00C8               	movwf	___fttol@lval+1
  7542  07AD  0840               	movf	___fttol@f1+2,w
  7543  07AE  00C9               	movwf	___fttol@lval+2
  7544  07AF  01CA               	clrf	___fttol@lval+3
  7545  07B0  308E               	movlw	142
  7546  07B1  02CB               	subwf	___fttol@exp1,f
  7547  07B2  1FCB               	btfss	___fttol@exp1,7
  7548  07B3  2FD0               	goto	l5240
  7549  07B4  084B               	movf	___fttol@exp1,w
  7550  07B5  3A80               	xorlw	128
  7551  07B6  3E8F               	addlw	143
  7552  07B7  1803               	skipnc
  7553  07B8  2FC2               	goto	l5238
  7554  07B9  3000               	movlw	0
  7555  07BA  00C1               	movwf	?___fttol+3
  7556  07BB  3000               	movlw	0
  7557  07BC  00C0               	movwf	?___fttol+2
  7558  07BD  3000               	movlw	0
  7559  07BE  00BF               	movwf	?___fttol+1
  7560  07BF  3000               	movlw	0
  7561  07C0  00BE               	movwf	?___fttol
  7562  07C1  0008               	return
  7563  07C2                     l5238:	
  7564  07C2  3001               	movlw	1
  7565  07C3                     u5375:	
  7566  07C3  36CA               	lsrf	___fttol@lval+3,f
  7567  07C4  0CC9               	rrf	___fttol@lval+2,f
  7568  07C5  0CC8               	rrf	___fttol@lval+1,f
  7569  07C6  0CC7               	rrf	___fttol@lval,f
  7570  07C7  0B89               	decfsz	9,f
  7571  07C8  2FC3               	goto	u5375
  7572  07C9  3001               	movlw	1
  7573  07CA  00C2               	movwf	??___fttol
  7574  07CB  0842               	movf	??___fttol,w
  7575  07CC  07CB               	addwf	___fttol@exp1,f
  7576  07CD  1903               	btfsc	3,2
  7577  07CE  2FE9               	goto	l5248
  7578  07CF  2FC2               	goto	l5238
  7579  07D0                     l5240:	
  7580  07D0  3018               	movlw	24
  7581  07D1  024B               	subwf	___fttol@exp1,w
  7582  07D2  1C03               	skipc
  7583  07D3  2FE6               	goto	l962
  7584  07D4  3000               	movlw	0
  7585  07D5  00C1               	movwf	?___fttol+3
  7586  07D6  3000               	movlw	0
  7587  07D7  00C0               	movwf	?___fttol+2
  7588  07D8  3000               	movlw	0
  7589  07D9  00BF               	movwf	?___fttol+1
  7590  07DA  3000               	movlw	0
  7591  07DB  00BE               	movwf	?___fttol
  7592  07DC  0008               	return
  7593  07DD                     l5246:	
  7594  07DD  3001               	movlw	1
  7595  07DE                     u5405:	
  7596  07DE  35C7               	lslf	___fttol@lval,f
  7597  07DF  0DC8               	rlf	___fttol@lval+1,f
  7598  07E0  0DC9               	rlf	___fttol@lval+2,f
  7599  07E1  0DCA               	rlf	___fttol@lval+3,f
  7600  07E2  0B89               	decfsz	9,f
  7601  07E3  2FDE               	goto	u5405
  7602  07E4  3001               	movlw	1
  7603  07E5  02CB               	subwf	___fttol@exp1,f
  7604  07E6                     l962:	
  7605  07E6  084B               	movf	___fttol@exp1,w
  7606  07E7  1D03               	btfss	3,2
  7607  07E8  2FDD               	goto	l5246
  7608  07E9                     l5248:	
  7609  07E9  0846               	movf	___fttol@sign1,w
  7610  07EA  1903               	btfsc	3,2
  7611  07EB  2FF7               	goto	l5252
  7612  07EC  09C7               	comf	___fttol@lval,f
  7613  07ED  09C8               	comf	___fttol@lval+1,f
  7614  07EE  09C9               	comf	___fttol@lval+2,f
  7615  07EF  09CA               	comf	___fttol@lval+3,f
  7616  07F0  0AC7               	incf	___fttol@lval,f
  7617  07F1  1903               	skipnz
  7618  07F2  0AC8               	incf	___fttol@lval+1,f
  7619  07F3  1903               	skipnz
  7620  07F4  0AC9               	incf	___fttol@lval+2,f
  7621  07F5  1903               	skipnz
  7622  07F6  0ACA               	incf	___fttol@lval+3,f
  7623  07F7                     l5252:	
  7624  07F7  084A               	movf	___fttol@lval+3,w
  7625  07F8  00C1               	movwf	?___fttol+3
  7626  07F9  0849               	movf	___fttol@lval+2,w
  7627  07FA  00C0               	movwf	?___fttol+2
  7628  07FB  0848               	movf	___fttol@lval+1,w
  7629  07FC  00BF               	movwf	?___fttol+1
  7630  07FD  0847               	movf	___fttol@lval,w
  7631  07FE  00BE               	movwf	?___fttol
  7632  07FF  0008               	return
  7633  0800                     __end_of___fttol:	
  7634                           
  7635                           	psect	text21
  7636  09AB                     __ptext21:	
  7637 ;; *************** function ___ftmul *****************
  7638 ;; Defined at:
  7639 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  f1              3    8[BANK0 ] float 
  7642 ;;  f2              3   11[BANK0 ] float 
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  7645 ;;  sign            1   23[BANK0 ] unsigned char 
  7646 ;;  cntr            1   22[BANK0 ] unsigned char 
  7647 ;;  exp             1   18[BANK0 ] unsigned char 
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  3    8[BANK0 ] float 
  7650 ;; Registers used:
  7651 ;;		wreg, status,2, status,0, pclath, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7657 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  7658 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  7659 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  7660 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0
  7661 ;;Total ram usage:       16 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    3
  7664 ;; This function calls:
  7665 ;;		___ftpack
  7666 ;; This function is called by:
  7667 ;;		_applicationControlRGB
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           
  7672                           ;psect for function ___ftmul
  7673  09AB                     ___ftmul:	
  7674                           
  7675                           ;incstack = 0
  7676                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7677  09AB  0020               	movlb	0	; select bank0
  7678  09AC  0828               	movf	___ftmul@f1,w
  7679  09AD  00AE               	movwf	??___ftmul
  7680  09AE  0829               	movf	___ftmul@f1+1,w
  7681  09AF  00AF               	movwf	??___ftmul+1
  7682  09B0  082A               	movf	___ftmul@f1+2,w
  7683  09B1  00B0               	movwf	??___ftmul+2
  7684  09B2  1003               	clrc
  7685  09B3  0D2F               	rlf	??___ftmul+1,w
  7686  09B4  0D30               	rlf	??___ftmul+2,w
  7687  09B5  00B1               	movwf	??___ftmul+3
  7688  09B6  0831               	movf	??___ftmul+3,w
  7689  09B7  00B2               	movwf	___ftmul@exp
  7690  09B8  0832               	movf	___ftmul@exp,w
  7691  09B9  1D03               	btfss	3,2
  7692  09BA  29C2               	goto	l5170
  7693  09BB  3000               	movlw	0
  7694  09BC  00A8               	movwf	?___ftmul
  7695  09BD  3000               	movlw	0
  7696  09BE  00A9               	movwf	?___ftmul+1
  7697  09BF  3000               	movlw	0
  7698  09C0  00AA               	movwf	?___ftmul+2
  7699  09C1  0008               	return
  7700  09C2                     l5170:	
  7701  09C2  082B               	movf	___ftmul@f2,w
  7702  09C3  00AE               	movwf	??___ftmul
  7703  09C4  082C               	movf	___ftmul@f2+1,w
  7704  09C5  00AF               	movwf	??___ftmul+1
  7705  09C6  082D               	movf	___ftmul@f2+2,w
  7706  09C7  00B0               	movwf	??___ftmul+2
  7707  09C8  1003               	clrc
  7708  09C9  0D2F               	rlf	??___ftmul+1,w
  7709  09CA  0D30               	rlf	??___ftmul+2,w
  7710  09CB  00B1               	movwf	??___ftmul+3
  7711  09CC  0831               	movf	??___ftmul+3,w
  7712  09CD  00B7               	movwf	___ftmul@sign
  7713  09CE  0837               	movf	___ftmul@sign,w
  7714  09CF  1D03               	btfss	3,2
  7715  09D0  29D8               	goto	l5176
  7716  09D1  3000               	movlw	0
  7717  09D2  00A8               	movwf	?___ftmul
  7718  09D3  3000               	movlw	0
  7719  09D4  00A9               	movwf	?___ftmul+1
  7720  09D5  3000               	movlw	0
  7721  09D6  00AA               	movwf	?___ftmul+2
  7722  09D7  0008               	return
  7723  09D8                     l5176:	
  7724  09D8  0837               	movf	___ftmul@sign,w
  7725  09D9  3E7B               	addlw	123
  7726  09DA  00AE               	movwf	??___ftmul
  7727  09DB  082E               	movf	??___ftmul,w
  7728  09DC  07B2               	addwf	___ftmul@exp,f
  7729  09DD  0828               	movf	___ftmul@f1,w
  7730  09DE  00AE               	movwf	??___ftmul
  7731  09DF  0829               	movf	___ftmul@f1+1,w
  7732  09E0  00AF               	movwf	??___ftmul+1
  7733  09E1  082A               	movf	___ftmul@f1+2,w
  7734  09E2  00B0               	movwf	??___ftmul+2
  7735  09E3  3010               	movlw	16
  7736  09E4                     u5235:	
  7737  09E4  36B0               	lsrf	??___ftmul+2,f
  7738  09E5  0CAF               	rrf	??___ftmul+1,f
  7739  09E6  0CAE               	rrf	??___ftmul,f
  7740  09E7  0B89               	decfsz	9,f
  7741  09E8  29E4               	goto	u5235
  7742  09E9  082E               	movf	??___ftmul,w
  7743  09EA  00B1               	movwf	??___ftmul+3
  7744  09EB  0831               	movf	??___ftmul+3,w
  7745  09EC  00B7               	movwf	___ftmul@sign
  7746  09ED  082B               	movf	___ftmul@f2,w
  7747  09EE  00AE               	movwf	??___ftmul
  7748  09EF  082C               	movf	___ftmul@f2+1,w
  7749  09F0  00AF               	movwf	??___ftmul+1
  7750  09F1  082D               	movf	___ftmul@f2+2,w
  7751  09F2  00B0               	movwf	??___ftmul+2
  7752  09F3  3010               	movlw	16
  7753  09F4                     u5245:	
  7754  09F4  36B0               	lsrf	??___ftmul+2,f
  7755  09F5  0CAF               	rrf	??___ftmul+1,f
  7756  09F6  0CAE               	rrf	??___ftmul,f
  7757  09F7  0B89               	decfsz	9,f
  7758  09F8  29F4               	goto	u5245
  7759  09F9  082E               	movf	??___ftmul,w
  7760  09FA  00B1               	movwf	??___ftmul+3
  7761  09FB  0831               	movf	??___ftmul+3,w
  7762  09FC  06B7               	xorwf	___ftmul@sign,f
  7763  09FD  3080               	movlw	128
  7764  09FE  00AE               	movwf	??___ftmul
  7765  09FF  082E               	movf	??___ftmul,w
  7766  0A00  05B7               	andwf	___ftmul@sign,f
  7767  0A01  17A9               	bsf	___ftmul@f1+1,7
  7768  0A02  17AC               	bsf	___ftmul@f2+1,7
  7769  0A03  30FF               	movlw	255
  7770  0A04  05AB               	andwf	___ftmul@f2,f
  7771  0A05  30FF               	movlw	255
  7772  0A06  05AC               	andwf	___ftmul@f2+1,f
  7773  0A07  3000               	movlw	0
  7774  0A08  05AD               	andwf	___ftmul@f2+2,f
  7775  0A09  3000               	movlw	0
  7776  0A0A  00B3               	movwf	___ftmul@f3_as_product
  7777  0A0B  3000               	movlw	0
  7778  0A0C  00B4               	movwf	___ftmul@f3_as_product+1
  7779  0A0D  3000               	movlw	0
  7780  0A0E  00B5               	movwf	___ftmul@f3_as_product+2
  7781  0A0F  3007               	movlw	7
  7782  0A10  00AE               	movwf	??___ftmul
  7783  0A11  082E               	movf	??___ftmul,w
  7784  0A12  00B6               	movwf	___ftmul@cntr
  7785  0A13                     l5188:	
  7786  0A13  1C28               	btfss	___ftmul@f1,0
  7787  0A14  2A1B               	goto	l5192
  7788  0A15  082B               	movf	___ftmul@f2,w
  7789  0A16  07B3               	addwf	___ftmul@f3_as_product,f
  7790  0A17  082C               	movf	___ftmul@f2+1,w
  7791  0A18  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  7792  0A19  082D               	movf	___ftmul@f2+2,w
  7793  0A1A  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  7794  0A1B                     l5192:	
  7795  0A1B  3001               	movlw	1
  7796  0A1C                     u5265:	
  7797  0A1C  36AA               	lsrf	___ftmul@f1+2,f
  7798  0A1D  0CA9               	rrf	___ftmul@f1+1,f
  7799  0A1E  0CA8               	rrf	___ftmul@f1,f
  7800  0A1F  0B89               	decfsz	9,f
  7801  0A20  2A1C               	goto	u5265
  7802  0A21  3001               	movlw	1
  7803  0A22                     u5275:	
  7804  0A22  35AB               	lslf	___ftmul@f2,f
  7805  0A23  0DAC               	rlf	___ftmul@f2+1,f
  7806  0A24  0DAD               	rlf	___ftmul@f2+2,f
  7807  0A25  0B89               	decfsz	9,f
  7808  0A26  2A22               	goto	u5275
  7809  0A27  3001               	movlw	1
  7810  0A28  02B6               	subwf	___ftmul@cntr,f
  7811  0A29  1D03               	btfss	3,2
  7812  0A2A  2A13               	goto	l5188
  7813  0A2B  3009               	movlw	9
  7814  0A2C  00AE               	movwf	??___ftmul
  7815  0A2D  082E               	movf	??___ftmul,w
  7816  0A2E  00B6               	movwf	___ftmul@cntr
  7817  0A2F                     l5200:	
  7818  0A2F  1C28               	btfss	___ftmul@f1,0
  7819  0A30  2A37               	goto	l5204
  7820  0A31  082B               	movf	___ftmul@f2,w
  7821  0A32  07B3               	addwf	___ftmul@f3_as_product,f
  7822  0A33  082C               	movf	___ftmul@f2+1,w
  7823  0A34  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  7824  0A35  082D               	movf	___ftmul@f2+2,w
  7825  0A36  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  7826  0A37                     l5204:	
  7827  0A37  3001               	movlw	1
  7828  0A38                     u5305:	
  7829  0A38  36AA               	lsrf	___ftmul@f1+2,f
  7830  0A39  0CA9               	rrf	___ftmul@f1+1,f
  7831  0A3A  0CA8               	rrf	___ftmul@f1,f
  7832  0A3B  0B89               	decfsz	9,f
  7833  0A3C  2A38               	goto	u5305
  7834  0A3D  3001               	movlw	1
  7835  0A3E                     u5315:	
  7836  0A3E  36B5               	lsrf	___ftmul@f3_as_product+2,f
  7837  0A3F  0CB4               	rrf	___ftmul@f3_as_product+1,f
  7838  0A40  0CB3               	rrf	___ftmul@f3_as_product,f
  7839  0A41  0B89               	decfsz	9,f
  7840  0A42  2A3E               	goto	u5315
  7841  0A43  3001               	movlw	1
  7842  0A44  02B6               	subwf	___ftmul@cntr,f
  7843  0A45  1D03               	btfss	3,2
  7844  0A46  2A2F               	goto	l5200
  7845  0A47  0833               	movf	___ftmul@f3_as_product,w
  7846  0A48  00A0               	movwf	___ftpack@arg
  7847  0A49  0834               	movf	___ftmul@f3_as_product+1,w
  7848  0A4A  00A1               	movwf	___ftpack@arg+1
  7849  0A4B  0835               	movf	___ftmul@f3_as_product+2,w
  7850  0A4C  00A2               	movwf	___ftpack@arg+2
  7851  0A4D  0832               	movf	___ftmul@exp,w
  7852  0A4E  00AE               	movwf	??___ftmul
  7853  0A4F  082E               	movf	??___ftmul,w
  7854  0A50  00A3               	movwf	___ftpack@exp
  7855  0A51  0837               	movf	___ftmul@sign,w
  7856  0A52  00AF               	movwf	??___ftmul+1
  7857  0A53  082F               	movf	??___ftmul+1,w
  7858  0A54  00A4               	movwf	___ftpack@sign
  7859  0A55  3196  26A8         	fcall	___ftpack
  7860  0A57  0020               	movlb	0	; select bank0
  7861  0A58  0820               	movf	?___ftpack,w
  7862  0A59  00A8               	movwf	?___ftmul
  7863  0A5A  0821               	movf	?___ftpack+1,w
  7864  0A5B  00A9               	movwf	?___ftmul+1
  7865  0A5C  0822               	movf	?___ftpack+2,w
  7866  0A5D  00AA               	movwf	?___ftmul+2
  7867  0A5E  0008               	return
  7868  0A5F                     __end_of___ftmul:	
  7869                           
  7870                           	psect	text22
  7871  084F                     __ptext22:	
  7872 ;; *************** function ___ftdiv *****************
  7873 ;; Defined at:
  7874 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  7875 ;; Parameters:    Size  Location     Type
  7876 ;;  f2              3   14[BANK0 ] float 
  7877 ;;  f1              3   17[BANK0 ] float 
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;  f3              3   25[BANK0 ] float 
  7880 ;;  sign            1   29[BANK0 ] unsigned char 
  7881 ;;  exp             1   28[BANK0 ] unsigned char 
  7882 ;;  cntr            1   24[BANK0 ] unsigned char 
  7883 ;; Return value:  Size  Location     Type
  7884 ;;                  3   14[BANK0 ] float 
  7885 ;; Registers used:
  7886 ;;		wreg, status,2, status,0, pclath, cstack
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7892 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  7893 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  7894 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  7895 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0
  7896 ;;Total ram usage:       16 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; Hardware stack levels required when called:    3
  7899 ;; This function calls:
  7900 ;;		___ftpack
  7901 ;; This function is called by:
  7902 ;;		_applicationControlRGB
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           
  7907                           ;psect for function ___ftdiv
  7908  084F                     ___ftdiv:	
  7909                           
  7910                           ;incstack = 0
  7911                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7912  084F  0020               	movlb	0	; select bank0
  7913  0850  0831               	movf	___ftdiv@f1,w
  7914  0851  00B4               	movwf	??___ftdiv
  7915  0852  0832               	movf	___ftdiv@f1+1,w
  7916  0853  00B5               	movwf	??___ftdiv+1
  7917  0854  0833               	movf	___ftdiv@f1+2,w
  7918  0855  00B6               	movwf	??___ftdiv+2
  7919  0856  1003               	clrc
  7920  0857  0D35               	rlf	??___ftdiv+1,w
  7921  0858  0D36               	rlf	??___ftdiv+2,w
  7922  0859  00B7               	movwf	??___ftdiv+3
  7923  085A  0837               	movf	??___ftdiv+3,w
  7924  085B  00BC               	movwf	___ftdiv@exp
  7925  085C  083C               	movf	___ftdiv@exp,w
  7926  085D  1D03               	btfss	3,2
  7927  085E  2866               	goto	l5128
  7928  085F  3000               	movlw	0
  7929  0860  00AE               	movwf	?___ftdiv
  7930  0861  3000               	movlw	0
  7931  0862  00AF               	movwf	?___ftdiv+1
  7932  0863  3000               	movlw	0
  7933  0864  00B0               	movwf	?___ftdiv+2
  7934  0865  0008               	return
  7935  0866                     l5128:	
  7936  0866  082E               	movf	___ftdiv@f2,w
  7937  0867  00B4               	movwf	??___ftdiv
  7938  0868  082F               	movf	___ftdiv@f2+1,w
  7939  0869  00B5               	movwf	??___ftdiv+1
  7940  086A  0830               	movf	___ftdiv@f2+2,w
  7941  086B  00B6               	movwf	??___ftdiv+2
  7942  086C  1003               	clrc
  7943  086D  0D35               	rlf	??___ftdiv+1,w
  7944  086E  0D36               	rlf	??___ftdiv+2,w
  7945  086F  00B7               	movwf	??___ftdiv+3
  7946  0870  0837               	movf	??___ftdiv+3,w
  7947  0871  00BD               	movwf	___ftdiv@sign
  7948  0872  083D               	movf	___ftdiv@sign,w
  7949  0873  1D03               	btfss	3,2
  7950  0874  287C               	goto	l5134
  7951  0875  3000               	movlw	0
  7952  0876  00AE               	movwf	?___ftdiv
  7953  0877  3000               	movlw	0
  7954  0878  00AF               	movwf	?___ftdiv+1
  7955  0879  3000               	movlw	0
  7956  087A  00B0               	movwf	?___ftdiv+2
  7957  087B  0008               	return
  7958  087C                     l5134:	
  7959  087C  3000               	movlw	0
  7960  087D  00B9               	movwf	___ftdiv@f3
  7961  087E  3000               	movlw	0
  7962  087F  00BA               	movwf	___ftdiv@f3+1
  7963  0880  3000               	movlw	0
  7964  0881  00BB               	movwf	___ftdiv@f3+2
  7965  0882  3089               	movlw	137
  7966  0883  073D               	addwf	___ftdiv@sign,w
  7967  0884  00B4               	movwf	??___ftdiv
  7968  0885  0834               	movf	??___ftdiv,w
  7969  0886  02BC               	subwf	___ftdiv@exp,f
  7970  0887  0831               	movf	___ftdiv@f1,w
  7971  0888  00B4               	movwf	??___ftdiv
  7972  0889  0832               	movf	___ftdiv@f1+1,w
  7973  088A  00B5               	movwf	??___ftdiv+1
  7974  088B  0833               	movf	___ftdiv@f1+2,w
  7975  088C  00B6               	movwf	??___ftdiv+2
  7976  088D  3010               	movlw	16
  7977  088E                     u5155:	
  7978  088E  36B6               	lsrf	??___ftdiv+2,f
  7979  088F  0CB5               	rrf	??___ftdiv+1,f
  7980  0890  0CB4               	rrf	??___ftdiv,f
  7981  0891  0B89               	decfsz	9,f
  7982  0892  288E               	goto	u5155
  7983  0893  0834               	movf	??___ftdiv,w
  7984  0894  00B7               	movwf	??___ftdiv+3
  7985  0895  0837               	movf	??___ftdiv+3,w
  7986  0896  00BD               	movwf	___ftdiv@sign
  7987  0897  082E               	movf	___ftdiv@f2,w
  7988  0898  00B4               	movwf	??___ftdiv
  7989  0899  082F               	movf	___ftdiv@f2+1,w
  7990  089A  00B5               	movwf	??___ftdiv+1
  7991  089B  0830               	movf	___ftdiv@f2+2,w
  7992  089C  00B6               	movwf	??___ftdiv+2
  7993  089D  3010               	movlw	16
  7994  089E                     u5165:	
  7995  089E  36B6               	lsrf	??___ftdiv+2,f
  7996  089F  0CB5               	rrf	??___ftdiv+1,f
  7997  08A0  0CB4               	rrf	??___ftdiv,f
  7998  08A1  0B89               	decfsz	9,f
  7999  08A2  289E               	goto	u5165
  8000  08A3  0834               	movf	??___ftdiv,w
  8001  08A4  00B7               	movwf	??___ftdiv+3
  8002  08A5  0837               	movf	??___ftdiv+3,w
  8003  08A6  06BD               	xorwf	___ftdiv@sign,f
  8004  08A7  3080               	movlw	128
  8005  08A8  00B4               	movwf	??___ftdiv
  8006  08A9  0834               	movf	??___ftdiv,w
  8007  08AA  05BD               	andwf	___ftdiv@sign,f
  8008  08AB  17B2               	bsf	___ftdiv@f1+1,7
  8009  08AC  30FF               	movlw	255
  8010  08AD  05B1               	andwf	___ftdiv@f1,f
  8011  08AE  30FF               	movlw	255
  8012  08AF  05B2               	andwf	___ftdiv@f1+1,f
  8013  08B0  3000               	movlw	0
  8014  08B1  05B3               	andwf	___ftdiv@f1+2,f
  8015  08B2  17AF               	bsf	___ftdiv@f2+1,7
  8016  08B3  30FF               	movlw	255
  8017  08B4  05AE               	andwf	___ftdiv@f2,f
  8018  08B5  30FF               	movlw	255
  8019  08B6  05AF               	andwf	___ftdiv@f2+1,f
  8020  08B7  3000               	movlw	0
  8021  08B8  05B0               	andwf	___ftdiv@f2+2,f
  8022  08B9  3018               	movlw	24
  8023  08BA  00B4               	movwf	??___ftdiv
  8024  08BB  0834               	movf	??___ftdiv,w
  8025  08BC  00B8               	movwf	___ftdiv@cntr
  8026  08BD                     l5148:	
  8027  08BD  3001               	movlw	1
  8028  08BE                     u5175:	
  8029  08BE  35B9               	lslf	___ftdiv@f3,f
  8030  08BF  0DBA               	rlf	___ftdiv@f3+1,f
  8031  08C0  0DBB               	rlf	___ftdiv@f3+2,f
  8032  08C1  0B89               	decfsz	9,f
  8033  08C2  28BE               	goto	u5175
  8034  08C3  0830               	movf	___ftdiv@f2+2,w
  8035  08C4  0233               	subwf	___ftdiv@f1+2,w
  8036  08C5  1D03               	skipz
  8037  08C6  28CD               	goto	u5185
  8038  08C7  082F               	movf	___ftdiv@f2+1,w
  8039  08C8  0232               	subwf	___ftdiv@f1+1,w
  8040  08C9  1D03               	skipz
  8041  08CA  28CD               	goto	u5185
  8042  08CB  082E               	movf	___ftdiv@f2,w
  8043  08CC  0231               	subwf	___ftdiv@f1,w
  8044  08CD                     u5185:	
  8045  08CD  1C03               	skipc
  8046  08CE  28D6               	goto	l5156
  8047  08CF  082E               	movf	___ftdiv@f2,w
  8048  08D0  02B1               	subwf	___ftdiv@f1,f
  8049  08D1  082F               	movf	___ftdiv@f2+1,w
  8050  08D2  3BB2               	subwfb	___ftdiv@f1+1,f
  8051  08D3  0830               	movf	___ftdiv@f2+2,w
  8052  08D4  3BB3               	subwfb	___ftdiv@f1+2,f
  8053  08D5  1439               	bsf	___ftdiv@f3,0
  8054  08D6                     l5156:	
  8055  08D6  3001               	movlw	1
  8056  08D7                     u5195:	
  8057  08D7  35B1               	lslf	___ftdiv@f1,f
  8058  08D8  0DB2               	rlf	___ftdiv@f1+1,f
  8059  08D9  0DB3               	rlf	___ftdiv@f1+2,f
  8060  08DA  0B89               	decfsz	9,f
  8061  08DB  28D7               	goto	u5195
  8062  08DC  3001               	movlw	1
  8063  08DD  02B8               	subwf	___ftdiv@cntr,f
  8064  08DE  1D03               	btfss	3,2
  8065  08DF  28BD               	goto	l5148
  8066  08E0  0839               	movf	___ftdiv@f3,w
  8067  08E1  00A0               	movwf	___ftpack@arg
  8068  08E2  083A               	movf	___ftdiv@f3+1,w
  8069  08E3  00A1               	movwf	___ftpack@arg+1
  8070  08E4  083B               	movf	___ftdiv@f3+2,w
  8071  08E5  00A2               	movwf	___ftpack@arg+2
  8072  08E6  083C               	movf	___ftdiv@exp,w
  8073  08E7  00B4               	movwf	??___ftdiv
  8074  08E8  0834               	movf	??___ftdiv,w
  8075  08E9  00A3               	movwf	___ftpack@exp
  8076  08EA  083D               	movf	___ftdiv@sign,w
  8077  08EB  00B5               	movwf	??___ftdiv+1
  8078  08EC  0835               	movf	??___ftdiv+1,w
  8079  08ED  00A4               	movwf	___ftpack@sign
  8080  08EE  3196  26A8         	fcall	___ftpack
  8081  08F0  0020               	movlb	0	; select bank0
  8082  08F1  0820               	movf	?___ftpack,w
  8083  08F2  00AE               	movwf	?___ftdiv
  8084  08F3  0821               	movf	?___ftpack+1,w
  8085  08F4  00AF               	movwf	?___ftdiv+1
  8086  08F5  0822               	movf	?___ftpack+2,w
  8087  08F6  00B0               	movwf	?___ftdiv+2
  8088  08F7  0008               	return
  8089  08F8                     __end_of___ftdiv:	
  8090                           
  8091                           	psect	text23
  8092  1402                     __ptext23:	
  8093 ;; *************** function ___awtoft *****************
  8094 ;; Defined at:
  8095 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;  c               2    8[BANK0 ] int 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  sign            1   13[BANK0 ] unsigned char 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  3    8[BANK0 ] float 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0, pclath, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8109 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  8110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0
  8111 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8112 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  8113 ;;Total ram usage:        6 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    3
  8116 ;; This function calls:
  8117 ;;		___ftpack
  8118 ;; This function is called by:
  8119 ;;		_applicationControlRGB
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           
  8124                           ;psect for function ___awtoft
  8125  1402                     ___awtoft:	
  8126                           
  8127                           ;incstack = 0
  8128                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8129  1402  0020               	movlb	0	; select bank0
  8130  1403  01AD               	clrf	___awtoft@sign
  8131  1404  1FA9               	btfss	___awtoft@c+1,7
  8132  1405  2C0D               	goto	l5118
  8133  1406  09A8               	comf	___awtoft@c,f
  8134  1407  09A9               	comf	___awtoft@c+1,f
  8135  1408  0AA8               	incf	___awtoft@c,f
  8136  1409  1903               	skipnz
  8137  140A  0AA9               	incf	___awtoft@c+1,f
  8138  140B  01AD               	clrf	___awtoft@sign
  8139  140C  0AAD               	incf	___awtoft@sign,f
  8140  140D                     l5118:	
  8141  140D  0828               	movf	___awtoft@c,w
  8142  140E  00A0               	movwf	___ftpack@arg
  8143  140F  0829               	movf	___awtoft@c+1,w
  8144  1410  00A1               	movwf	___ftpack@arg+1
  8145  1411  01A2               	clrf	___ftpack@arg+2
  8146  1412  308E               	movlw	142
  8147  1413  00AB               	movwf	??___awtoft
  8148  1414  082B               	movf	??___awtoft,w
  8149  1415  00A3               	movwf	___ftpack@exp
  8150  1416  082D               	movf	___awtoft@sign,w
  8151  1417  00AC               	movwf	??___awtoft+1
  8152  1418  082C               	movf	??___awtoft+1,w
  8153  1419  00A4               	movwf	___ftpack@sign
  8154  141A  3196  26A8         	fcall	___ftpack
  8155  141C  0020               	movlb	0	; select bank0
  8156  141D  0820               	movf	?___ftpack,w
  8157  141E  00A8               	movwf	?___awtoft
  8158  141F  0821               	movf	?___ftpack+1,w
  8159  1420  00A9               	movwf	?___awtoft+1
  8160  1421  0822               	movf	?___ftpack+2,w
  8161  1422  00AA               	movwf	?___awtoft+2
  8162  1423  0008               	return
  8163  1424                     __end_of___awtoft:	
  8164                           
  8165                           	psect	text24
  8166  16A8                     __ptext24:	
  8167 ;; *************** function ___ftpack *****************
  8168 ;; Defined at:
  8169 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;  arg             3    0[BANK0 ] unsigned um
  8172 ;;  exp             1    3[BANK0 ] unsigned char 
  8173 ;;  sign            1    4[BANK0 ] unsigned char 
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;		None
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  3    0[BANK0 ] float 
  8178 ;; Registers used:
  8179 ;;		wreg, status,2, status,0
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8185 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0
  8186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  8187 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  8188 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  8189 ;;Total ram usage:        8 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; Hardware stack levels required when called:    2
  8192 ;; This function calls:
  8193 ;;		Nothing
  8194 ;; This function is called by:
  8195 ;;		___awtoft
  8196 ;;		___ftdiv
  8197 ;;		___ftmul
  8198 ;;		___lwtoft
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function ___ftpack
  8204  16A8                     ___ftpack:	
  8205                           
  8206                           ;incstack = 0
  8207                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8208  16A8  0020               	movlb	0	; select bank0
  8209  16A9  0823               	movf	___ftpack@exp,w
  8210  16AA  1903               	btfsc	3,2
  8211  16AB  2EB1               	goto	l4724
  8212  16AC  0822               	movf	___ftpack@arg+2,w
  8213  16AD  0421               	iorwf	___ftpack@arg+1,w
  8214  16AE  0420               	iorwf	___ftpack@arg,w
  8215  16AF  1D03               	skipz
  8216  16B0  2EC2               	goto	l4730
  8217  16B1                     l4724:	
  8218  16B1  3000               	movlw	0
  8219  16B2  00A0               	movwf	?___ftpack
  8220  16B3  3000               	movlw	0
  8221  16B4  00A1               	movwf	?___ftpack+1
  8222  16B5  3000               	movlw	0
  8223  16B6  00A2               	movwf	?___ftpack+2
  8224  16B7  0008               	return
  8225  16B8                     l4728:	
  8226  16B8  3001               	movlw	1
  8227  16B9  00A5               	movwf	??___ftpack
  8228  16BA  0825               	movf	??___ftpack,w
  8229  16BB  07A3               	addwf	___ftpack@exp,f
  8230  16BC  3001               	movlw	1
  8231  16BD                     u4615:	
  8232  16BD  36A2               	lsrf	___ftpack@arg+2,f
  8233  16BE  0CA1               	rrf	___ftpack@arg+1,f
  8234  16BF  0CA0               	rrf	___ftpack@arg,f
  8235  16C0  0B89               	decfsz	9,f
  8236  16C1  2EBD               	goto	u4615
  8237  16C2                     l4730:	
  8238  16C2  30FE               	movlw	254
  8239  16C3  0522               	andwf	___ftpack@arg+2,w
  8240  16C4  1903               	btfsc	3,2
  8241  16C5  2EDB               	goto	l871
  8242  16C6  2EB8               	goto	l4728
  8243  16C7                     l4732:	
  8244  16C7  3001               	movlw	1
  8245  16C8  00A5               	movwf	??___ftpack
  8246  16C9  0825               	movf	??___ftpack,w
  8247  16CA  07A3               	addwf	___ftpack@exp,f
  8248  16CB  3001               	movlw	1
  8249  16CC  07A0               	addwf	___ftpack@arg,f
  8250  16CD  3000               	movlw	0
  8251  16CE  1803               	skipnc
  8252  16CF  3001               	movlw	1
  8253  16D0  07A1               	addwf	___ftpack@arg+1,f
  8254  16D1  3000               	movlw	0
  8255  16D2  1803               	skipnc
  8256  16D3  3001               	movlw	1
  8257  16D4  07A2               	addwf	___ftpack@arg+2,f
  8258  16D5  3001               	movlw	1
  8259  16D6                     u4635:	
  8260  16D6  36A2               	lsrf	___ftpack@arg+2,f
  8261  16D7  0CA1               	rrf	___ftpack@arg+1,f
  8262  16D8  0CA0               	rrf	___ftpack@arg,f
  8263  16D9  0B89               	decfsz	9,f
  8264  16DA  2ED6               	goto	u4635
  8265  16DB                     l871:	
  8266  16DB  30FF               	movlw	255
  8267  16DC  0522               	andwf	___ftpack@arg+2,w
  8268  16DD  1903               	btfsc	3,2
  8269  16DE  2EE8               	goto	l4740
  8270  16DF  2EC7               	goto	l4732
  8271  16E0                     l4738:	
  8272  16E0  3001               	movlw	1
  8273  16E1  02A3               	subwf	___ftpack@exp,f
  8274  16E2  3001               	movlw	1
  8275  16E3                     u4655:	
  8276  16E3  35A0               	lslf	___ftpack@arg,f
  8277  16E4  0DA1               	rlf	___ftpack@arg+1,f
  8278  16E5  0DA2               	rlf	___ftpack@arg+2,f
  8279  16E6  0B89               	decfsz	9,f
  8280  16E7  2EE3               	goto	u4655
  8281  16E8                     l4740:	
  8282  16E8  1BA1               	btfsc	___ftpack@arg+1,7
  8283  16E9  2EEE               	goto	l878
  8284  16EA  3002               	movlw	2
  8285  16EB  0223               	subwf	___ftpack@exp,w
  8286  16EC  1803               	skipnc
  8287  16ED  2EE0               	goto	l4738
  8288  16EE                     l878:	
  8289  16EE  1823               	btfsc	___ftpack@exp,0
  8290  16EF  2EF6               	goto	l879
  8291  16F0  30FF               	movlw	255
  8292  16F1  05A0               	andwf	___ftpack@arg,f
  8293  16F2  307F               	movlw	127
  8294  16F3  05A1               	andwf	___ftpack@arg+1,f
  8295  16F4  30FF               	movlw	255
  8296  16F5  05A2               	andwf	___ftpack@arg+2,f
  8297  16F6                     l879:	
  8298  16F6  1003               	clrc
  8299  16F7  0CA3               	rrf	___ftpack@exp,f
  8300  16F8  0823               	movf	___ftpack@exp,w
  8301  16F9  00A5               	movwf	??___ftpack
  8302  16FA  01A6               	clrf	??___ftpack+1
  8303  16FB  01A7               	clrf	??___ftpack+2
  8304  16FC  3010               	movlw	16
  8305  16FD                     u4695:	
  8306  16FD  35A5               	lslf	??___ftpack,f
  8307  16FE  0DA6               	rlf	??___ftpack+1,f
  8308  16FF  0DA7               	rlf	??___ftpack+2,f
  8309  1700  0B89               	decfsz	9,f
  8310  1701  2EFD               	goto	u4695
  8311  1702  0825               	movf	??___ftpack,w
  8312  1703  04A0               	iorwf	___ftpack@arg,f
  8313  1704  0826               	movf	??___ftpack+1,w
  8314  1705  04A1               	iorwf	___ftpack@arg+1,f
  8315  1706  0827               	movf	??___ftpack+2,w
  8316  1707  04A2               	iorwf	___ftpack@arg+2,f
  8317  1708  0824               	movf	___ftpack@sign,w
  8318  1709  1903               	btfsc	3,2
  8319  170A  0008               	return
  8320  170B  17A2               	bsf	___ftpack@arg+2,7
  8321  170C  0008               	return
  8322  170D                     __end_of___ftpack:	
  8323                           
  8324                           	psect	text25
  8325  0A5F                     __ptext25:	
  8326 ;; *************** function _applianceControl *****************
  8327 ;; Defined at:
  8328 ;;		line 25 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\include\AutomationNew.h"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;  charSwitchMS    1    wreg     unsigned char 
  8331 ;;  charSwitchLS    1   13[BANK0 ] unsigned char 
  8332 ;;  charSwitchST    1   14[BANK0 ] unsigned char 
  8333 ;;  chDimmerSpee    1   15[BANK0 ] unsigned char 
  8334 ;;  chDimmerSpee    1   16[BANK0 ] unsigned char 
  8335 ;;  charParental    1   17[BANK0 ] unsigned char 
  8336 ;;  charFinalFra    1   18[BANK0 ] unsigned char 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  charSwitchMS    1   23[BANK0 ] unsigned char 
  8339 ;;  integerSwitc    2   32[BANK0 ] int 
  8340 ;;  currentState    2   30[BANK0 ] int 
  8341 ;;  integerSwitc    2   28[BANK0 ] int 
  8342 ;;  dimmerSpeedS    2   26[BANK0 ] unsigned char [2]
  8343 ;;  switchNumber    2   24[BANK0 ] unsigned char [2]
  8344 ;;  integerSpeed    2   21[BANK0 ] int 
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  1    wreg      void 
  8347 ;; Registers used:
  8348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8354 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  8355 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0
  8356 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8357 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0
  8358 ;;Total ram usage:       21 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    4
  8361 ;; This function calls:
  8362 ;;		_atoi
  8363 ;;		_sendAcknowledgment
  8364 ;; This function is called by:
  8365 ;;		_main
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           
  8370                           ;psect for function _applianceControl
  8371  0A5F                     _applianceControl:	
  8372                           
  8373                           ;incstack = 0
  8374                           ; Regs used in _applianceControl: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8375                           ;applianceControl@charSwitchMSB stored from wreg
  8376  0A5F  0020               	movlb	0	; select bank0
  8377  0A60  00B7               	movwf	applianceControl@charSwitchMSB
  8378                           
  8379                           ;AutomationNew.h: 29: int integerSwitchNumber = 0;
  8380  0A61  01BC               	clrf	applianceControl@integerSwitchNumber
  8381  0A62  01BD               	clrf	applianceControl@integerSwitchNumber+1
  8382                           
  8383                           ;AutomationNew.h: 30: int integerSwitchState = 0;
  8384  0A63  01C0               	clrf	applianceControl@integerSwitchState
  8385  0A64  01C1               	clrf	applianceControl@integerSwitchState+1
  8386                           
  8387                           ;AutomationNew.h: 31: int integerSpeed = 0;
  8388  0A65  01B5               	clrf	applianceControl@integerSpeed
  8389  0A66  01B6               	clrf	applianceControl@integerSpeed+1
  8390                           
  8391                           ;AutomationNew.h: 32: int currentStateBufferPositions=0;
  8392  0A67  01BE               	clrf	applianceControl@currentStateBufferPositions
  8393  0A68  01BF               	clrf	applianceControl@currentStateBufferPositions+1
  8394                           
  8395                           ;AutomationNew.h: 35: char switchNumberStringBuffer[2]="#";
  8396  0A69  0022               	movlb	2	; select bank2
  8397  0A6A  0867               	movf	(applianceControl@F4004+1)^(0+256),w
  8398  0A6B  0020               	movlb	0	; select bank0
  8399  0A6C  00B9               	movwf	applianceControl@switchNumberStringBuffer+1
  8400  0A6D  0022               	movlb	2	; select bank2
  8401  0A6E  0866               	movf	applianceControl@F4004^(0+256),w
  8402  0A6F  0020               	movlb	0	; select bank0
  8403  0A70  00B8               	movwf	applianceControl@switchNumberStringBuffer
  8404                           
  8405                           ;AutomationNew.h: 36: char dimmerSpeedStringBuffer[2]="#";
  8406  0A71  0022               	movlb	2	; select bank2
  8407  0A72  0865               	movf	(applianceControl@F4006+1)^(0+256),w
  8408  0A73  0020               	movlb	0	; select bank0
  8409  0A74  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  8410  0A75  0022               	movlb	2	; select bank2
  8411  0A76  0864               	movf	applianceControl@F4006^(0+256),w
  8412  0A77  0020               	movlb	0	; select bank0
  8413  0A78  00BA               	movwf	applianceControl@dimmerSpeedStringBuffer
  8414                           
  8415                           ;AutomationNew.h: 38: switchNumberStringBuffer[0]=charSwitchMSB;
  8416  0A79  0837               	movf	applianceControl@charSwitchMSB,w
  8417  0A7A  00B3               	movwf	??_applianceControl
  8418  0A7B  0833               	movf	??_applianceControl,w
  8419  0A7C  00B8               	movwf	applianceControl@switchNumberStringBuffer
  8420                           
  8421                           ;AutomationNew.h: 39: switchNumberStringBuffer[1]=charSwitchLSB;
  8422  0A7D  082D               	movf	applianceControl@charSwitchLSB,w
  8423  0A7E  00B3               	movwf	??_applianceControl
  8424  0A7F  0833               	movf	??_applianceControl,w
  8425  0A80  00B9               	movwf	applianceControl@switchNumberStringBuffer+1
  8426                           
  8427                           ;AutomationNew.h: 40: integerSwitchNumber = atoi(switchNumberStringBuffer);
  8428  0A81  3038               	movlw	low applianceControl@switchNumberStringBuffer
  8429  0A82  00A6               	movwf	atoi@s
  8430  0A83  3000               	movlw	high applianceControl@switchNumberStringBuffer
  8431  0A84  00A7               	movwf	atoi@s+1
  8432  0A85  3197  270D  318A   	fcall	_atoi
  8433  0A88  0020               	movlb	0	; select bank0
  8434  0A89  0827               	movf	?_atoi+1,w
  8435  0A8A  00BD               	movwf	applianceControl@integerSwitchNumber+1
  8436  0A8B  0826               	movf	?_atoi,w
  8437  0A8C  00BC               	movwf	applianceControl@integerSwitchNumber
  8438                           
  8439                           ;AutomationNew.h: 44: integerSwitchState = charSwitchSTATE-'0';
  8440  0A8D  082E               	movf	applianceControl@charSwitchSTATE,w
  8441  0A8E  3ED0               	addlw	208
  8442  0A8F  00C0               	movwf	applianceControl@integerSwitchState
  8443  0A90  30FF               	movlw	255
  8444  0A91  1803               	skipnc
  8445  0A92  3000               	movlw	0
  8446  0A93  00C1               	movwf	applianceControl@integerSwitchState+1
  8447                           
  8448                           ;AutomationNew.h: 47: dimmerSpeedStringBuffer[0]=chDimmerSpeedMSB;
  8449  0A94  082F               	movf	applianceControl@chDimmerSpeedMSB,w
  8450  0A95  00B3               	movwf	??_applianceControl
  8451  0A96  0833               	movf	??_applianceControl,w
  8452  0A97  00BA               	movwf	applianceControl@dimmerSpeedStringBuffer
  8453                           
  8454                           ;AutomationNew.h: 48: dimmerSpeedStringBuffer[1]=chDimmerSpeedLSB;
  8455  0A98  0830               	movf	applianceControl@chDimmerSpeedLSB,w
  8456  0A99  00B3               	movwf	??_applianceControl
  8457  0A9A  0833               	movf	??_applianceControl,w
  8458  0A9B  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  8459                           
  8460                           ;AutomationNew.h: 49: integerSpeed = atoi(dimmerSpeedStringBuffer);
  8461  0A9C  303A               	movlw	low applianceControl@dimmerSpeedStringBuffer
  8462  0A9D  00A6               	movwf	atoi@s
  8463  0A9E  3000               	movlw	high applianceControl@dimmerSpeedStringBuffer
  8464  0A9F  00A7               	movwf	atoi@s+1
  8465  0AA0  3197  270D  318A   	fcall	_atoi
  8466  0AA3  0020               	movlb	0	; select bank0
  8467  0AA4  0827               	movf	?_atoi+1,w
  8468  0AA5  00B6               	movwf	applianceControl@integerSpeed+1
  8469  0AA6  0826               	movf	?_atoi,w
  8470  0AA7  00B5               	movwf	applianceControl@integerSpeed
  8471                           
  8472                           ;AutomationNew.h: 53: parentalLockBuffer[integerSwitchNumber] = charParentalControl;
  8473  0AA8  0831               	movf	applianceControl@charParentalControl,w
  8474  0AA9  00B3               	movwf	??_applianceControl
  8475  0AAA  083C               	movf	applianceControl@integerSwitchNumber,w
  8476  0AAB  3EC0               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  8477  0AAC  0086               	movwf	6
  8478  0AAD  3002               	movlw	2	; select bank5/6
  8479  0AAE  0087               	movwf	7
  8480  0AAF  0833               	movf	??_applianceControl,w
  8481  0AB0  0081               	movwf	1
  8482                           
  8483                           ;AutomationNew.h: 54: copy_parentalLockBuffer[integerSwitchNumber]=parentalLockBuffer[in
      +                          tegerSwitchNumber];
  8484  0AB1  083C               	movf	applianceControl@integerSwitchNumber,w
  8485  0AB2  3EC0               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  8486  0AB3  0086               	movwf	6
  8487  0AB4  3002               	movlw	2	; select bank5/6
  8488  0AB5  0087               	movwf	7
  8489  0AB6  0801               	movf	1,w
  8490  0AB7  00B3               	movwf	??_applianceControl
  8491  0AB8  083C               	movf	applianceControl@integerSwitchNumber,w
  8492  0AB9  3EB8               	addlw	(low (_copy_parentalLockBuffer| (0+256)))& (0+255)
  8493  0ABA  0086               	movwf	6
  8494  0ABB  3001               	movlw	1	; select bank3/4
  8495  0ABC  0087               	movwf	7
  8496  0ABD  0833               	movf	??_applianceControl,w
  8497  0ABE  0081               	movwf	1
  8498                           
  8499                           ;AutomationNew.h: 57: currentStateBufferPositions = ((1+4*(integerSwitchNumber))-5);
  8500  0ABF  083D               	movf	applianceControl@integerSwitchNumber+1,w
  8501  0AC0  00B4               	movwf	??_applianceControl+1
  8502  0AC1  083C               	movf	applianceControl@integerSwitchNumber,w
  8503  0AC2  00B3               	movwf	??_applianceControl
  8504  0AC3  35B3               	lslf	??_applianceControl,f
  8505  0AC4  0DB4               	rlf	??_applianceControl+1,f
  8506  0AC5  35B3               	lslf	??_applianceControl,f
  8507  0AC6  0DB4               	rlf	??_applianceControl+1,f
  8508  0AC7  0833               	movf	??_applianceControl,w
  8509  0AC8  3EFC               	addlw	252
  8510  0AC9  00BE               	movwf	applianceControl@currentStateBufferPositions
  8511  0ACA  30FF               	movlw	255
  8512  0ACB  3D34               	addwfc	??_applianceControl+1,w
  8513  0ACC  00BF               	movwf	applianceControl@currentStateBufferPositions+1
  8514                           
  8515                           ;AutomationNew.h: 58: currentStateBuffer[currentStateBufferPositions++] = 'G';
  8516  0ACD  3047               	movlw	71
  8517  0ACE  00B3               	movwf	??_applianceControl
  8518  0ACF  083E               	movf	applianceControl@currentStateBufferPositions,w
  8519  0AD0  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8520  0AD1  0086               	movwf	6
  8521  0AD2  3003               	movlw	3	; select bank7/8
  8522  0AD3  0087               	movwf	7
  8523  0AD4  0833               	movf	??_applianceControl,w
  8524  0AD5  0081               	movwf	1
  8525  0AD6  3001               	movlw	1
  8526  0AD7  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8527  0AD8  3000               	movlw	0
  8528  0AD9  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8529                           
  8530                           ;AutomationNew.h: 59: currentStateBuffer[currentStateBufferPositions++] = charSwitchSTAT
      +                          E;
  8531  0ADA  082E               	movf	applianceControl@charSwitchSTATE,w
  8532  0ADB  00B3               	movwf	??_applianceControl
  8533  0ADC  083E               	movf	applianceControl@currentStateBufferPositions,w
  8534  0ADD  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8535  0ADE  0086               	movwf	6
  8536  0ADF  3003               	movlw	3	; select bank7/8
  8537  0AE0  0087               	movwf	7
  8538  0AE1  0833               	movf	??_applianceControl,w
  8539  0AE2  0081               	movwf	1
  8540  0AE3  3001               	movlw	1
  8541  0AE4  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8542  0AE5  3000               	movlw	0
  8543  0AE6  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8544                           
  8545                           ;AutomationNew.h: 60: currentStateBuffer[currentStateBufferPositions++] = charSwitchMSB;
  8546  0AE7  0837               	movf	applianceControl@charSwitchMSB,w
  8547  0AE8  00B3               	movwf	??_applianceControl
  8548  0AE9  083E               	movf	applianceControl@currentStateBufferPositions,w
  8549  0AEA  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8550  0AEB  0086               	movwf	6
  8551  0AEC  3003               	movlw	3	; select bank7/8
  8552  0AED  0087               	movwf	7
  8553  0AEE  0833               	movf	??_applianceControl,w
  8554  0AEF  0081               	movwf	1
  8555  0AF0  3001               	movlw	1
  8556  0AF1  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8557  0AF2  3000               	movlw	0
  8558  0AF3  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8559                           
  8560                           ;AutomationNew.h: 61: currentStateBuffer[currentStateBufferPositions] = charSwitchLSB;
  8561  0AF4  082D               	movf	applianceControl@charSwitchLSB,w
  8562  0AF5  00B3               	movwf	??_applianceControl
  8563  0AF6  083E               	movf	applianceControl@currentStateBufferPositions,w
  8564  0AF7  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8565  0AF8  0086               	movwf	6
  8566  0AF9  3003               	movlw	3	; select bank7/8
  8567  0AFA  0087               	movwf	7
  8568  0AFB  0833               	movf	??_applianceControl,w
  8569  0AFC  0081               	movwf	1
  8570                           
  8571                           ;AutomationNew.h: 63: currentStateBufferPositions-=3;
  8572  0AFD  30FD               	movlw	253
  8573  0AFE  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8574  0AFF  30FF               	movlw	255
  8575  0B00  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8576                           
  8577                           ;AutomationNew.h: 64: if(charFinalFrameState == '1')
  8578  0B01  3031               	movlw	49
  8579  0B02  0632               	xorwf	applianceControl@charFinalFrameState,w
  8580  0B03  1D03               	btfss	3,2
  8581  0B04  2B47               	goto	l5564
  8582                           
  8583                           ;AutomationNew.h: 65: {
  8584                           ;AutomationNew.h: 66: sendAcknowledgment(currentStateBuffer+currentStateBufferPositions)
      +                          ;
  8585  0B05  083E               	movf	applianceControl@currentStateBufferPositions,w
  8586  0B06  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8587  0B07  3193  2344  318A   	fcall	_sendAcknowledgment
  8588                           
  8589                           ;AutomationNew.h: 67: }
  8590                           ;AutomationNew.h: 69: switch(integerSwitchNumber){
  8591  0B0A  2B47               	goto	l5564
  8592  0B0B                     l5546:	
  8593                           ;AutomationNew.h: 70: case 1:
  8594                           
  8595                           
  8596                           ;AutomationNew.h: 71: {
  8597                           ;AutomationNew.h: 72: PORTEbits.RE0 = integerSwitchState;
  8598  0B0B  0020               	movlb	0	; select bank0
  8599  0B0C  0C40               	rrf	applianceControl@integerSwitchState,w
  8600  0B0D  1C03               	skipc
  8601  0B0E  1010               	bcf	16,0	;volatile
  8602  0B0F  1803               	skipnc
  8603  0B10  1410               	bsf	16,0	;volatile
  8604                           
  8605                           ;AutomationNew.h: 73: }break;
  8606  0B11  0008               	return
  8607  0B12                     l5548:	
  8608                           ;AutomationNew.h: 75: case 2:
  8609                           
  8610                           
  8611                           ;AutomationNew.h: 76: {
  8612                           ;AutomationNew.h: 77: PORTEbits.RE1 = integerSwitchState;
  8613  0B12  0C40               	rrf	applianceControl@integerSwitchState,w
  8614  0B13  1C03               	skipc
  8615  0B14  1090               	bcf	16,1	;volatile
  8616  0B15  1803               	skipnc
  8617  0B16  1490               	bsf	16,1	;volatile
  8618                           
  8619                           ;AutomationNew.h: 79: } break;
  8620  0B17  0008               	return
  8621  0B18                     l5550:	
  8622                           ;AutomationNew.h: 80: case 3:
  8623                           
  8624                           
  8625                           ;AutomationNew.h: 81: {
  8626                           ;AutomationNew.h: 82: PORTGbits.RG0 = integerSwitchState;
  8627  0B18  0C40               	rrf	applianceControl@integerSwitchState,w
  8628  0B19  0025               	movlb	5	; select bank5
  8629  0B1A  1C03               	skipc
  8630  0B1B  100D               	bcf	13,0	;volatile
  8631  0B1C  1803               	skipnc
  8632  0B1D  140D               	bsf	13,0	;volatile
  8633                           
  8634                           ;AutomationNew.h: 84: } break;
  8635  0B1E  0008               	return
  8636  0B1F                     l5552:	
  8637                           ;AutomationNew.h: 86: case 4:
  8638                           
  8639                           
  8640                           ;AutomationNew.h: 87: {
  8641                           ;AutomationNew.h: 88: PORTGbits.RG3 = integerSwitchState;
  8642  0B1F  0020               	movlb	0	; select bank0
  8643  0B20  0C40               	rrf	applianceControl@integerSwitchState,w
  8644  0B21  0025               	movlb	5	; select bank5
  8645  0B22  1C03               	skipc
  8646  0B23  118D               	bcf	13,3	;volatile
  8647  0B24  1803               	skipnc
  8648  0B25  158D               	bsf	13,3	;volatile
  8649                           
  8650                           ;AutomationNew.h: 89: }break;
  8651  0B26  0008               	return
  8652  0B27                     l5554:	
  8653                           ;AutomationNew.h: 90: case 5:
  8654                           
  8655                           
  8656                           ;AutomationNew.h: 91: {
  8657                           ;AutomationNew.h: 92: PORTGbits.RG4 = integerSwitchState;
  8658  0B27  0020               	movlb	0	; select bank0
  8659  0B28  0C40               	rrf	applianceControl@integerSwitchState,w
  8660  0B29  0025               	movlb	5	; select bank5
  8661  0B2A  1C03               	skipc
  8662  0B2B  120D               	bcf	13,4	;volatile
  8663  0B2C  1803               	skipnc
  8664  0B2D  160D               	bsf	13,4	;volatile
  8665                           
  8666                           ;AutomationNew.h: 93: }break;
  8667  0B2E  0008               	return
  8668  0B2F                     l5556:	
  8669                           ;AutomationNew.h: 94: case 6:
  8670                           
  8671                           
  8672                           ;AutomationNew.h: 95: {
  8673                           ;AutomationNew.h: 96: PORTFbits.RF6 = integerSwitchState;
  8674  0B2F  0020               	movlb	0	; select bank0
  8675  0B30  0C40               	rrf	applianceControl@integerSwitchState,w
  8676  0B31  0025               	movlb	5	; select bank5
  8677  0B32  1C03               	skipc
  8678  0B33  130C               	bcf	12,6	;volatile
  8679  0B34  1803               	skipnc
  8680  0B35  170C               	bsf	12,6	;volatile
  8681                           
  8682                           ;AutomationNew.h: 97: }break;
  8683  0B36  0008               	return
  8684  0B37                     l5558:	
  8685                           ;AutomationNew.h: 99: case 7:
  8686                           
  8687                           
  8688                           ;AutomationNew.h: 100: {
  8689                           ;AutomationNew.h: 101: PORTFbits.RF5 = integerSwitchState;
  8690  0B37  0020               	movlb	0	; select bank0
  8691  0B38  0C40               	rrf	applianceControl@integerSwitchState,w
  8692  0B39  0025               	movlb	5	; select bank5
  8693  0B3A  1C03               	skipc
  8694  0B3B  128C               	bcf	12,5	;volatile
  8695  0B3C  1803               	skipnc
  8696  0B3D  168C               	bsf	12,5	;volatile
  8697                           
  8698                           ;AutomationNew.h: 102: }break;
  8699  0B3E  0008               	return
  8700  0B3F                     l5560:	
  8701                           ;AutomationNew.h: 104: case 8:
  8702                           
  8703                           
  8704                           ;AutomationNew.h: 105: {
  8705                           ;AutomationNew.h: 106: PORTFbits.RF4 = integerSwitchState;
  8706  0B3F  0020               	movlb	0	; select bank0
  8707  0B40  0C40               	rrf	applianceControl@integerSwitchState,w
  8708  0B41  0025               	movlb	5	; select bank5
  8709  0B42  1C03               	skipc
  8710  0B43  120C               	bcf	12,4	;volatile
  8711  0B44  1803               	skipnc
  8712  0B45  160C               	bsf	12,4	;volatile
  8713                           
  8714                           ;AutomationNew.h: 124: }
  8715                           
  8716                           ;AutomationNew.h: 123: break;
  8717                           
  8718                           ;AutomationNew.h: 122: default:
  8719                           
  8720                           ;AutomationNew.h: 107: }break;
  8721  0B46  0008               	return
  8722  0B47                     l5564:	
  8723                           
  8724                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8725                           ; Switch size 1, requested type "space"
  8726                           ; Number of cases is 1, Range of values is 0 to 0
  8727                           ; switch strategies available:
  8728                           ; Name         Instructions Cycles
  8729                           ; simple_byte            4     3 (average)
  8730                           ; direct_byte            8     6 (fixed)
  8731                           ; jumptable            260     6 (fixed)
  8732                           ;	Chosen strategy is simple_byte
  8733  0B47  0020               	movlb	0	; select bank0
  8734  0B48  083D               	movf	applianceControl@integerSwitchNumber+1,w
  8735  0B49  3A00               	xorlw	0	; case 0
  8736  0B4A  1903               	skipnz
  8737  0B4B  2B4D               	goto	l6284
  8738  0B4C  2B5A               	goto	l443
  8739  0B4D                     l6284:	
  8740                           
  8741                           ; Switch size 1, requested type "space"
  8742                           ; Number of cases is 8, Range of values is 1 to 8
  8743                           ; switch strategies available:
  8744                           ; Name         Instructions Cycles
  8745                           ; direct_byte           25     9 (fixed)
  8746                           ; simple_byte           25    13 (average)
  8747                           ; jumptable            263     9 (fixed)
  8748                           ;	Chosen strategy is direct_byte
  8749  0B4D  083C               	movf	applianceControl@integerSwitchNumber,w
  8750  0B4E  3EFF               	addlw	-1
  8751  0B4F  1C03               	skipc
  8752  0B50  0008               	return
  8753  0B51  0084               	movwf	4
  8754  0B52  3008               	movlw	8
  8755  0B53  0204               	subwf	4,w
  8756  0B54  1803               	skipnc
  8757  0B55  0008               	return
  8758  0B56  3190               	movlp	high S6286
  8759  0B57  3504               	lslf	4,w
  8760  0B58  3E10               	addlw	low S6286
  8761  0B59  0082               	movwf	2
  8762  0B5A                     l443:	
  8763  0B5A  0008               	return
  8764  0B5B                     __end_of_applianceControl:	
  8765                           
  8766                           	psect	swtext2
  8767  1010                     __pswtext2:	
  8768  1010                     S6286:	
  8769  1010  318B  2B0B         	ljmp	l5546
  8770  1012  318B  2B12         	ljmp	l5548
  8771  1014  318B  2B18         	ljmp	l5550
  8772  1016  318B  2B1F         	ljmp	l5552
  8773  1018  318B  2B27         	ljmp	l5554
  8774  101A  318B  2B2F         	ljmp	l5556
  8775  101C  318B  2B37         	ljmp	l5558
  8776  101E  318B  2B3F         	ljmp	l5560
  8777                           
  8778                           	psect	text26
  8779  1344                     __ptext26:	
  8780 ;; *************** function _sendAcknowledgment *****************
  8781 ;; Defined at:
  8782 ;;		line 128 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\include\AutomationNew.h"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;  currentState    1    wreg     PTR unsigned char 
  8785 ;;		 -> currentStateBuffer(74), 
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;  currentState    1    3[BANK0 ] PTR unsigned char 
  8788 ;;		 -> currentStateBuffer(74), 
  8789 ;;  Tx_count        2    1[BANK0 ] int 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;                  1    wreg      void 
  8792 ;; Registers used:
  8793 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  8800 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  8801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  8802 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  8803 ;;Total ram usage:        4 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    2
  8806 ;; This function calls:
  8807 ;;		Nothing
  8808 ;; This function is called by:
  8809 ;;		_applianceControl
  8810 ;; This function uses a non-reentrant model
  8811 ;;
  8812                           
  8813                           
  8814                           ;psect for function _sendAcknowledgment
  8815  1344                     _sendAcknowledgment:	
  8816                           
  8817                           ;incstack = 0
  8818                           ; Regs used in _sendAcknowledgment: [wreg+fsr1l+fsr1h+status,2+status,0]
  8819                           ;sendAcknowledgment@currentStateBuffer stored from wreg
  8820  1344  0020               	movlb	0	; select bank0
  8821  1345  00A3               	movwf	sendAcknowledgment@currentStateBuffer
  8822                           
  8823                           ;AutomationNew.h: 129: int Tx_count=0;
  8824  1346  01A1               	clrf	sendAcknowledgment@Tx_count
  8825  1347  01A2               	clrf	sendAcknowledgment@Tx_count+1
  8826  1348                     l4984:	
  8827                           ;AutomationNew.h: 130: while(Tx_count!=4)
  8828                           
  8829  1348  3004               	movlw	4
  8830  1349  0621               	xorwf	sendAcknowledgment@Tx_count,w
  8831  134A  0422               	iorwf	sendAcknowledgment@Tx_count+1,w
  8832  134B  1903               	btfsc	3,2
  8833  134C  0008               	return
  8834  134D                     l448:	
  8835                           ;AutomationNew.h: 131: {
  8836                           ;AutomationNew.h: 132: while (!TX1STAbits.TRMT);
  8837                           
  8838  134D  0023               	movlb	3	; select bank3
  8839  134E  1C9E               	btfss	30,1	;volatile
  8840  134F  2B4D               	goto	l448
  8841                           
  8842                           ;AutomationNew.h: 133: TX1REG = *currentStateBuffer;
  8843  1350  0020               	movlb	0	; select bank0
  8844  1351  0823               	movf	sendAcknowledgment@currentStateBuffer,w
  8845  1352  0086               	movwf	6
  8846  1353  3003               	movlw	3	; select bank6/7
  8847  1354  0087               	movwf	7
  8848  1355  0801               	movf	1,w
  8849  1356  0023               	movlb	3	; select bank3
  8850  1357  009A               	movwf	26	;volatile
  8851                           
  8852                           ;AutomationNew.h: 134: *currentStateBuffer++;
  8853  1358  3001               	movlw	1
  8854  1359  0020               	movlb	0	; select bank0
  8855  135A  00A0               	movwf	??_sendAcknowledgment
  8856  135B  0820               	movf	??_sendAcknowledgment,w
  8857  135C  07A3               	addwf	sendAcknowledgment@currentStateBuffer,f
  8858                           
  8859                           ;AutomationNew.h: 135: Tx_count++;
  8860  135D  3001               	movlw	1
  8861  135E  07A1               	addwf	sendAcknowledgment@Tx_count,f
  8862  135F  3000               	movlw	0
  8863  1360  3DA2               	addwfc	sendAcknowledgment@Tx_count+1,f
  8864  1361  2B48               	goto	l4984
  8865  1362                     __end_of_sendAcknowledgment:	
  8866                           
  8867                           	psect	text27
  8868  170D                     __ptext27:	
  8869 ;; *************** function _atoi *****************
  8870 ;; Defined at:
  8871 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  8874 ;;		 -> ChildLockbuffer(2), switchstatusbuffer(2), switchNumberBuffer(3), copymainReceivedDataBuffer(32), 
  8875 ;;		 -> applianceControl@dimmerSpeedStringBuffer(2), applianceControl@switchNumberStringBuffer(2), NULL(0), 
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;  a               2   11[BANK0 ] int 
  8878 ;;  sign            1   10[BANK0 ] unsigned char 
  8879 ;; Return value:  Size  Location     Type
  8880 ;;                  2    6[BANK0 ] int 
  8881 ;; Registers used:
  8882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8883 ;; Tracked objects:
  8884 ;;		On entry : 0/0
  8885 ;;		On exit  : 0/0
  8886 ;;		Unchanged: 0/0
  8887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8888 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  8889 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  8890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8891 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  8892 ;;Total ram usage:        7 bytes
  8893 ;; Hardware stack levels used:    1
  8894 ;; Hardware stack levels required when called:    3
  8895 ;; This function calls:
  8896 ;;		___wmul
  8897 ;;		_isdigit
  8898 ;; This function is called by:
  8899 ;;		_applicationControlRGB
  8900 ;;		_applianceControl
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           
  8905                           ;psect for function _atoi
  8906  170D                     _atoi:	
  8907  170D                     l4804:	
  8908                           ;incstack = 0
  8909                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8910                           
  8911  170D  0020               	movlb	0	; select bank0
  8912  170E  0826               	movf	atoi@s,w
  8913  170F  0086               	movwf	6
  8914  1710  0827               	movf	atoi@s+1,w
  8915  1711  0087               	movwf	7
  8916  1712  3020               	movlw	32
  8917  1713  0601               	xorwf	1,w
  8918  1714  1D03               	btfss	3,2
  8919  1715  2F1C               	goto	l4806
  8920  1716                     l4802:	
  8921  1716  3001               	movlw	1
  8922  1717  0020               	movlb	0	; select bank0
  8923  1718  07A6               	addwf	atoi@s,f
  8924  1719  3000               	movlw	0
  8925  171A  3DA7               	addwfc	atoi@s+1,f
  8926  171B  2F0D               	goto	l4804
  8927  171C                     l4806:	
  8928  171C  0826               	movf	atoi@s,w
  8929  171D  0086               	movwf	6
  8930  171E  0827               	movf	atoi@s+1,w
  8931  171F  0087               	movwf	7
  8932  1720  3009               	movlw	9
  8933  1721  0601               	xorwf	1,w
  8934  1722  1903               	btfsc	3,2
  8935  1723  2F16               	goto	l4802
  8936  1724  01AB               	clrf	atoi@a
  8937  1725  01AC               	clrf	atoi@a+1
  8938  1726  01AA               	clrf	atoi@sign
  8939  1727  0826               	movf	atoi@s,w
  8940  1728  0086               	movwf	6
  8941  1729  0827               	movf	atoi@s+1,w
  8942  172A  0087               	movwf	7
  8943  172B  302D               	movlw	45
  8944  172C  0601               	xorwf	1,w
  8945  172D  1D03               	btfss	3,2
  8946  172E  2F34               	goto	l4816
  8947  172F  3001               	movlw	1
  8948  1730  00A8               	movwf	??_atoi
  8949  1731  0828               	movf	??_atoi,w
  8950  1732  07AA               	addwf	atoi@sign,f
  8951  1733  2F3C               	goto	l4822
  8952  1734                     l4816:	
  8953  1734  0826               	movf	atoi@s,w
  8954  1735  0086               	movwf	6
  8955  1736  0827               	movf	atoi@s+1,w
  8956  1737  0087               	movwf	7
  8957  1738  302B               	movlw	43
  8958  1739  0601               	xorwf	1,w
  8959  173A  1D03               	btfss	3,2
  8960  173B  2F40               	goto	l4824
  8961  173C                     l4822:	
  8962  173C  3001               	movlw	1
  8963  173D  07A6               	addwf	atoi@s,f
  8964  173E  3000               	movlw	0
  8965  173F  3DA7               	addwfc	atoi@s+1,f
  8966  1740                     l4824:	
  8967  1740  0826               	movf	atoi@s,w
  8968  1741  0086               	movwf	6
  8969  1742  0827               	movf	atoi@s+1,w
  8970  1743  0087               	movwf	7
  8971  1744  0801               	movf	1,w
  8972  1745  3192  220F  3197   	fcall	_isdigit
  8973  1748  1C03               	btfss	3,0
  8974  1749  2F69               	goto	l4826
  8975  174A  0020               	movlb	0	; select bank0
  8976  174B  082C               	movf	atoi@a+1,w
  8977  174C  00A1               	movwf	___wmul@multiplier+1
  8978  174D  082B               	movf	atoi@a,w
  8979  174E  00A0               	movwf	___wmul@multiplier
  8980  174F  300A               	movlw	10
  8981  1750  00A2               	movwf	___wmul@multiplicand
  8982  1751  3000               	movlw	0
  8983  1752  00A3               	movwf	___wmul@multiplicand+1
  8984  1753  3192  22EF  3197   	fcall	___wmul
  8985  1756  0020               	movlb	0	; select bank0
  8986  1757  0826               	movf	atoi@s,w
  8987  1758  0086               	movwf	6
  8988  1759  0827               	movf	atoi@s+1,w
  8989  175A  0087               	movwf	7
  8990  175B  0801               	movf	1,w
  8991  175C  0720               	addwf	?___wmul,w
  8992  175D  00A8               	movwf	??_atoi
  8993  175E  0821               	movf	?___wmul+1,w
  8994  175F  1803               	skipnc
  8995  1760  0A21               	incf	?___wmul+1,w
  8996  1761  00A9               	movwf	??_atoi+1
  8997  1762  0828               	movf	??_atoi,w
  8998  1763  3ED0               	addlw	208
  8999  1764  00AB               	movwf	atoi@a
  9000  1765  30FF               	movlw	255
  9001  1766  3D29               	addwfc	??_atoi+1,w
  9002  1767  00AC               	movwf	atoi@a+1
  9003  1768  2F3C               	goto	l4822
  9004  1769                     l4826:	
  9005  1769  0020               	movlb	0	; select bank0
  9006  176A  082A               	movf	atoi@sign,w
  9007  176B  1903               	btfsc	3,2
  9008  176C  2F79               	goto	l4832
  9009  176D  092B               	comf	atoi@a,w
  9010  176E  00A8               	movwf	??_atoi
  9011  176F  092C               	comf	atoi@a+1,w
  9012  1770  00A9               	movwf	??_atoi+1
  9013  1771  0AA8               	incf	??_atoi,f
  9014  1772  1903               	skipnz
  9015  1773  0AA9               	incf	??_atoi+1,f
  9016  1774  0828               	movf	??_atoi,w
  9017  1775  00A6               	movwf	?_atoi
  9018  1776  0829               	movf	??_atoi+1,w
  9019  1777  00A7               	movwf	?_atoi+1
  9020  1778  0008               	return
  9021  1779                     l4832:	
  9022  1779  082C               	movf	atoi@a+1,w
  9023  177A  00A7               	movwf	?_atoi+1
  9024  177B  082B               	movf	atoi@a,w
  9025  177C  00A6               	movwf	?_atoi
  9026  177D  0008               	return
  9027  177E                     __end_of_atoi:	
  9028                           
  9029                           	psect	text28
  9030  120F                     __ptext28:	
  9031 ;; *************** function _isdigit *****************
  9032 ;; Defined at:
  9033 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;  c               1    wreg     unsigned char 
  9036 ;; Auto vars:     Size  Location     Type
  9037 ;;  c               1    1[BANK0 ] unsigned char 
  9038 ;; Return value:  Size  Location     Type
  9039 ;;		None               void
  9040 ;; Registers used:
  9041 ;;		wreg, status,2, status,0
  9042 ;; Tracked objects:
  9043 ;;		On entry : 0/0
  9044 ;;		On exit  : 0/0
  9045 ;;		Unchanged: 0/0
  9046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9048 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  9049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  9051 ;;Total ram usage:        2 bytes
  9052 ;; Hardware stack levels used:    1
  9053 ;; Hardware stack levels required when called:    2
  9054 ;; This function calls:
  9055 ;;		Nothing
  9056 ;; This function is called by:
  9057 ;;		_atoi
  9058 ;; This function uses a non-reentrant model
  9059 ;;
  9060                           
  9061                           
  9062                           ;psect for function _isdigit
  9063  120F                     _isdigit:	
  9064                           
  9065                           ;incstack = 0
  9066                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9067                           ;isdigit@c stored from wreg
  9068  120F  0020               	movlb	0	; select bank0
  9069  1210  00A1               	movwf	isdigit@c
  9070  1211  01A0               	clrf	_isdigit$1395
  9071  1212  303A               	movlw	58
  9072  1213  0221               	subwf	isdigit@c,w
  9073  1214  1803               	skipnc
  9074  1215  2A1C               	goto	l4760
  9075  1216  3030               	movlw	48
  9076  1217  0221               	subwf	isdigit@c,w
  9077  1218  1C03               	skipc
  9078  1219  2A1C               	goto	l4760
  9079  121A  01A0               	clrf	_isdigit$1395
  9080  121B  0AA0               	incf	_isdigit$1395,f
  9081  121C                     l4760:	
  9082  121C  0C20               	rrf	_isdigit$1395,w
  9083  121D  0008               	return
  9084  121E                     __end_of_isdigit:	
  9085                           
  9086                           	psect	text29
  9087  12EF                     __ptext29:	
  9088 ;; *************** function ___wmul *****************
  9089 ;; Defined at:
  9090 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9093 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  product         2    4[BANK0 ] unsigned int 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  2    0[BANK0 ] unsigned int 
  9098 ;; Registers used:
  9099 ;;		wreg, status,2, status,0
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9105 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  9106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  9107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9108 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  9109 ;;Total ram usage:        6 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    2
  9112 ;; This function calls:
  9113 ;;		Nothing
  9114 ;; This function is called by:
  9115 ;;		_hexadecimalToDecimal
  9116 ;;		_atoi
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           
  9121                           ;psect for function ___wmul
  9122  12EF                     ___wmul:	
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9126  12EF  0020               	movlb	0	; select bank0
  9127  12F0  01A4               	clrf	___wmul@product
  9128  12F1  01A5               	clrf	___wmul@product+1
  9129  12F2                     l4708:	
  9130  12F2  1C20               	btfss	___wmul@multiplier,0
  9131  12F3  2AF8               	goto	l691
  9132  12F4  0822               	movf	___wmul@multiplicand,w
  9133  12F5  07A4               	addwf	___wmul@product,f
  9134  12F6  0823               	movf	___wmul@multiplicand+1,w
  9135  12F7  3DA5               	addwfc	___wmul@product+1,f
  9136  12F8                     l691:	
  9137  12F8  3001               	movlw	1
  9138  12F9                     u4565:	
  9139  12F9  35A2               	lslf	___wmul@multiplicand,f
  9140  12FA  0DA3               	rlf	___wmul@multiplicand+1,f
  9141  12FB  0B89               	decfsz	9,f
  9142  12FC  2AF9               	goto	u4565
  9143  12FD  3001               	movlw	1
  9144  12FE                     u4575:	
  9145  12FE  36A1               	lsrf	___wmul@multiplier+1,f
  9146  12FF  0CA0               	rrf	___wmul@multiplier,f
  9147  1300  0B89               	decfsz	9,f
  9148  1301  2AFE               	goto	u4575
  9149  1302  0820               	movf	___wmul@multiplier,w
  9150  1303  0421               	iorwf	___wmul@multiplier+1,w
  9151  1304  1D03               	btfss	3,2
  9152  1305  2AF2               	goto	l4708
  9153  1306  0825               	movf	___wmul@product+1,w
  9154  1307  00A1               	movwf	?___wmul+1
  9155  1308  0824               	movf	___wmul@product,w
  9156  1309  00A0               	movwf	?___wmul
  9157  130A  0008               	return
  9158  130B                     __end_of___wmul:	
  9159                           
  9160                           	psect	text30
  9161  13E1                     __ptext30:	
  9162 ;; *************** function _allPeripheralInit *****************
  9163 ;; Defined at:
  9164 ;;		line 925 in file "main.c"
  9165 ;; Parameters:    Size  Location     Type
  9166 ;;		None
  9167 ;; Auto vars:     Size  Location     Type
  9168 ;;		None
  9169 ;; Return value:  Size  Location     Type
  9170 ;;                  1    wreg      void 
  9171 ;; Registers used:
  9172 ;;		wreg, status,2, status,0, pclath, cstack
  9173 ;; Tracked objects:
  9174 ;;		On entry : 0/0
  9175 ;;		On exit  : 0/0
  9176 ;;		Unchanged: 0/0
  9177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9182 ;;Total ram usage:        0 bytes
  9183 ;; Hardware stack levels used:    1
  9184 ;; Hardware stack levels required when called:    3
  9185 ;; This function calls:
  9186 ;;		_CCP10_Initialize
  9187 ;;		_CCP7_Initialize
  9188 ;;		_CCP8_Initialize
  9189 ;;		_CCP9_Initialize
  9190 ;;		_EUSART_Initialize
  9191 ;;		_TMR1_Initialize
  9192 ;;		_TMR2_Initialize
  9193 ;;		_TMR3_Initialize
  9194 ;;		_TMR4_Initialize
  9195 ;;		_TMR5_Initialize
  9196 ;;		_TMR6_Initialize
  9197 ;; This function is called by:
  9198 ;;		_main
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           
  9203                           ;psect for function _allPeripheralInit
  9204  13E1                     _allPeripheralInit:	
  9205                           
  9206                           ;main.c: 926: EUSART_Initialize();
  9207                           
  9208                           ;incstack = 0
  9209                           ; Regs used in _allPeripheralInit: [wreg+status,2+status,0+pclath+cstack]
  9210  13E1  3192  228B  3193   	fcall	_EUSART_Initialize
  9211                           
  9212                           ;main.c: 927: TMR1_Initialize();
  9213  13E4  3191  21CB  3193   	fcall	_TMR1_Initialize
  9214                           
  9215                           ;main.c: 928: TMR2_Initialize();
  9216  13E7  3191  21C1  3193   	fcall	_TMR2_Initialize
  9217                           
  9218                           ;main.c: 929: TMR3_Initialize();
  9219  13EA  3191  21F7  3193   	fcall	_TMR3_Initialize
  9220                           
  9221                           ;main.c: 930: TMR4_Initialize();
  9222  13ED  3191  21D6  3193   	fcall	_TMR4_Initialize
  9223                           
  9224                           ;main.c: 931: TMR5_Initialize();
  9225  13F0  3192  2203  3193   	fcall	_TMR5_Initialize
  9226                           
  9227                           ;main.c: 932: TMR6_Initialize();
  9228  13F3  3191  21E1  3193   	fcall	_TMR6_Initialize
  9229                           
  9230                           ;main.c: 934: CCP9_Initialize();
  9231  13F6  3191  21B7  3193   	fcall	_CCP9_Initialize
  9232                           
  9233                           ;main.c: 935: CCP8_Initialize();
  9234  13F9  3191  21AD  3193   	fcall	_CCP8_Initialize
  9235                           
  9236                           ;main.c: 936: CCP7_Initialize();
  9237  13FC  3191  21A3  3193   	fcall	_CCP7_Initialize
  9238                           
  9239                           ;main.c: 937: CCP10_Initialize();
  9240  13FF  3191  2199         	fcall	_CCP10_Initialize
  9241  1401  0008               	return
  9242  1402                     __end_of_allPeripheralInit:	
  9243                           
  9244                           	psect	text31
  9245  11E1                     __ptext31:	
  9246 ;; *************** function _TMR6_Initialize *****************
  9247 ;; Defined at:
  9248 ;;		line 1119 in file "main.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;		None
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;		None
  9253 ;; Return value:  Size  Location     Type
  9254 ;;                  1    wreg      void 
  9255 ;; Registers used:
  9256 ;;		wreg, status,2
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9266 ;;Total ram usage:        0 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; Hardware stack levels required when called:    2
  9269 ;; This function calls:
  9270 ;;		Nothing
  9271 ;; This function is called by:
  9272 ;;		_allPeripheralInit
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           
  9277                           ;psect for function _TMR6_Initialize
  9278  11E1                     _TMR6_Initialize:	
  9279                           
  9280                           ;main.c: 1124: T6CON = 0x08;
  9281                           
  9282                           ;incstack = 0
  9283                           ; Regs used in _TMR6_Initialize: [wreg+status,2]
  9284  11E1  3008               	movlw	8
  9285  11E2  0028               	movlb	8	; select bank8
  9286  11E3  009E               	movwf	30	;volatile
  9287                           
  9288                           ;main.c: 1130: TMR6 = 0x00;
  9289  11E4  019C               	clrf	28	;volatile
  9290                           
  9291                           ;main.c: 1133: PIR3bits.TMR6IF = 0;
  9292  11E5  0020               	movlb	0	; select bank0
  9293  11E6  1193               	bcf	19,3	;volatile
  9294                           
  9295                           ;main.c: 1136: PIE3bits.TMR6IE = 1;
  9296  11E7  0021               	movlb	1	; select bank1
  9297  11E8  1593               	bsf	19,3	;volatile
  9298                           
  9299                           ;main.c: 1138: GIE = 1;
  9300  11E9  178B               	bsf	11,7	;volatile
  9301                           
  9302                           ;main.c: 1141: PEIE = 1;
  9303  11EA  170B               	bsf	11,6	;volatile
  9304  11EB  0008               	return
  9305  11EC                     __end_of_TMR6_Initialize:	
  9306                           
  9307                           	psect	text32
  9308  1203                     __ptext32:	
  9309 ;; *************** function _TMR5_Initialize *****************
  9310 ;; Defined at:
  9311 ;;		line 1042 in file "main.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;		None
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;		None
  9316 ;; Return value:  Size  Location     Type
  9317 ;;                  1    wreg      void 
  9318 ;; Registers used:
  9319 ;;		status,2
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9329 ;;Total ram usage:        0 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; Hardware stack levels required when called:    2
  9332 ;; This function calls:
  9333 ;;		Nothing
  9334 ;; This function is called by:
  9335 ;;		_allPeripheralInit
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           
  9340                           ;psect for function _TMR5_Initialize
  9341  1203                     _TMR5_Initialize:	
  9342                           
  9343                           ;main.c: 1047: T5CON = 0x00;
  9344                           
  9345                           ;incstack = 0
  9346                           ; Regs used in _TMR5_Initialize: [status,2]
  9347  1203  0028               	movlb	8	; select bank8
  9348  1204  019A               	clrf	26	;volatile
  9349                           
  9350                           ;main.c: 1050: T5GCON = 0x00;
  9351  1205  019B               	clrf	27	;volatile
  9352                           
  9353                           ;main.c: 1053: TMR5H = 0x00;
  9354  1206  0199               	clrf	25	;volatile
  9355                           
  9356                           ;main.c: 1056: TMR5L = 0x00;
  9357  1207  0198               	clrf	24	;volatile
  9358                           
  9359                           ;main.c: 1059: PIR3bits.TMR5IF = 0;
  9360  1208  0020               	movlb	0	; select bank0
  9361  1209  1113               	bcf	19,2	;volatile
  9362                           
  9363                           ;main.c: 1062: PIE3bits.TMR5IE = 1;
  9364  120A  0021               	movlb	1	; select bank1
  9365  120B  1513               	bsf	19,2	;volatile
  9366                           
  9367                           ;main.c: 1064: GIE = 1;
  9368  120C  178B               	bsf	11,7	;volatile
  9369                           
  9370                           ;main.c: 1067: PEIE = 1;
  9371  120D  170B               	bsf	11,6	;volatile
  9372  120E  0008               	return
  9373  120F                     __end_of_TMR5_Initialize:	
  9374                           
  9375                           	psect	text33
  9376  11D6                     __ptext33:	
  9377 ;; *************** function _TMR4_Initialize *****************
  9378 ;; Defined at:
  9379 ;;		line 1095 in file "main.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;		None
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;		None
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  1    wreg      void 
  9386 ;; Registers used:
  9387 ;;		wreg, status,2
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9397 ;;Total ram usage:        0 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    2
  9400 ;; This function calls:
  9401 ;;		Nothing
  9402 ;; This function is called by:
  9403 ;;		_allPeripheralInit
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           
  9408                           ;psect for function _TMR4_Initialize
  9409  11D6                     _TMR4_Initialize:	
  9410                           
  9411                           ;main.c: 1100: T4CON = 0x08;
  9412                           
  9413                           ;incstack = 0
  9414                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
  9415  11D6  3008               	movlw	8
  9416  11D7  0028               	movlb	8	; select bank8
  9417  11D8  0097               	movwf	23	;volatile
  9418                           
  9419                           ;main.c: 1106: TMR4 = 0x00;
  9420  11D9  0195               	clrf	21	;volatile
  9421                           
  9422                           ;main.c: 1109: PIR3bits.TMR4IF = 0;
  9423  11DA  0020               	movlb	0	; select bank0
  9424  11DB  1093               	bcf	19,1	;volatile
  9425                           
  9426                           ;main.c: 1112: PIE3bits.TMR4IE = 1;
  9427  11DC  0021               	movlb	1	; select bank1
  9428  11DD  1493               	bsf	19,1	;volatile
  9429                           
  9430                           ;main.c: 1113: GIE = 1;
  9431  11DE  178B               	bsf	11,7	;volatile
  9432                           
  9433                           ;main.c: 1116: PEIE = 1;
  9434  11DF  170B               	bsf	11,6	;volatile
  9435  11E0  0008               	return
  9436  11E1                     __end_of_TMR4_Initialize:	
  9437                           
  9438                           	psect	text34
  9439  11F7                     __ptext34:	
  9440 ;; *************** function _TMR3_Initialize *****************
  9441 ;; Defined at:
  9442 ;;		line 1012 in file "main.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;		None
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;		None
  9447 ;; Return value:  Size  Location     Type
  9448 ;;                  1    wreg      void 
  9449 ;; Registers used:
  9450 ;;		status,2
  9451 ;; Tracked objects:
  9452 ;;		On entry : 0/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9460 ;;Total ram usage:        0 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; Hardware stack levels required when called:    2
  9463 ;; This function calls:
  9464 ;;		Nothing
  9465 ;; This function is called by:
  9466 ;;		_allPeripheralInit
  9467 ;; This function uses a non-reentrant model
  9468 ;;
  9469                           
  9470                           
  9471                           ;psect for function _TMR3_Initialize
  9472  11F7                     _TMR3_Initialize:	
  9473                           
  9474                           ;main.c: 1015: T3CON = 0x00;
  9475                           
  9476                           ;incstack = 0
  9477                           ; Regs used in _TMR3_Initialize: [status,2]
  9478  11F7  0028               	movlb	8	; select bank8
  9479  11F8  0193               	clrf	19	;volatile
  9480                           
  9481                           ;main.c: 1018: T3GCON = 0x00;
  9482  11F9  0194               	clrf	20	;volatile
  9483                           
  9484                           ;main.c: 1021: TMR3H = 0x00;
  9485  11FA  0192               	clrf	18	;volatile
  9486                           
  9487                           ;main.c: 1024: TMR3L = 0x00;
  9488  11FB  0191               	clrf	17	;volatile
  9489                           
  9490                           ;main.c: 1027: PIR3bits.TMR3IF = 0;
  9491  11FC  0020               	movlb	0	; select bank0
  9492  11FD  1013               	bcf	19,0	;volatile
  9493                           
  9494                           ;main.c: 1030: PIE3bits.TMR3IE = 1;
  9495  11FE  0021               	movlb	1	; select bank1
  9496  11FF  1413               	bsf	19,0	;volatile
  9497                           
  9498                           ;main.c: 1036: GIE = 1;
  9499  1200  178B               	bsf	11,7	;volatile
  9500                           
  9501                           ;main.c: 1039: PEIE = 1;
  9502  1201  170B               	bsf	11,6	;volatile
  9503  1202  0008               	return
  9504  1203                     __end_of_TMR3_Initialize:	
  9505                           
  9506                           	psect	text35
  9507  11C1                     __ptext35:	
  9508 ;; *************** function _TMR2_Initialize *****************
  9509 ;; Defined at:
  9510 ;;		line 1070 in file "main.c"
  9511 ;; Parameters:    Size  Location     Type
  9512 ;;		None
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;		None
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      void 
  9517 ;; Registers used:
  9518 ;;		wreg, status,2
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9528 ;;Total ram usage:        0 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    2
  9531 ;; This function calls:
  9532 ;;		Nothing
  9533 ;; This function is called by:
  9534 ;;		_allPeripheralInit
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           
  9539                           ;psect for function _TMR2_Initialize
  9540  11C1                     _TMR2_Initialize:	
  9541                           
  9542                           ;main.c: 1075: T2CON = 0x08;
  9543                           
  9544                           ;incstack = 0
  9545                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  9546  11C1  3008               	movlw	8
  9547  11C2  0020               	movlb	0	; select bank0
  9548  11C3  009C               	movwf	28	;volatile
  9549                           
  9550                           ;main.c: 1081: TMR2 = 0x00;
  9551  11C4  019A               	clrf	26	;volatile
  9552                           
  9553                           ;main.c: 1084: PIR1bits.TMR2IF = 0;
  9554  11C5  1091               	bcf	17,1	;volatile
  9555                           
  9556                           ;main.c: 1087: PIE1bits.TMR2IE = 1;
  9557  11C6  0021               	movlb	1	; select bank1
  9558  11C7  1491               	bsf	17,1	;volatile
  9559                           
  9560                           ;main.c: 1088: GIE = 1;
  9561  11C8  178B               	bsf	11,7	;volatile
  9562                           
  9563                           ;main.c: 1091: PEIE = 1;
  9564  11C9  170B               	bsf	11,6	;volatile
  9565  11CA  0008               	return
  9566  11CB                     __end_of_TMR2_Initialize:	
  9567                           
  9568                           	psect	text36
  9569  11CB                     __ptext36:	
  9570 ;; *************** function _TMR1_Initialize *****************
  9571 ;; Defined at:
  9572 ;;		line 981 in file "main.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;		None
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;		None
  9577 ;; Return value:  Size  Location     Type
  9578 ;;                  1    wreg      void 
  9579 ;; Registers used:
  9580 ;;		status,2
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9590 ;;Total ram usage:        0 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    2
  9593 ;; This function calls:
  9594 ;;		Nothing
  9595 ;; This function is called by:
  9596 ;;		_allPeripheralInit
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           
  9601                           ;psect for function _TMR1_Initialize
  9602  11CB                     _TMR1_Initialize:	
  9603                           
  9604                           ;main.c: 984: T1CON = 0x00;
  9605                           
  9606                           ;incstack = 0
  9607                           ; Regs used in _TMR1_Initialize: [status,2]
  9608  11CB  0020               	movlb	0	; select bank0
  9609  11CC  0198               	clrf	24	;volatile
  9610                           
  9611                           ;main.c: 987: T1GCON = 0x00;
  9612  11CD  0199               	clrf	25	;volatile
  9613                           
  9614                           ;main.c: 990: TMR1H = 0x00;
  9615  11CE  0197               	clrf	23	;volatile
  9616                           
  9617                           ;main.c: 993: TMR1L = 0x00;
  9618  11CF  0196               	clrf	22	;volatile
  9619                           
  9620                           ;main.c: 996: PIR1bits.TMR1IF = 0;
  9621  11D0  1011               	bcf	17,0	;volatile
  9622                           
  9623                           ;main.c: 999: PIE1bits.TMR1IE = 1;
  9624  11D1  0021               	movlb	1	; select bank1
  9625  11D2  1411               	bsf	17,0	;volatile
  9626                           
  9627                           ;main.c: 1005: GIE = 1;
  9628  11D3  178B               	bsf	11,7	;volatile
  9629                           
  9630                           ;main.c: 1008: PEIE = 1;
  9631  11D4  170B               	bsf	11,6	;volatile
  9632  11D5  0008               	return
  9633  11D6                     __end_of_TMR1_Initialize:	
  9634                           
  9635                           	psect	text37
  9636  128B                     __ptext37:	
  9637 ;; *************** function _EUSART_Initialize *****************
  9638 ;; Defined at:
  9639 ;;		line 943 in file "main.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;		None
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;		None
  9644 ;; Return value:  Size  Location     Type
  9645 ;;                  1    wreg      void 
  9646 ;; Registers used:
  9647 ;;		wreg
  9648 ;; Tracked objects:
  9649 ;;		On entry : 0/0
  9650 ;;		On exit  : 0/0
  9651 ;;		Unchanged: 0/0
  9652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9657 ;;Total ram usage:        0 bytes
  9658 ;; Hardware stack levels used:    1
  9659 ;; Hardware stack levels required when called:    2
  9660 ;; This function calls:
  9661 ;;		Nothing
  9662 ;; This function is called by:
  9663 ;;		_allPeripheralInit
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           
  9668                           ;psect for function _EUSART_Initialize
  9669  128B                     _EUSART_Initialize:	
  9670                           
  9671                           ;main.c: 944: PIE1bits.RC1IE = 0;
  9672                           
  9673                           ;incstack = 0
  9674                           ; Regs used in _EUSART_Initialize: [wreg]
  9675  128B  0021               	movlb	1	; select bank1
  9676  128C  1291               	bcf	17,5	;volatile
  9677                           
  9678                           ;main.c: 945: PIE1bits.TX1IE = 0;
  9679  128D  1211               	bcf	17,4	;volatile
  9680                           
  9681                           ;main.c: 950: BAUD1CON = 0x0A;
  9682  128E  300A               	movlw	10
  9683  128F  0023               	movlb	3	; select bank3
  9684  1290  009F               	movwf	31	;volatile
  9685                           
  9686                           ;main.c: 953: RC1STA = 0x90;
  9687  1291  3090               	movlw	144
  9688  1292  009D               	movwf	29	;volatile
  9689                           
  9690                           ;main.c: 956: TX1STA = 0x24;
  9691  1293  3024               	movlw	36
  9692  1294  009E               	movwf	30	;volatile
  9693                           
  9694                           ;main.c: 961: SP1BRGL = 0xA0;
  9695  1295  30A0               	movlw	160
  9696  1296  009B               	movwf	27	;volatile
  9697                           
  9698                           ;main.c: 963: SP1BRGH = 0x01;
  9699  1297  3001               	movlw	1
  9700  1298  009C               	movwf	28	;volatile
  9701                           
  9702                           ;main.c: 966: GIE = 1;
  9703  1299  178B               	bsf	11,7	;volatile
  9704                           
  9705                           ;main.c: 969: PEIE = 1;
  9706  129A  170B               	bsf	11,6	;volatile
  9707                           
  9708                           ;main.c: 972: PIE1bits.RC1IE = 1;
  9709  129B  0021               	movlb	1	; select bank1
  9710  129C  1691               	bsf	17,5	;volatile
  9711                           
  9712                           ;main.c: 975: TX1STAbits.TXEN = 1;
  9713  129D  0023               	movlb	3	; select bank3
  9714  129E  169E               	bsf	30,5	;volatile
  9715                           
  9716                           ;main.c: 978: RC1STAbits.SPEN = 1;
  9717  129F  179D               	bsf	29,7	;volatile
  9718  12A0  0008               	return
  9719  12A1                     __end_of_EUSART_Initialize:	
  9720                           
  9721                           	psect	text38
  9722  11B7                     __ptext38:	
  9723 ;; *************** function _CCP9_Initialize *****************
  9724 ;; Defined at:
  9725 ;;		line 1144 in file "main.c"
  9726 ;; Parameters:    Size  Location     Type
  9727 ;;		None
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;		None
  9730 ;; Return value:  Size  Location     Type
  9731 ;;                  1    wreg      void 
  9732 ;; Registers used:
  9733 ;;		wreg, status,2
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9743 ;;Total ram usage:        0 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; Hardware stack levels required when called:    2
  9746 ;; This function calls:
  9747 ;;		Nothing
  9748 ;; This function is called by:
  9749 ;;		_allPeripheralInit
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           
  9754                           ;psect for function _CCP9_Initialize
  9755  11B7                     _CCP9_Initialize:	
  9756                           
  9757                           ;main.c: 1148: CCP9CON = 0x84;
  9758                           
  9759                           ;incstack = 0
  9760                           ; Regs used in _CCP9_Initialize: [wreg+status,2]
  9761  11B7  3084               	movlw	132
  9762  11B8  002C               	movlb	12	; select bank12
  9763  11B9  009C               	movwf	28	;volatile
  9764                           
  9765                           ;main.c: 1151: CCPR9H = 0x00;
  9766  11BA  019B               	clrf	27	;volatile
  9767                           
  9768                           ;main.c: 1154: CCPR9L = 0x00;
  9769  11BB  019A               	clrf	26	;volatile
  9770                           
  9771                           ;main.c: 1160: PIR4bits.CCP9IF = 0;
  9772  11BC  0020               	movlb	0	; select bank0
  9773  11BD  1314               	bcf	20,6	;volatile
  9774                           
  9775                           ;main.c: 1163: PIE4bits.CCP9IE = 1;
  9776  11BE  0021               	movlb	1	; select bank1
  9777  11BF  1714               	bsf	20,6	;volatile
  9778  11C0  0008               	return
  9779  11C1                     __end_of_CCP9_Initialize:	
  9780                           
  9781                           	psect	text39
  9782  11AD                     __ptext39:	
  9783 ;; *************** function _CCP8_Initialize *****************
  9784 ;; Defined at:
  9785 ;;		line 1208 in file "main.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;		None
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;		None
  9790 ;; Return value:  Size  Location     Type
  9791 ;;                  1    wreg      void 
  9792 ;; Registers used:
  9793 ;;		wreg, status,2
  9794 ;; Tracked objects:
  9795 ;;		On entry : 0/0
  9796 ;;		On exit  : 0/0
  9797 ;;		Unchanged: 0/0
  9798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9803 ;;Total ram usage:        0 bytes
  9804 ;; Hardware stack levels used:    1
  9805 ;; Hardware stack levels required when called:    2
  9806 ;; This function calls:
  9807 ;;		Nothing
  9808 ;; This function is called by:
  9809 ;;		_allPeripheralInit
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           
  9814                           ;psect for function _CCP8_Initialize
  9815  11AD                     _CCP8_Initialize:	
  9816                           
  9817                           ;main.c: 1212: CCP9CON = 0x84;
  9818                           
  9819                           ;incstack = 0
  9820                           ; Regs used in _CCP8_Initialize: [wreg+status,2]
  9821  11AD  3084               	movlw	132
  9822  11AE  002C               	movlb	12	; select bank12
  9823  11AF  009C               	movwf	28	;volatile
  9824                           
  9825                           ;main.c: 1215: CCPR8H = 0x00;
  9826  11B0  0198               	clrf	24	;volatile
  9827                           
  9828                           ;main.c: 1218: CCPR8L = 0x00;
  9829  11B1  0197               	clrf	23	;volatile
  9830                           
  9831                           ;main.c: 1224: PIR4bits.CCP8IF = 0;
  9832  11B2  0020               	movlb	0	; select bank0
  9833  11B3  1194               	bcf	20,3	;volatile
  9834                           
  9835                           ;main.c: 1227: PIE4bits.CCP8IE = 1;
  9836  11B4  0021               	movlb	1	; select bank1
  9837  11B5  1594               	bsf	20,3	;volatile
  9838  11B6  0008               	return
  9839  11B7                     __end_of_CCP8_Initialize:	
  9840                           
  9841                           	psect	text40
  9842  11A3                     __ptext40:	
  9843 ;; *************** function _CCP7_Initialize *****************
  9844 ;; Defined at:
  9845 ;;		line 1166 in file "main.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;		None
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;		None
  9850 ;; Return value:  Size  Location     Type
  9851 ;;                  1    wreg      void 
  9852 ;; Registers used:
  9853 ;;		wreg, status,2
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9863 ;;Total ram usage:        0 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    2
  9866 ;; This function calls:
  9867 ;;		Nothing
  9868 ;; This function is called by:
  9869 ;;		_allPeripheralInit
  9870 ;; This function uses a non-reentrant model
  9871 ;;
  9872                           
  9873                           
  9874                           ;psect for function _CCP7_Initialize
  9875  11A3                     _CCP7_Initialize:	
  9876                           
  9877                           ;main.c: 1170: CCP7CON = 0x84;
  9878                           
  9879                           ;incstack = 0
  9880                           ; Regs used in _CCP7_Initialize: [wreg+status,2]
  9881  11A3  3084               	movlw	132
  9882  11A4  002C               	movlb	12	; select bank12
  9883  11A5  0096               	movwf	22	;volatile
  9884                           
  9885                           ;main.c: 1173: CCPR7H = 0x00;
  9886  11A6  0195               	clrf	21	;volatile
  9887                           
  9888                           ;main.c: 1176: CCPR7L = 0x00;
  9889  11A7  0194               	clrf	20	;volatile
  9890                           
  9891                           ;main.c: 1182: PIR4bits.CCP7IF = 0;
  9892  11A8  0020               	movlb	0	; select bank0
  9893  11A9  1114               	bcf	20,2	;volatile
  9894                           
  9895                           ;main.c: 1185: PIE4bits.CCP7IE = 1;
  9896  11AA  0021               	movlb	1	; select bank1
  9897  11AB  1514               	bsf	20,2	;volatile
  9898  11AC  0008               	return
  9899  11AD                     __end_of_CCP7_Initialize:	
  9900                           
  9901                           	psect	text41
  9902  1199                     __ptext41:	
  9903 ;; *************** function _CCP10_Initialize *****************
  9904 ;; Defined at:
  9905 ;;		line 1187 in file "main.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;		None
  9908 ;; Auto vars:     Size  Location     Type
  9909 ;;		None
  9910 ;; Return value:  Size  Location     Type
  9911 ;;                  1    wreg      void 
  9912 ;; Registers used:
  9913 ;;		wreg, status,2
  9914 ;; Tracked objects:
  9915 ;;		On entry : 0/0
  9916 ;;		On exit  : 0/0
  9917 ;;		Unchanged: 0/0
  9918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9923 ;;Total ram usage:        0 bytes
  9924 ;; Hardware stack levels used:    1
  9925 ;; Hardware stack levels required when called:    2
  9926 ;; This function calls:
  9927 ;;		Nothing
  9928 ;; This function is called by:
  9929 ;;		_allPeripheralInit
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           
  9934                           ;psect for function _CCP10_Initialize
  9935  1199                     _CCP10_Initialize:	
  9936                           
  9937                           ;main.c: 1191: CCP10CON = 0x84;
  9938                           
  9939                           ;incstack = 0
  9940                           ; Regs used in _CCP10_Initialize: [wreg+status,2]
  9941  1199  3084               	movlw	132
  9942  119A  002C               	movlb	12	; select bank12
  9943  119B  009F               	movwf	31	;volatile
  9944                           
  9945                           ;main.c: 1194: CCPR10H = 0x00;
  9946  119C  019E               	clrf	30	;volatile
  9947                           
  9948                           ;main.c: 1197: CCPR10L = 0x00;
  9949  119D  019D               	clrf	29	;volatile
  9950                           
  9951                           ;main.c: 1203: PIR4bits.CCP10IF = 0;
  9952  119E  0020               	movlb	0	; select bank0
  9953  119F  1394               	bcf	20,7	;volatile
  9954                           
  9955                           ;main.c: 1206: PIE4bits.CCP10IE = 1;
  9956  11A0  0021               	movlb	1	; select bank1
  9957  11A1  1794               	bsf	20,7	;volatile
  9958  11A2  0008               	return
  9959  11A3                     __end_of_CCP10_Initialize:	
  9960                           
  9961                           	psect	text42
  9962  123E                     __ptext42:	
  9963 ;; *************** function _TransmissionIndicationLedBlinking *****************
  9964 ;; Defined at:
  9965 ;;		line 1288 in file "main.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;		None
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;		None
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      void 
  9972 ;; Registers used:
  9973 ;;		wreg
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9981 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  9982 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  9983 ;;Total ram usage:        2 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    2
  9986 ;; This function calls:
  9987 ;;		Nothing
  9988 ;; This function is called by:
  9989 ;;		_main
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           
  9994                           ;psect for function _TransmissionIndicationLedBlinking
  9995  123E                     _TransmissionIndicationLedBlinking:	
  9996                           
  9997                           ;main.c: 1289: PORTFbits.RF0 = 0;
  9998                           
  9999                           ;incstack = 0
 10000                           ; Regs used in _TransmissionIndicationLedBlinking: [wreg]
 10001  123E  0025               	movlb	5	; select bank5
 10002  123F  100C               	bcf	12,0	;volatile
 10003                           
 10004                           ;main.c: 1290: _delay((unsigned long)((100)*(16000000/4000.0)));
 10005  1240  3003               	movlw	3
 10006  1241  0020               	movlb	0	; select bank0
 10007  1242  00A1               	movwf	??_TransmissionIndicationLedBlinking+1
 10008  1243  3008               	movlw	8
 10009  1244  00A0               	movwf	??_TransmissionIndicationLedBlinking
 10010  1245  3077               	movlw	119
 10011  1246                     u6477:	
 10012  1246  0B89               	decfsz	9,f
 10013  1247  2A46               	goto	u6477
 10014  1248  0BA0               	decfsz	??_TransmissionIndicationLedBlinking,f
 10015  1249  2A46               	goto	u6477
 10016  124A  0BA1               	decfsz	??_TransmissionIndicationLedBlinking+1,f
 10017  124B  2A46               	goto	u6477
 10018                           
 10019                           ;main.c: 1291: PORTFbits.RF0 = 1;
 10020  124C  0025               	movlb	5	; select bank5
 10021  124D  140C               	bsf	12,0	;volatile
 10022  124E  0008               	return
 10023  124F                     __end_of_TransmissionIndicationLedBlinking:	
 10024                           
 10025                           	psect	text43
 10026  15F6                     __ptext43:	
 10027 ;; *************** function _SwitchOnStatustToGatway *****************
 10028 ;; Defined at:
 10029 ;;		line 1316 in file "main.c"
 10030 ;; Parameters:    Size  Location     Type
 10031 ;;  SwitchOnNumb    2    0[BANK0 ] const int 
 10032 ;; Auto vars:     Size  Location     Type
 10033 ;;		None
 10034 ;; Return value:  Size  Location     Type
 10035 ;;                  1    wreg      void 
 10036 ;; Registers used:
 10037 ;;		wreg, status,2, status,0
 10038 ;; Tracked objects:
 10039 ;;		On entry : 0/0
 10040 ;;		On exit  : 0/0
 10041 ;;		Unchanged: 0/0
 10042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10043 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
 10044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
 10046 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
 10047 ;;Total ram usage:        3 bytes
 10048 ;; Hardware stack levels used:    1
 10049 ;; Hardware stack levels required when called:    2
 10050 ;; This function calls:
 10051 ;;		Nothing
 10052 ;; This function is called by:
 10053 ;;		_main
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           
 10058                           ;psect for function _SwitchOnStatustToGatway
 10059  15F6                     _SwitchOnStatustToGatway:	
 10060                           
 10061                           ;main.c: 1318: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
 10062                           
 10063                           ;incstack = 0
 10064                           ; Regs used in _SwitchOnStatustToGatway: [wreg+status,2+status,0]
 10065  15F6  3052               	movlw	82
 10066  15F7  0023               	movlb	3	; select bank3
 10067  15F8  009A               	movwf	26	;volatile
 10068  15F9  3006               	movlw	6
 10069  15FA  0020               	movlb	0	; select bank0
 10070  15FB  00A2               	movwf	??_SwitchOnStatustToGatway
 10071  15FC  3030               	movlw	48
 10072  15FD                     u6487:	
 10073  15FD  0B89               	decfsz	9,f
 10074  15FE  2DFD               	goto	u6487
 10075  15FF  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10076  1600  2DFD               	goto	u6487
 10077  1601  0000               	nop
 10078                           
 10079                           ;main.c: 1319: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
 10080  1602  3031               	movlw	49
 10081  1603  0023               	movlb	3	; select bank3
 10082  1604  009A               	movwf	26	;volatile
 10083  1605  3006               	movlw	6
 10084  1606  0020               	movlb	0	; select bank0
 10085  1607  00A2               	movwf	??_SwitchOnStatustToGatway
 10086  1608  3030               	movlw	48
 10087  1609                     u6497:	
 10088  1609  0B89               	decfsz	9,f
 10089  160A  2E09               	goto	u6497
 10090  160B  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10091  160C  2E09               	goto	u6497
 10092  160D  0000               	nop
 10093                           
 10094                           ;main.c: 1320: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10095  160E  3030               	movlw	48
 10096  160F  0023               	movlb	3	; select bank3
 10097  1610  009A               	movwf	26	;volatile
 10098  1611  3006               	movlw	6
 10099  1612  0020               	movlb	0	; select bank0
 10100  1613  00A2               	movwf	??_SwitchOnStatustToGatway
 10101  1614  3030               	movlw	48
 10102  1615                     u6507:	
 10103  1615  0B89               	decfsz	9,f
 10104  1616  2E15               	goto	u6507
 10105  1617  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10106  1618  2E15               	goto	u6507
 10107  1619  0000               	nop
 10108                           
 10109                           ;main.c: 1321: TX1REG = SwitchOnNumber+'0';_delay((unsigned long)((1)*(16000000/4000.0))
      +                          );
 10110  161A  0020               	movlb	0	; select bank0
 10111  161B  0820               	movf	SwitchOnStatustToGatway@SwitchOnNumber,w
 10112  161C  3E30               	addlw	48
 10113  161D  0023               	movlb	3	; select bank3
 10114  161E  009A               	movwf	26	;volatile
 10115  161F  3006               	movlw	6
 10116  1620  0020               	movlb	0	; select bank0
 10117  1621  00A2               	movwf	??_SwitchOnStatustToGatway
 10118  1622  3030               	movlw	48
 10119  1623                     u6517:	
 10120  1623  0B89               	decfsz	9,f
 10121  1624  2E23               	goto	u6517
 10122  1625  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10123  1626  2E23               	goto	u6517
 10124  1627  0000               	nop
 10125  1628  0008               	return
 10126  1629                     __end_of_SwitchOnStatustToGatway:	
 10127                           
 10128                           	psect	text44
 10129  15C3                     __ptext44:	
 10130 ;; *************** function _SwitchOffStatustToGatway *****************
 10131 ;; Defined at:
 10132 ;;		line 1309 in file "main.c"
 10133 ;; Parameters:    Size  Location     Type
 10134 ;;  SwitchOffNum    2    0[BANK0 ] const int 
 10135 ;; Auto vars:     Size  Location     Type
 10136 ;;		None
 10137 ;; Return value:  Size  Location     Type
 10138 ;;                  1    wreg      void 
 10139 ;; Registers used:
 10140 ;;		wreg, status,2, status,0
 10141 ;; Tracked objects:
 10142 ;;		On entry : 0/0
 10143 ;;		On exit  : 0/0
 10144 ;;		Unchanged: 0/0
 10145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10146 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
 10147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
 10149 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
 10150 ;;Total ram usage:        3 bytes
 10151 ;; Hardware stack levels used:    1
 10152 ;; Hardware stack levels required when called:    2
 10153 ;; This function calls:
 10154 ;;		Nothing
 10155 ;; This function is called by:
 10156 ;;		_main
 10157 ;; This function uses a non-reentrant model
 10158 ;;
 10159                           
 10160                           
 10161                           ;psect for function _SwitchOffStatustToGatway
 10162  15C3                     _SwitchOffStatustToGatway:	
 10163                           
 10164                           ;main.c: 1311: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
 10165                           
 10166                           ;incstack = 0
 10167                           ; Regs used in _SwitchOffStatustToGatway: [wreg+status,2+status,0]
 10168  15C3  3052               	movlw	82
 10169  15C4  0023               	movlb	3	; select bank3
 10170  15C5  009A               	movwf	26	;volatile
 10171  15C6  3006               	movlw	6
 10172  15C7  0020               	movlb	0	; select bank0
 10173  15C8  00A2               	movwf	??_SwitchOffStatustToGatway
 10174  15C9  3030               	movlw	48
 10175  15CA                     u6527:	
 10176  15CA  0B89               	decfsz	9,f
 10177  15CB  2DCA               	goto	u6527
 10178  15CC  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10179  15CD  2DCA               	goto	u6527
 10180  15CE  0000               	nop
 10181                           
 10182                           ;main.c: 1312: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10183  15CF  3030               	movlw	48
 10184  15D0  0023               	movlb	3	; select bank3
 10185  15D1  009A               	movwf	26	;volatile
 10186  15D2  3006               	movlw	6
 10187  15D3  0020               	movlb	0	; select bank0
 10188  15D4  00A2               	movwf	??_SwitchOffStatustToGatway
 10189  15D5  3030               	movlw	48
 10190  15D6                     u6537:	
 10191  15D6  0B89               	decfsz	9,f
 10192  15D7  2DD6               	goto	u6537
 10193  15D8  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10194  15D9  2DD6               	goto	u6537
 10195  15DA  0000               	nop
 10196                           
 10197                           ;main.c: 1313: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10198  15DB  3030               	movlw	48
 10199  15DC  0023               	movlb	3	; select bank3
 10200  15DD  009A               	movwf	26	;volatile
 10201  15DE  3006               	movlw	6
 10202  15DF  0020               	movlb	0	; select bank0
 10203  15E0  00A2               	movwf	??_SwitchOffStatustToGatway
 10204  15E1  3030               	movlw	48
 10205  15E2                     u6547:	
 10206  15E2  0B89               	decfsz	9,f
 10207  15E3  2DE2               	goto	u6547
 10208  15E4  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10209  15E5  2DE2               	goto	u6547
 10210  15E6  0000               	nop
 10211                           
 10212                           ;main.c: 1314: TX1REG = SwitchOffNumber+'0';_delay((unsigned long)((1)*(16000000/4000.0)
      +                          ));
 10213  15E7  0020               	movlb	0	; select bank0
 10214  15E8  0820               	movf	SwitchOffStatustToGatway@SwitchOffNumber,w
 10215  15E9  3E30               	addlw	48
 10216  15EA  0023               	movlb	3	; select bank3
 10217  15EB  009A               	movwf	26	;volatile
 10218  15EC  3006               	movlw	6
 10219  15ED  0020               	movlb	0	; select bank0
 10220  15EE  00A2               	movwf	??_SwitchOffStatustToGatway
 10221  15EF  3030               	movlw	48
 10222  15F0                     u6557:	
 10223  15F0  0B89               	decfsz	9,f
 10224  15F1  2DF0               	goto	u6557
 10225  15F2  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10226  15F3  2DF0               	goto	u6557
 10227  15F4  0000               	nop
 10228  15F5  0008               	return
 10229  15F6                     __end_of_SwitchOffStatustToGatway:	
 10230                           
 10231                           	psect	text45
 10232  122D                     __ptext45:	
 10233 ;; *************** function _ReceivingIndicationLedBlinking *****************
 10234 ;; Defined at:
 10235 ;;		line 1293 in file "main.c"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;		None
 10238 ;; Auto vars:     Size  Location     Type
 10239 ;;		None
 10240 ;; Return value:  Size  Location     Type
 10241 ;;                  1    wreg      void 
 10242 ;; Registers used:
 10243 ;;		wreg
 10244 ;; Tracked objects:
 10245 ;;		On entry : 0/0
 10246 ;;		On exit  : 0/0
 10247 ;;		Unchanged: 0/0
 10248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10251 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
 10252 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
 10253 ;;Total ram usage:        2 bytes
 10254 ;; Hardware stack levels used:    1
 10255 ;; Hardware stack levels required when called:    2
 10256 ;; This function calls:
 10257 ;;		Nothing
 10258 ;; This function is called by:
 10259 ;;		_main
 10260 ;; This function uses a non-reentrant model
 10261 ;;
 10262                           
 10263                           
 10264                           ;psect for function _ReceivingIndicationLedBlinking
 10265  122D                     _ReceivingIndicationLedBlinking:	
 10266                           
 10267                           ;main.c: 1294: PORTFbits.RF1 = 0;
 10268                           
 10269                           ;incstack = 0
 10270                           ; Regs used in _ReceivingIndicationLedBlinking: [wreg]
 10271  122D  0025               	movlb	5	; select bank5
 10272  122E  108C               	bcf	12,1	;volatile
 10273                           
 10274                           ;main.c: 1295: _delay((unsigned long)((100)*(16000000/4000.0)));
 10275  122F  3003               	movlw	3
 10276  1230  0020               	movlb	0	; select bank0
 10277  1231  00A1               	movwf	??_ReceivingIndicationLedBlinking+1
 10278  1232  3008               	movlw	8
 10279  1233  00A0               	movwf	??_ReceivingIndicationLedBlinking
 10280  1234  3077               	movlw	119
 10281  1235                     u6567:	
 10282  1235  0B89               	decfsz	9,f
 10283  1236  2A35               	goto	u6567
 10284  1237  0BA0               	decfsz	??_ReceivingIndicationLedBlinking,f
 10285  1238  2A35               	goto	u6567
 10286  1239  0BA1               	decfsz	??_ReceivingIndicationLedBlinking+1,f
 10287  123A  2A35               	goto	u6567
 10288                           
 10289                           ;main.c: 1296: PORTFbits.RF1 = 1;
 10290  123B  0025               	movlb	5	; select bank5
 10291  123C  148C               	bsf	12,1	;volatile
 10292  123D  0008               	return
 10293  123E                     __end_of_ReceivingIndicationLedBlinking:	
 10294                           
 10295                           	psect	text46
 10296  1476                     __ptext46:	
 10297 ;; *************** function _GPIO_pin_Initialize *****************
 10298 ;; Defined at:
 10299 ;;		line 874 in file "main.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;		None
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;		None
 10304 ;; Return value:  Size  Location     Type
 10305 ;;                  1    wreg      void 
 10306 ;; Registers used:
 10307 ;;		status,2, status,0, pclath, cstack
 10308 ;; Tracked objects:
 10309 ;;		On entry : 0/0
 10310 ;;		On exit  : 0/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10317 ;;Total ram usage:        0 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; Hardware stack levels required when called:    3
 10320 ;; This function calls:
 10321 ;;		_clearAllPorts
 10322 ;;		_pinINIT_extra
 10323 ;; This function is called by:
 10324 ;;		_main
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           
 10329                           ;psect for function _GPIO_pin_Initialize
 10330  1476                     _GPIO_pin_Initialize:	
 10331                           
 10332                           ;main.c: 875: clearAllPorts();
 10333                           
 10334                           ;incstack = 0
 10335                           ; Regs used in _GPIO_pin_Initialize: [status,2+status,0+pclath+cstack]
 10336  1476  3192  224F  3194   	fcall	_clearAllPorts
 10337                           
 10338                           ;main.c: 876: pinINIT_extra();
 10339  1479  3192  2261  3194   	fcall	_pinINIT_extra
 10340                           
 10341                           ;main.c: 877: TRISDbits.TRISD6 = 1;
 10342  147C  0021               	movlb	1	; select bank1
 10343  147D  170F               	bsf	15,6	;volatile
 10344                           
 10345                           ;main.c: 878: TRISDbits.TRISD7 = 1;
 10346  147E  178F               	bsf	15,7	;volatile
 10347                           
 10348                           ;main.c: 879: TRISBbits.TRISB0 = 1;
 10349  147F  140D               	bsf	13,0	;volatile
 10350                           
 10351                           ;main.c: 880: TRISBbits.TRISB1 = 1;
 10352  1480  148D               	bsf	13,1	;volatile
 10353                           
 10354                           ;main.c: 881: TRISBbits.TRISB2 = 1;
 10355  1481  150D               	bsf	13,2	;volatile
 10356                           
 10357                           ;main.c: 882: TRISBbits.TRISB3 = 1;
 10358  1482  158D               	bsf	13,3	;volatile
 10359                           
 10360                           ;main.c: 883: TRISBbits.TRISB4 = 1;
 10361  1483  160D               	bsf	13,4	;volatile
 10362                           
 10363                           ;main.c: 884: TRISBbits.TRISB5 = 1;
 10364  1484  168D               	bsf	13,5	;volatile
 10365                           
 10366                           ;main.c: 885: TRISDbits.TRISD5 = 1;
 10367  1485  168F               	bsf	15,5	;volatile
 10368                           
 10369                           ;main.c: 889: TRISEbits.TRISE0 = 0;
 10370  1486  1010               	bcf	16,0	;volatile
 10371                           
 10372                           ;main.c: 890: TRISEbits.TRISE1 = 0;
 10373  1487  1090               	bcf	16,1	;volatile
 10374                           
 10375                           ;main.c: 891: TRISGbits.TRISG0 = 0;
 10376  1488  0026               	movlb	6	; select bank6
 10377  1489  100D               	bcf	13,0	;volatile
 10378                           
 10379                           ;main.c: 892: TRISGbits.TRISG3 = 0;
 10380  148A  118D               	bcf	13,3	;volatile
 10381                           
 10382                           ;main.c: 893: TRISGbits.TRISG4 = 0;
 10383  148B  120D               	bcf	13,4	;volatile
 10384                           
 10385                           ;main.c: 894: TRISFbits.TRISF6 = 0;
 10386  148C  130C               	bcf	12,6	;volatile
 10387                           
 10388                           ;main.c: 895: TRISFbits.TRISF5 = 0;
 10389  148D  128C               	bcf	12,5	;volatile
 10390                           
 10391                           ;main.c: 896: TRISFbits.TRISF4 = 0;
 10392  148E  120C               	bcf	12,4	;volatile
 10393                           
 10394                           ;main.c: 901: TRISEbits.TRISE3 = 1;
 10395  148F  0021               	movlb	1	; select bank1
 10396  1490  1590               	bsf	16,3	;volatile
 10397                           
 10398                           ;main.c: 902: TRISEbits.TRISE5 = 1;
 10399  1491  1690               	bsf	16,5	;volatile
 10400                           
 10401                           ;main.c: 903: TRISEbits.TRISE4 = 1;
 10402  1492  1610               	bsf	16,4	;volatile
 10403                           
 10404                           ;main.c: 904: TRISEbits.TRISE2 = 1;
 10405  1493  1510               	bsf	16,2	;volatile
 10406                           
 10407                           ;main.c: 905: TRISFbits.TRISF0 = 0;
 10408  1494  0026               	movlb	6	; select bank6
 10409  1495  100C               	bcf	12,0	;volatile
 10410                           
 10411                           ;main.c: 906: TRISFbits.TRISF1 = 0;
 10412  1496  108C               	bcf	12,1	;volatile
 10413                           
 10414                           ;main.c: 907: TRISFbits.TRISF2 = 0;
 10415  1497  110C               	bcf	12,2	;volatile
 10416                           
 10417                           ;main.c: 910: TRISDbits.TRISD4 = 0;
 10418  1498  0021               	movlb	1	; select bank1
 10419  1499  120F               	bcf	15,4	;volatile
 10420                           
 10421                           ;main.c: 911: TRISDbits.TRISD3 = 0;
 10422  149A  118F               	bcf	15,3	;volatile
 10423                           
 10424                           ;main.c: 912: TRISDbits.TRISD2 = 0;
 10425  149B  110F               	bcf	15,2	;volatile
 10426                           
 10427                           ;main.c: 916: TRISCbits.TRISC6 = 0;
 10428  149C  130E               	bcf	14,6	;volatile
 10429                           
 10430                           ;main.c: 917: TRISCbits.TRISC7 = 1;
 10431  149D  178E               	bsf	14,7	;volatile
 10432                           
 10433                           ;main.c: 919: clearAllPorts();
 10434  149E  3192  224F         	fcall	_clearAllPorts
 10435  14A0  0008               	return
 10436  14A1                     __end_of_GPIO_pin_Initialize:	
 10437                           
 10438                           	psect	text47
 10439  1261                     __ptext47:	
 10440 ;; *************** function _pinINIT_extra *****************
 10441 ;; Defined at:
 10442 ;;		line 1352 in file "main.c"
 10443 ;; Parameters:    Size  Location     Type
 10444 ;;		None
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;		None
 10447 ;; Return value:  Size  Location     Type
 10448 ;;                  1    wreg      void 
 10449 ;; Registers used:
 10450 ;;		status,2
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10460 ;;Total ram usage:        0 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    2
 10463 ;; This function calls:
 10464 ;;		Nothing
 10465 ;; This function is called by:
 10466 ;;		_GPIO_pin_Initialize
 10467 ;; This function uses a non-reentrant model
 10468 ;;
 10469                           
 10470                           
 10471                           ;psect for function _pinINIT_extra
 10472  1261                     _pinINIT_extra:	
 10473                           
 10474                           ;main.c: 1353: ANSELG=0x00; WPUG = 0;
 10475                           
 10476                           ;incstack = 0
 10477                           ; Regs used in _pinINIT_extra: [status,2]
 10478  1261  0028               	movlb	8	; select bank8
 10479  1262  018D               	clrf	13	;volatile
 10480  1263  0029               	movlb	9	; select bank9
 10481  1264  018D               	clrf	13	;volatile
 10482                           
 10483                           ;main.c: 1355: ANSELF=0x00;
 10484  1265  0028               	movlb	8	; select bank8
 10485  1266  018C               	clrf	12	;volatile
 10486                           
 10487                           ;main.c: 1357: ANSELE=0x00; WPUE=0x00;
 10488  1267  0023               	movlb	3	; select bank3
 10489  1268  0190               	clrf	16	;volatile
 10490  1269  0024               	movlb	4	; select bank4
 10491  126A  0190               	clrf	16	;volatile
 10492                           
 10493                           ;main.c: 1359: ANSELD=0x00; WPUD=0x00;
 10494  126B  0023               	movlb	3	; select bank3
 10495  126C  018F               	clrf	15	;volatile
 10496  126D  0024               	movlb	4	; select bank4
 10497  126E  018F               	clrf	15	;volatile
 10498                           
 10499                           ;main.c: 1361: ANSELB=0x00; WPUB=0x00;
 10500  126F  0023               	movlb	3	; select bank3
 10501  1270  018D               	clrf	13	;volatile
 10502  1271  0024               	movlb	4	; select bank4
 10503  1272  018D               	clrf	13	;volatile
 10504                           
 10505                           ;main.c: 1363: ANSELA=0x00;
 10506  1273  0023               	movlb	3	; select bank3
 10507  1274  018C               	clrf	12	;volatile
 10508  1275  0008               	return
 10509  1276                     __end_of_pinINIT_extra:	
 10510                           
 10511                           	psect	text48
 10512  124F                     __ptext48:	
 10513 ;; *************** function _clearAllPorts *****************
 10514 ;; Defined at:
 10515 ;;		line 1369 in file "main.c"
 10516 ;; Parameters:    Size  Location     Type
 10517 ;;		None
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;		None
 10520 ;; Return value:  Size  Location     Type
 10521 ;;                  1    wreg      void 
 10522 ;; Registers used:
 10523 ;;		None
 10524 ;; Tracked objects:
 10525 ;;		On entry : 0/0
 10526 ;;		On exit  : 0/0
 10527 ;;		Unchanged: 0/0
 10528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10533 ;;Total ram usage:        0 bytes
 10534 ;; Hardware stack levels used:    1
 10535 ;; Hardware stack levels required when called:    2
 10536 ;; This function calls:
 10537 ;;		Nothing
 10538 ;; This function is called by:
 10539 ;;		_GPIO_pin_Initialize
 10540 ;; This function uses a non-reentrant model
 10541 ;;
 10542                           
 10543                           
 10544                           ;psect for function _clearAllPorts
 10545  124F                     _clearAllPorts:	
 10546                           
 10547                           ;main.c: 1373: PORTEbits.RE0=0;
 10548                           
 10549                           ;incstack = 0
 10550                           ; Regs used in _clearAllPorts: []
 10551  124F  0020               	movlb	0	; select bank0
 10552  1250  1010               	bcf	16,0	;volatile
 10553                           
 10554                           ;main.c: 1374: PORTEbits.RE1=0;
 10555  1251  1090               	bcf	16,1	;volatile
 10556                           
 10557                           ;main.c: 1375: PORTGbits.RG0=0;
 10558  1252  0025               	movlb	5	; select bank5
 10559  1253  100D               	bcf	13,0	;volatile
 10560                           
 10561                           ;main.c: 1376: PORTGbits.RG3=0;
 10562  1254  118D               	bcf	13,3	;volatile
 10563                           
 10564                           ;main.c: 1377: PORTGbits.RG4=0;
 10565  1255  120D               	bcf	13,4	;volatile
 10566                           
 10567                           ;main.c: 1378: PORTFbits.RF6=0;
 10568  1256  130C               	bcf	12,6	;volatile
 10569                           
 10570                           ;main.c: 1379: PORTFbits.RF5=0;
 10571  1257  128C               	bcf	12,5	;volatile
 10572                           
 10573                           ;main.c: 1380: PORTFbits.RF4=0;
 10574  1258  120C               	bcf	12,4	;volatile
 10575                           
 10576                           ;main.c: 1381: PORTFbits.RF0 = 1;
 10577  1259  140C               	bsf	12,0	;volatile
 10578                           
 10579                           ;main.c: 1382: PORTFbits.RF1 = 1;
 10580  125A  148C               	bsf	12,1	;volatile
 10581                           
 10582                           ;main.c: 1383: PORTFbits.RF2 = 1;
 10583  125B  150C               	bsf	12,2	;volatile
 10584                           
 10585                           ;main.c: 1385: PORTDbits.RD4=0;
 10586  125C  0020               	movlb	0	; select bank0
 10587  125D  120F               	bcf	15,4	;volatile
 10588                           
 10589                           ;main.c: 1386: PORTDbits.RD3=0;
 10590  125E  118F               	bcf	15,3	;volatile
 10591                           
 10592                           ;main.c: 1387: PORTDbits.RD2=0;
 10593  125F  110F               	bcf	15,2	;volatile
 10594  1260  0008               	return
 10595  1261                     __end_of_clearAllPorts:	
 10596                           
 10597                           	psect	intentry
 10598  0004                     __pintentry:	
 10599 ;; *************** function _isr *****************
 10600 ;; Defined at:
 10601 ;;		line 326 in file "main.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;		None
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;		None
 10606 ;; Return value:  Size  Location     Type
 10607 ;;                  1    wreg      void 
 10608 ;; Registers used:
 10609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10610 ;; Tracked objects:
 10611 ;;		On entry : 0/0
 10612 ;;		On exit  : 0/0
 10613 ;;		Unchanged: 0/0
 10614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0
 10618 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0
 10619 ;;Total ram usage:        2 bytes
 10620 ;; Hardware stack levels used:    1
 10621 ;; Hardware stack levels required when called:    1
 10622 ;; This function calls:
 10623 ;;		_errorsISR
 10624 ;; This function is called by:
 10625 ;;		Interrupt level 1
 10626 ;; This function uses a non-reentrant model
 10627 ;;
 10628                           
 10629  0004                     _isr:	
 10630                           
 10631                           ;incstack = 0
 10632  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10633                           
 10634                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10635  0005  3180               	pagesel	$
 10636  0006  0020               	movlb	0	; select bank0
 10637  0007  087F               	movf	127,w
 10638  0008  00FB               	movwf	??_isr+1
 10639                           
 10640                           ;main.c: 329: if(RC1IF){
 10641  0009  1E91               	btfss	17,5	;volatile
 10642  000A  286C               	goto	i1l4038
 10643                           
 10644                           ;main.c: 330: if(RC1STAbits.OERR){
 10645  000B  0023               	movlb	3	; select bank3
 10646  000C  1C9D               	btfss	29,1	;volatile
 10647  000D  2817               	goto	i1l4006
 10648                           
 10649                           ;main.c: 331: RC1STAbits.CREN = 0;
 10650  000E  121D               	bcf	29,4	;volatile
 10651                           
 10652                           ;main.c: 332: RC1STAbits.CREN = 1;
 10653  000F  161D               	bsf	29,4	;volatile
 10654                           
 10655                           ;main.c: 333: errorsISR("EROV");
 10656  0010  3025               	movlw	low (STR_14| (0+32768))
 10657  0011  00F6               	movwf	errorsISR@errNum
 10658  0012  3098               	movlw	high (STR_14| (0+32768))
 10659  0013  00F7               	movwf	errorsISR@errNum+1
 10660  0014  3192  22A1  3180   	fcall	_errorsISR
 10661  0017                     i1l4006:	
 10662                           
 10663                           ;main.c: 334: }
 10664                           ;main.c: 335: mainReceivedDataBuffer[mainReceivedDataPosition]=RC1REG;
 10665  0017  0023               	movlb	3	; select bank3
 10666  0018  0819               	movf	25,w	;volatile
 10667  0019  00FA               	movwf	??_isr
 10668  001A  0872               	movf	_mainReceivedDataPosition,w
 10669  001B  3EA0               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
 10670  001C  0086               	movwf	6
 10671  001D  3002               	movlw	2	; select bank5/6
 10672  001E  0087               	movwf	7
 10673  001F  087A               	movf	??_isr,w
 10674  0020  0081               	movwf	1
 10675                           
 10676                           ;main.c: 336: copymainReceivedDataBuffer[mainReceivedDataPosition] = mainReceivedDataBuf
      +                          fer[mainReceivedDataPosition];
 10677  0021  0872               	movf	_mainReceivedDataPosition,w
 10678  0022  3EA0               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
 10679  0023  0086               	movwf	6
 10680  0024  3002               	movlw	2	; select bank5/6
 10681  0025  0087               	movwf	7
 10682  0026  0801               	movf	1,w
 10683  0027  00FA               	movwf	??_isr
 10684  0028  0872               	movf	_mainReceivedDataPosition,w
 10685  0029  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
 10686  002A  0086               	movwf	6
 10687  002B  3002               	movlw	2	; select bank4/5
 10688  002C  0087               	movwf	7
 10689  002D  087A               	movf	??_isr,w
 10690  002E  0081               	movwf	1
 10691                           
 10692                           ;main.c: 340: if(mainReceivedDataBuffer[0]=='%'){
 10693  002F  3025               	movlw	37
 10694  0030  0025               	movlb	5	; select bank5
 10695  0031  0620               	xorwf	_mainReceivedDataBuffer^(0+640),w
 10696  0032  1D03               	btfss	3,2
 10697  0033  2840               	goto	i1l4020
 10698                           
 10699                           ;main.c: 341: mainReceivedDataPosition++;
 10700  0034  3001               	movlw	1
 10701  0035  07F2               	addwf	_mainReceivedDataPosition,f
 10702  0036  3000               	movlw	0
 10703  0037  3DF3               	addwfc	_mainReceivedDataPosition+1,f
 10704                           
 10705                           ;main.c: 342: if(mainReceivedDataPosition>15){
 10706  0038  3000               	movlw	0
 10707  0039  0273               	subwf	_mainReceivedDataPosition+1,w
 10708  003A  3010               	movlw	16
 10709  003B  1903               	skipnz
 10710  003C  0272               	subwf	_mainReceivedDataPosition,w
 10711  003D  1C03               	skipc
 10712  003E  286C               	goto	i1l4038
 10713  003F  2849               	goto	i1l4022
 10714  0040                     i1l4020:	
 10715                           ;main.c: 346: }
 10716                           ;main.c: 347: }
 10717                           
 10718                           ;main.c: 345: RC1IF=0;
 10719                           
 10720                           ;main.c: 344: mainReceivedDataPosition=0;
 10721                           
 10722                           ;main.c: 343: mainDataReceived=1;
 10723                           
 10724                           
 10725                           ;main.c: 348: else if(copymainReceivedDataBuffer[mainReceivedDataPosition] == '|'){
 10726  0040  0872               	movf	_mainReceivedDataPosition,w
 10727  0041  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
 10728  0042  0086               	movwf	6
 10729  0043  3002               	movlw	2	; select bank4/5
 10730  0044  0087               	movwf	7
 10731  0045  307C               	movlw	124
 10732  0046  0601               	xorwf	1,w
 10733  0047  1D03               	btfss	3,2
 10734  0048  2853               	goto	i1l4028
 10735  0049                     i1l4022:	
 10736                           
 10737                           ;main.c: 349: mainDataReceived=1;
 10738  0049  3001               	movlw	1
 10739  004A  0022               	movlb	2	; select bank2
 10740  004B  00D2               	movwf	_mainDataReceived^(0+256)
 10741  004C  3000               	movlw	0
 10742  004D  00D3               	movwf	(_mainDataReceived^(0+256)+1)
 10743                           
 10744                           ;main.c: 350: mainReceivedDataPosition=0;
 10745  004E  01F2               	clrf	_mainReceivedDataPosition
 10746  004F  01F3               	clrf	_mainReceivedDataPosition+1
 10747                           
 10748                           ;main.c: 351: RC1IF=0;
 10749  0050  0020               	movlb	0	; select bank0
 10750  0051  1291               	bcf	17,5	;volatile
 10751                           
 10752                           ;main.c: 352: }
 10753  0052  286C               	goto	i1l4038
 10754  0053                     i1l4028:	
 10755                           
 10756                           ;main.c: 353: else if((copymainReceivedDataBuffer[0]=='R') && copymainReceivedDataBuffer
      +                          [0] != (0)){
 10757  0053  3052               	movlw	82
 10758  0054  0024               	movlb	4	; select bank4
 10759  0055  064E               	xorwf	_copymainReceivedDataBuffer^(0+512),w
 10760  0056  1D03               	btfss	3,2
 10761  0057  2860               	goto	i1l464
 10762  0058  084E               	movf	_copymainReceivedDataBuffer^(0+512),w
 10763  0059  1903               	btfsc	3,2
 10764  005A  2860               	goto	i1l464
 10765                           
 10766                           ;main.c: 354: mainReceivedDataPosition++;
 10767  005B  3001               	movlw	1
 10768  005C  07F2               	addwf	_mainReceivedDataPosition,f
 10769  005D  3000               	movlw	0
 10770  005E  3DF3               	addwfc	_mainReceivedDataPosition+1,f
 10771                           
 10772                           ;main.c: 356: }
 10773  005F  286C               	goto	i1l4038
 10774  0060                     i1l464:	
 10775                           
 10776                           ;main.c: 359: else{
 10777                           ;main.c: 361: RC1STAbits.CREN = 0;
 10778  0060  0023               	movlb	3	; select bank3
 10779  0061  121D               	bcf	29,4	;volatile
 10780                           
 10781                           ;main.c: 362: RC1STAbits.CREN = 1;
 10782  0062  161D               	bsf	29,4	;volatile
 10783                           
 10784                           ;main.c: 363: mainReceivedDataPosition=0;
 10785  0063  01F2               	clrf	_mainReceivedDataPosition
 10786  0064  01F3               	clrf	_mainReceivedDataPosition+1
 10787                           
 10788                           ;main.c: 364: errorsISR("ERRX");
 10789  0065  302A               	movlw	low (STR_15| (0+32768))
 10790  0066  00F6               	movwf	errorsISR@errNum
 10791  0067  3098               	movlw	high (STR_15| (0+32768))
 10792  0068  00F7               	movwf	errorsISR@errNum+1
 10793  0069  3192  22A1  3180   	fcall	_errorsISR
 10794  006C                     i1l4038:	
 10795                           
 10796                           ;main.c: 365: }
 10797                           ;main.c: 366: }
 10798                           ;main.c: 371: if(PIE1bits.TMR2IE==1 && PIR1bits.TMR2IF==1)
 10799  006C  0021               	movlb	1	; select bank1
 10800  006D  1C91               	btfss	17,1	;volatile
 10801  006E  2875               	goto	i1l466
 10802  006F  0020               	movlb	0	; select bank0
 10803  0070  1C91               	btfss	17,1	;volatile
 10804  0071  2875               	goto	i1l466
 10805                           
 10806                           ;main.c: 372: {
 10807                           ;main.c: 373: PIR1bits.TMR2IF=0;
 10808  0072  1091               	bcf	17,1	;volatile
 10809                           
 10810                           ;main.c: 374: PORTDbits.RD4 = 0;
 10811  0073  120F               	bcf	15,4	;volatile
 10812                           
 10813                           ;main.c: 375: T2CONbits.TMR2ON=0;
 10814  0074  111C               	bcf	28,2	;volatile
 10815  0075                     i1l466:	
 10816                           
 10817                           ;main.c: 376: }
 10818                           ;main.c: 379: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF==1)
 10819  0075  0021               	movlb	1	; select bank1
 10820  0076  1C11               	btfss	17,0	;volatile
 10821  0077  2881               	goto	i1l4054
 10822  0078  0020               	movlb	0	; select bank0
 10823  0079  1C11               	btfss	17,0	;volatile
 10824  007A  2881               	goto	i1l4054
 10825                           
 10826                           ;main.c: 380: {
 10827                           ;main.c: 382: PIR1bits.TMR1IF=0;
 10828  007B  1011               	bcf	17,0	;volatile
 10829                           
 10830                           ;main.c: 383: PORTDbits.RD4 = 1;
 10831  007C  160F               	bsf	15,4	;volatile
 10832                           
 10833                           ;main.c: 384: PR2=0x9F;
 10834  007D  309F               	movlw	159
 10835  007E  009B               	movwf	27	;volatile
 10836                           
 10837                           ;main.c: 385: T2CONbits.TMR2ON = 1;
 10838  007F  151C               	bsf	28,2	;volatile
 10839                           
 10840                           ;main.c: 386: T1CONbits.TMR1ON = 0;
 10841  0080  1018               	bcf	24,0	;volatile
 10842  0081                     i1l4054:	
 10843                           
 10844                           ;main.c: 388: }
 10845                           ;main.c: 392: if(PIE3bits.TMR4IE==1 && PIR3bits.TMR4IF==1)
 10846  0081  0021               	movlb	1	; select bank1
 10847  0082  1C93               	btfss	19,1	;volatile
 10848  0083  288B               	goto	i1l468
 10849  0084  0020               	movlb	0	; select bank0
 10850  0085  1C93               	btfss	19,1	;volatile
 10851  0086  288B               	goto	i1l468
 10852                           
 10853                           ;main.c: 393: {
 10854                           ;main.c: 395: PIR3bits.TMR4IF=0;
 10855  0087  1093               	bcf	19,1	;volatile
 10856                           
 10857                           ;main.c: 396: PORTDbits.RD3 = 0;
 10858  0088  118F               	bcf	15,3	;volatile
 10859                           
 10860                           ;main.c: 397: T4CONbits.TMR4ON=0;
 10861  0089  0028               	movlb	8	; select bank8
 10862  008A  1117               	bcf	23,2	;volatile
 10863  008B                     i1l468:	
 10864                           
 10865                           ;main.c: 399: }
 10866                           ;main.c: 401: if(PIE3bits.TMR3IE == 1 && PIR3bits.TMR3IF==1)
 10867  008B  0021               	movlb	1	; select bank1
 10868  008C  1C13               	btfss	19,0	;volatile
 10869  008D  2898               	goto	i1l4070
 10870  008E  0020               	movlb	0	; select bank0
 10871  008F  1C13               	btfss	19,0	;volatile
 10872  0090  2898               	goto	i1l4070
 10873                           
 10874                           ;main.c: 402: {
 10875                           ;main.c: 404: PIR3bits.TMR3IF=0;
 10876  0091  1013               	bcf	19,0	;volatile
 10877                           
 10878                           ;main.c: 405: PORTDbits.RD3 = 1;
 10879  0092  158F               	bsf	15,3	;volatile
 10880                           
 10881                           ;main.c: 406: PR4=0x9F;
 10882  0093  309F               	movlw	159
 10883  0094  0028               	movlb	8	; select bank8
 10884  0095  0096               	movwf	22	;volatile
 10885                           
 10886                           ;main.c: 407: T4CONbits.TMR4ON = 1;
 10887  0096  1517               	bsf	23,2	;volatile
 10888                           
 10889                           ;main.c: 408: T3CONbits.TMR3ON = 0;
 10890  0097  1013               	bcf	19,0	;volatile
 10891  0098                     i1l4070:	
 10892                           
 10893                           ;main.c: 409: }
 10894                           ;main.c: 412: if(PIE3bits.TMR6IE == 1 && PIR3bits.TMR6IF == 1)
 10895  0098  0021               	movlb	1	; select bank1
 10896  0099  1D93               	btfss	19,3	;volatile
 10897  009A  28A2               	goto	i1l470
 10898  009B  0020               	movlb	0	; select bank0
 10899  009C  1D93               	btfss	19,3	;volatile
 10900  009D  28A2               	goto	i1l470
 10901                           
 10902                           ;main.c: 413: {
 10903                           ;main.c: 414: PIR3bits.TMR6IF=0;
 10904  009E  1193               	bcf	19,3	;volatile
 10905                           
 10906                           ;main.c: 415: PORTDbits.RD2 = 0;
 10907  009F  110F               	bcf	15,2	;volatile
 10908                           
 10909                           ;main.c: 416: T6CONbits.TMR6ON=0;
 10910  00A0  0028               	movlb	8	; select bank8
 10911  00A1  111E               	bcf	30,2	;volatile
 10912  00A2                     i1l470:	
 10913                           
 10914                           ;main.c: 417: }
 10915                           ;main.c: 419: if(PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF==1)
 10916  00A2  0021               	movlb	1	; select bank1
 10917  00A3  1D13               	btfss	19,2	;volatile
 10918  00A4  28AF               	goto	i1l4086
 10919  00A5  0020               	movlb	0	; select bank0
 10920  00A6  1D13               	btfss	19,2	;volatile
 10921  00A7  28AF               	goto	i1l4086
 10922                           
 10923                           ;main.c: 420: {
 10924                           ;main.c: 421: PIR3bits.TMR5IF=0;
 10925  00A8  1113               	bcf	19,2	;volatile
 10926                           
 10927                           ;main.c: 422: PORTDbits.RD2 = 1;
 10928  00A9  150F               	bsf	15,2	;volatile
 10929                           
 10930                           ;main.c: 423: PR6=0x9F;
 10931  00AA  309F               	movlw	159
 10932  00AB  0028               	movlb	8	; select bank8
 10933  00AC  009D               	movwf	29	;volatile
 10934                           
 10935                           ;main.c: 424: T6CONbits.TMR6ON=1;
 10936  00AD  151E               	bsf	30,2	;volatile
 10937                           
 10938                           ;main.c: 425: T5CONbits.TMR5ON=0;
 10939  00AE  101A               	bcf	26,0	;volatile
 10940  00AF                     i1l4086:	
 10941                           
 10942                           ;main.c: 426: }
 10943                           ;main.c: 432: if(PIR4bits.CCP10IF==1 || PIR4bits.CCP7IF == 1 || PIR4bits.CCP9IF==1){
 10944  00AF  0020               	movlb	0	; select bank0
 10945  00B0  1F94               	btfss	20,7	;volatile
 10946  00B1  1914               	btfsc	20,2	;volatile
 10947  00B2  28B5               	goto	i1l474
 10948  00B3  1F14               	btfss	20,6	;volatile
 10949  00B4  28FB               	goto	i1l484
 10950  00B5                     i1l474:	
 10951                           
 10952                           ;main.c: 436: if(CCP10IF){
 10953  00B5  1B94               	btfsc	20,7	;volatile
 10954                           
 10955                           ;main.c: 437: if(CCP10IF == 1){
 10956  00B6  1F94               	btfss	20,7	;volatile
 10957  00B7  28CB               	goto	i1l4108
 10958                           
 10959                           ;main.c: 438: CCP10IF=0;
 10960  00B8  1394               	bcf	20,7	;volatile
 10961                           
 10962                           ;main.c: 439: if(start_PWM_Generation_For_RedLed == 1){
 10963  00B9  0022               	movlb	2	; select bank2
 10964  00BA  034C               	decf	_start_PWM_Generation_For_RedLed^(0+256),w
 10965  00BB  044D               	iorwf	(_start_PWM_Generation_For_RedLed+1)^(0+256),w
 10966  00BC  1D03               	btfss	3,2
 10967  00BD  28CB               	goto	i1l4108
 10968                           
 10969                           ;main.c: 441: TMR1H = Timer1H;
 10970  00BE  0846               	movf	_Timer1H^(0+256),w
 10971  00BF  0020               	movlb	0	; select bank0
 10972  00C0  0097               	movwf	23	;volatile
 10973                           
 10974                           ;main.c: 442: TMR1L = Timer1L;
 10975  00C1  0022               	movlb	2	; select bank2
 10976  00C2  0844               	movf	_Timer1L^(0+256),w
 10977  00C3  0020               	movlb	0	; select bank0
 10978  00C4  0096               	movwf	22	;volatile
 10979                           
 10980                           ;main.c: 443: T1CONbits.TMR1ON = 1;
 10981  00C5  1418               	bsf	24,0	;volatile
 10982                           
 10983                           ;main.c: 444: PORTDbits.RD4=1;
 10984  00C6  160F               	bsf	15,4	;volatile
 10985                           
 10986                           ;main.c: 445: PIE1bits.TMR1IE = 1;
 10987  00C7  0021               	movlb	1	; select bank1
 10988  00C8  1411               	bsf	17,0	;volatile
 10989                           
 10990                           ;main.c: 446: PIR1bits.TMR1IF=0;
 10991  00C9  0020               	movlb	0	; select bank0
 10992  00CA  1011               	bcf	17,0	;volatile
 10993  00CB                     i1l4108:	
 10994                           
 10995                           ;main.c: 447: }
 10996                           ;main.c: 448: }
 10997                           ;main.c: 449: }
 10998                           ;main.c: 451: if(CCP9IF){
 10999  00CB  0020               	movlb	0	; select bank0
 11000  00CC  1B14               	btfsc	20,6	;volatile
 11001                           
 11002                           ;main.c: 452: if(CCP9IF == 1){
 11003  00CD  1F14               	btfss	20,6	;volatile
 11004  00CE  28E3               	goto	i1l4126
 11005                           
 11006                           ;main.c: 453: CCP9IF=0;
 11007  00CF  1314               	bcf	20,6	;volatile
 11008                           
 11009                           ;main.c: 454: if(start_PWM_Generation_For_GreenLed == 1){
 11010  00D0  0022               	movlb	2	; select bank2
 11011  00D1  034A               	decf	_start_PWM_Generation_For_GreenLed^(0+256),w
 11012  00D2  044B               	iorwf	(_start_PWM_Generation_For_GreenLed+1)^(0+256),w
 11013  00D3  1D03               	btfss	3,2
 11014  00D4  28E3               	goto	i1l4126
 11015                           
 11016                           ;main.c: 456: TMR3H = Timer3H;
 11017  00D5  0842               	movf	_Timer3H^(0+256),w
 11018  00D6  0028               	movlb	8	; select bank8
 11019  00D7  0092               	movwf	18	;volatile
 11020                           
 11021                           ;main.c: 457: TMR3L = Timer3L;
 11022  00D8  0022               	movlb	2	; select bank2
 11023  00D9  0840               	movf	_Timer3L^(0+256),w
 11024  00DA  0028               	movlb	8	; select bank8
 11025  00DB  0091               	movwf	17	;volatile
 11026                           
 11027                           ;main.c: 458: T3CONbits.TMR3ON = 1;
 11028  00DC  1413               	bsf	19,0	;volatile
 11029                           
 11030                           ;main.c: 459: PORTDbits.RD3=1;
 11031  00DD  0020               	movlb	0	; select bank0
 11032  00DE  158F               	bsf	15,3	;volatile
 11033                           
 11034                           ;main.c: 460: PIE3bits.TMR3IE = 1;
 11035  00DF  0021               	movlb	1	; select bank1
 11036  00E0  1413               	bsf	19,0	;volatile
 11037                           
 11038                           ;main.c: 461: PIR3bits.TMR3IF = 0;
 11039  00E1  0020               	movlb	0	; select bank0
 11040  00E2  1013               	bcf	19,0	;volatile
 11041  00E3                     i1l4126:	
 11042                           
 11043                           ;main.c: 463: }
 11044                           ;main.c: 464: }
 11045                           ;main.c: 465: }
 11046                           ;main.c: 467: if(CCP7IF){
 11047  00E3  0020               	movlb	0	; select bank0
 11048  00E4  1914               	btfsc	20,2	;volatile
 11049                           
 11050                           ;main.c: 468: if(CCP7IF == 1){
 11051  00E5  1D14               	btfss	20,2	;volatile
 11052  00E6  28FB               	goto	i1l484
 11053                           
 11054                           ;main.c: 469: CCP7IF=0;
 11055  00E7  1114               	bcf	20,2	;volatile
 11056                           
 11057                           ;main.c: 470: if(start_PWM_Generation_For_BlueLed == 1){
 11058  00E8  0022               	movlb	2	; select bank2
 11059  00E9  0348               	decf	_start_PWM_Generation_For_BlueLed^(0+256),w
 11060  00EA  0449               	iorwf	(_start_PWM_Generation_For_BlueLed+1)^(0+256),w
 11061  00EB  1D03               	btfss	3,2
 11062  00EC  28FB               	goto	i1l484
 11063                           
 11064                           ;main.c: 472: TMR5H = Timer5H;
 11065  00ED  083E               	movf	_Timer5H^(0+256),w
 11066  00EE  0028               	movlb	8	; select bank8
 11067  00EF  0099               	movwf	25	;volatile
 11068                           
 11069                           ;main.c: 473: TMR5L = Timer5L;
 11070  00F0  0022               	movlb	2	; select bank2
 11071  00F1  083C               	movf	_Timer5L^(0+256),w
 11072  00F2  0028               	movlb	8	; select bank8
 11073  00F3  0098               	movwf	24	;volatile
 11074                           
 11075                           ;main.c: 474: T5CONbits.TMR5ON = 1;
 11076  00F4  141A               	bsf	26,0	;volatile
 11077                           
 11078                           ;main.c: 475: PORTDbits.RD2 = 1;
 11079  00F5  0020               	movlb	0	; select bank0
 11080  00F6  150F               	bsf	15,2	;volatile
 11081                           
 11082                           ;main.c: 476: PIE3bits.TMR5IE = 1;
 11083  00F7  0021               	movlb	1	; select bank1
 11084  00F8  1513               	bsf	19,2	;volatile
 11085                           
 11086                           ;main.c: 477: PIR3bits.TMR5IF = 0;
 11087  00F9  0020               	movlb	0	; select bank0
 11088  00FA  1113               	bcf	19,2	;volatile
 11089  00FB                     i1l484:	
 11090  00FB  087B               	movf	??_isr+1,w
 11091  00FC  0020               	movlb	0	; select bank0
 11092  00FD  00FF               	movwf	127
 11093  00FE  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11094  00FF  0009               	retfie
 11095  0100                     __end_of_isr:	
 11096                           
 11097                           	psect	text50
 11098  12A1                     __ptext50:	
 11099 ;; *************** function _errorsISR *****************
 11100 ;; Defined at:
 11101 ;;		line 1230 in file "main.c"
 11102 ;; Parameters:    Size  Location     Type
 11103 ;;  errNum          2    0[COMMON] PTR const unsigned char 
 11104 ;;		 -> STR_15(5), STR_14(5), 
 11105 ;; Auto vars:     Size  Location     Type
 11106 ;;  Tx_count        2    2[COMMON] int 
 11107 ;; Return value:  Size  Location     Type
 11108 ;;                  1    wreg      void 
 11109 ;; Registers used:
 11110 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11111 ;; Tracked objects:
 11112 ;;		On entry : 0/0
 11113 ;;		On exit  : 0/0
 11114 ;;		Unchanged: 0/0
 11115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 11116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0
 11117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0
 11118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 11119 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0
 11120 ;;Total ram usage:        4 bytes
 11121 ;; Hardware stack levels used:    1
 11122 ;; This function calls:
 11123 ;;		Nothing
 11124 ;; This function is called by:
 11125 ;;		_isr
 11126 ;; This function uses a non-reentrant model
 11127 ;;
 11128                           
 11129                           
 11130                           ;psect for function _errorsISR
 11131  12A1                     _errorsISR:	
 11132                           
 11133                           ;main.c: 1231: int Tx_count=0;
 11134                           
 11135                           ;incstack = 0
 11136                           ; Regs used in _errorsISR: [wreg-fsr0h+status,2+status,0+pclath]
 11137  12A1  01F8               	clrf	errorsISR@Tx_count
 11138  12A2  01F9               	clrf	errorsISR@Tx_count+1
 11139  12A3                     i1l3838:	
 11140                           ;main.c: 1232: while(Tx_count!=4)
 11141                           
 11142  12A3  3004               	movlw	4
 11143  12A4  0678               	xorwf	errorsISR@Tx_count,w
 11144  12A5  0479               	iorwf	errorsISR@Tx_count+1,w
 11145  12A6  1903               	btfsc	3,2
 11146  12A7  0008               	return
 11147  12A8                     i1l596:	
 11148                           ;main.c: 1233: {
 11149                           ;main.c: 1234: while (!TX1STAbits.TRMT);
 11150                           
 11151  12A8  0023               	movlb	3	; select bank3
 11152  12A9  1C9E               	btfss	30,1	;volatile
 11153  12AA  2AA8               	goto	i1l596
 11154                           
 11155                           ;main.c: 1235: TX1REG = *errNum;
 11156  12AB  0876               	movf	errorsISR@errNum,w
 11157  12AC  0084               	movwf	4
 11158  12AD  0877               	movf	errorsISR@errNum+1,w
 11159  12AE  0085               	movwf	5
 11160  12AF  0800               	movf	0,w	;code access
 11161  12B0  009A               	movwf	26	;volatile
 11162                           
 11163                           ;main.c: 1236: *errNum++;
 11164  12B1  3001               	movlw	1
 11165  12B2  07F6               	addwf	errorsISR@errNum,f
 11166  12B3  3000               	movlw	0
 11167  12B4  3DF7               	addwfc	errorsISR@errNum+1,f
 11168                           
 11169                           ;main.c: 1237: Tx_count++;
 11170  12B5  3001               	movlw	1
 11171  12B6  07F8               	addwf	errorsISR@Tx_count,f
 11172  12B7  3000               	movlw	0
 11173  12B8  3DF9               	addwfc	errorsISR@Tx_count+1,f
 11174  12B9  2AA3               	goto	i1l3838
 11175  12BA                     __end_of_errorsISR:	
 11176  007E                     btemp	set	126	;btemp
 11177  007E                     int$flags	set	126
 11178  007E                     wtemp0	set	126


Data Sizes:
    Strings     53
    Constant    8
    Data        247
    BSS         166
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      72
    BANK1            80     75      80
    BANK2            80      0      79
    BANK3            80      0      77
    BANK4            80      0      78
    BANK5            80     10      60
    BANK6            80      0      32
    BANK7            80      0      74
    BANK8            80      0       0
    BANK9            32      0       0

Pointer List with Targets:

    StopBitString	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    FinalframebitString	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    strncpy@to	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), 
		 -> applicationControlRGB@strGreenH(BANK1[3]), applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 
		 -> NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), 
		 -> applicationControlRGB@strGreenH(BANK1[3]), applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 
		 -> NULL(NULL[0]), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_17(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 32
		 -> ChildLockbuffer(BANK2[2]), switchstatusbuffer(BANK2[2]), switchNumberBuffer(BANK3[3]), copymainReceivedDataBuffer(BANK4[32]), 
		 -> STR_10(CODE[5]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[7]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), NULL(NULL[0]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    memset@p1	PTR void  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    memset@p	PTR unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ChildLockbuffer(BANK2[2]), switchstatusbuffer(BANK2[2]), switchNumberBuffer(BANK3[3]), copymainReceivedDataBuffer(BANK4[32]), 
		 -> applianceControl@dimmerSpeedStringBuffer(BANK0[2]), applianceControl@switchNumberStringBuffer(BANK0[2]), NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sendAcknowledgmentRGB@currentStateBufferRGB	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    hexadecimalToDecimal@hexVal	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    errorsMain@errNum	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_19(CODE[5]), 

    errorsISR@errNum	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[5]), 

    AllColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    ChildLockString	PTR unsigned char  size(1) Largest target is 2
		 -> ChildLockbuffer(BANK2[2]), NULL(NULL[0]), 

    BlueColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    GreenColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    RedColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    SwitchStatusString	PTR unsigned char  size(1) Largest target is 2
		 -> switchstatusbuffer(BANK2[2]), NULL(NULL[0]), 

    AcknowledgementString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    SwitchNumberString	PTR unsigned char  size(1) Largest target is 3
		 -> switchNumberBuffer(BANK3[3]), NULL(NULL[0]), 

    ModuleNameString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    token	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    ConvertmaindataReceiveIntoString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    sendAcknowledgment@currentStateBuffer	PTR unsigned char  size(1) Largest target is 74
		 -> currentStateBuffer(BANK7[74]), 

    sp__memset	PTR void  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    applicationControlRGB@ModuleNamestr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@ChildLockstr	PTR unsigned char  size(1) Largest target is 2
		 -> ChildLockbuffer(BANK2[2]), NULL(NULL[0]), 

    applicationControlRGB@Allcolorstr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@GreenColorIntensitystr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@BlueColorIntensitystr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@RedColorIntensitystr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@SwitchStatusstr	PTR unsigned char  size(1) Largest target is 2
		 -> switchstatusbuffer(BANK2[2]), NULL(NULL[0]), 

    applicationControlRGB@SwitchNumberstr	PTR unsigned char  size(1) Largest target is 3
		 -> switchNumberBuffer(BANK3[3]), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_errorsISR

Critical Paths under _main in BANK0

    _main->_applicationControlRGB
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _applicationControlRGB->___fttol
    _sprintf->___lwdiv
    _hexadecimalToDecimal->___wmul
    _hexadecimalToDecimal->_strlen
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___ftpack
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _applianceControl->_atoi
    _atoi->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_applicationControlRGB

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   35189
                                             53 BANK0      7     7      0
                                              0 BANK5     10    10      0
                _GPIO_pin_Initialize
     _ReceivingIndicationLedBlinking
           _SwitchOffStatustToGatway
            _SwitchOnStatustToGatway
  _TransmissionIndicationLedBlinking
                  _allPeripheralInit
                   _applianceControl
              _applicationControlRGB
             _copyReceivedDataBuffer
                         _errorsMain
                             _strcmp
                             _strlen
                             _strtok
 ---------------------------------------------------------------------------------
 (1) _strtok                                               6     4      2    1855
                                             14 BANK0      6     4      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (2) _strspn                                               7     5      2     675
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strcspn                                              7     5      2     675
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strchr                                               7     3      4     432
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               5     3      2     243
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _errorsMain                                           4     2      2     148
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _copyReceivedDataBuffer                               3     3      0     164
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _applicationControlRGB                               84    77      7   26904
                                             44 BANK0      9     2      7
                                              0 BANK1     75    75      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _abs
                               _atoi
               _hexadecimalToDecimal
                             _memset
              _sendAcknowledgmentRGB
                            _sprintf
                             _strcat
                             _strcpy
                             _strlen
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _strncpy                                              6     3      3    1324
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               4     3      1     219
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2    1903
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    20      6    1322
                                              8 BANK0     18    12      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendAcknowledgmentRGB                                4     4      0     104
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     698
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _hexadecimalToDecimal                                13    11      2    1826
                                              6 BANK0     13    11      2
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     352
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     324
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2726
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     602
                                             30 BANK0     14    10      4
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3414
                                              8 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    4270
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2828
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2464
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _applianceControl                                    21    15      6    3277
                                             13 BANK0     21    15      6
                               _atoi
                 _sendAcknowledgment
 ---------------------------------------------------------------------------------
 (2) _sendAcknowledgment                                   4     4      0     104
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2    1623
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     598
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _allPeripheralInit                                    0     0      0       0
                   _CCP10_Initialize
                    _CCP7_Initialize
                    _CCP8_Initialize
                    _CCP9_Initialize
                  _EUSART_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR4_Initialize
                    _TMR5_Initialize
                    _TMR6_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP9_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP8_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP7_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP10_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TransmissionIndicationLedBlinking                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnStatustToGatway                              3     1      2     647
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _SwitchOffStatustToGatway                             3     1      2     647
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReceivingIndicationLedBlinking                       2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_pin_Initialize                                  0     0      0       0
                      _clearAllPorts
                      _pinINIT_extra
 ---------------------------------------------------------------------------------
 (2) _pinINIT_extra                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearAllPorts                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0     175
                                              4 COMMON     2     2      0
                          _errorsISR
 ---------------------------------------------------------------------------------
 (5) _errorsISR                                            4     2      2     175
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_pin_Initialize
     _clearAllPorts
     _pinINIT_extra
   _ReceivingIndicationLedBlinking
   _SwitchOffStatustToGatway
   _SwitchOnStatustToGatway
   _TransmissionIndicationLedBlinking
   _allPeripheralInit
     _CCP10_Initialize
     _CCP7_Initialize
     _CCP8_Initialize
     _CCP9_Initialize
     _EUSART_Initialize
     _TMR1_Initialize
     _TMR2_Initialize
     _TMR3_Initialize
     _TMR4_Initialize
     _TMR5_Initialize
     _TMR6_Initialize
   _applianceControl
     _atoi
       ___wmul
       _isdigit
     _sendAcknowledgment
   _applicationControlRGB
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
     _abs
     _atoi
       ___wmul
       _isdigit
     _hexadecimalToDecimal
       ___wmul
       _strlen
     _memset
     _sendAcknowledgmentRGB
     _sprintf
       ___lwdiv
     _strcat
     _strcpy
     _strlen
     _strncpy
   _copyReceivedDataBuffer
   _errorsMain
   _strcmp
   _strlen
   _strtok
     _strcspn
       _strchr
     _strspn
       _strchr

 _isr (ROOT)
   _errorsISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     234       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4B      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4F      10       98.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4D      12       96.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4E      14       97.5%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      A      3C      16       75.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      20      18       40.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      4A      20       92.5%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            20      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               20      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
DATA                 0      0     234      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 27 12:07:39 2019

                          _IntegerGreenColorIntensity 00EB                            __size_of_allPeripheralInit 0021  
                                                   pc 0002                                           __CFG_CP$OFF 0000  
                                                  _M1 012E                                                    _M2 012C  
                                                  _M3 012A                                                    _M4 0128  
                                                  _M5 0126                                                    _M6 0124  
                                                  _M7 0122                                                    _M8 0120  
                                                  _M9 01D2                               hexadecimalToDecimal@len 002A  
                                 ___wmul@multiplicand 0022                          applianceControl@integerSpeed 0035  
                                                 l424 0778                                                   l443 0B5A  
                                                 l605 132F                                                   l517 0DA3  
                                                 l448 134D                                                   l626 1385  
                                                 l628 138C                                                   l691 12F8  
                                                 l871 16DB                                                   l962 07E6  
                                                 l878 16EE                                                   l879 16F6  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 _PR4 0416                                                   _PR6 041D  
               _ConvertIntegertoStringBlueColorBuffer 01E8                              hexadecimalToDecimal@base 002E  
                                    _ModuleNameBuffer 01CF                                                   _abs 121E  
                           __size_of_applianceControl 00FC                                                   _isr 0004  
                                     _TMR2_Initialize 11C1                                          __CFG_BORV$LO 0000  
                                                 wreg 0009                                          __CFG_FOSC$HS 0000  
                                    _ModuleNameString 0064                                                  S6286 1010  
                                                S6278 1000                                          __CFG_LVP$OFF 0000  
                                        ___ftdiv@cntr 0038                                          ___ftdiv@sign 003D  
                                                ?_abs 0020                                                  l1151 12BA  
                                                l5200 0A2F                                                  l6000 0EAC  
                                                l5204 0A37                                                  l5220 0792  
                                                l6100 0F91                                                  l6020 0ED7  
                                                l6004 0EB3                                                  l5118 140D  
                                                l5134 087C                                                  l5128 0866  
                                                l5240 07D0                                                  l6112 0FB0  
                                                l6032 0EF6                                                  l6016 0ED2  
                                                l5170 09C2                                                  l5156 08D6  
                                                l5148 08BD                                                  l5252 07F7  
                                                l4700 1367                                                  l6132 0FDB  
                                                l6116 0FB5                                                  l6052 0F21  
                                                l6036 0EFD                                                  l5246 07DD  
                                                l5238 07C2                                                  l4702 1373  
                                                l5262 1534                                                  l5192 0A1B  
                                                l5176 09D8                                                  l5248 07E9  
                                                l5280 152A                                                  l5264 153C  
                                                l6144 0FFA                                                  l6128 0FD4  
                                                l6080 0F66                                                  l6064 0F40  
                                                l6048 0F1C                                                  l4802 1716  
                                                l4730 16C2                                                  l5450 06E9  
                                                l5442 06D9                                                  l5434 06CD  
                                                l5274 1504                                                  l4708 12F2  
                                                l4804 170D                                                  l4740 16E8  
                                                l4732 16C7                                                  l4724 16B1  
                                                l5188 0A13                                                  l5460 070E  
                                                l5700 1470                                                  l5276 150C  
                                                l5268 155A                                                  l6084 0F6B  
                                                l6068 0F47                                                  l4822 173C  
                                                l4806 171C                                                  l5550 0B18  
                                                l4910 08FE                                                  l5470 0733  
                                                l5446 06E1                                                  l4760 121C  
                                                l4832 1779                                                  l4824 1740  
                                                l4816 1734                                                  l5560 0B3F  
                                                l5552 0B1F                                                  l4728 16B8  
                                                l4912 09A6                                                  l4840 1311  
                                                l6280 0764                                                  l5464 0716  
                                                l5456 0706                                                  l5712 132A  
                                                l6096 0F8A                                                  l4826 1769  
                                                l5554 0B27                                                  l5546 0B0B  
                                                l4738 16E0                                                  l4930 14C5  
                                                l6282 0773                                                  l5474 073A  
                                                l5490 076D                                                  l6284 0B4D  
                                                l5556 0B2F                                                  l5548 0B12  
                                                l5564 0B47                                                  l4908 096C  
                                                l4852 143E                                                  l4924 14A7  
                                                l6276 0D38                                                  l5812 0C4B  
                                                l5804 0C25                                                  l5558 0B37  
                                                l4782 1650                                                  l4774 1632  
                                                l4846 142A                                                  l4926 14BD  
                                                l5478 0741                                                  l5486 075E  
                                                l5670 0812                                                  l5830 0C90  
                                                l5822 0C6A                                                  l5814 0C51  
                                                l4960 17B7                                                  l4952 179A  
                                                l4776 163E                                                  l4848 1436  
                                                l5664 080D                                                  l5920 0DF1  
                                                l5904 0DCA                                                  l5840 0CC4  
                                                l5832 0C96                                                  l5816 0C58  
                                                l4938 12DA                                                  l4786 1659  
                                                l4882 0938                                                  l5850 0CED  
                                                l4972 17FB                                                  l4892 0949  
                                                l4876 0920                                                  l5940 0E1E  
                                                l5924 0DF7                                                  l5908 0DD2  
                                                l5860 0D1B                                                  l5844 0CDB  
                                                l5836 0CAD                                                  l5756 0B81  
                                                ?_isr 0076                                                  l5694 144F  
                                                l5686 084C                                                  l5678 0829  
                                                l5870 0D49                                                  l5774 0BC9  
                                                l4984 1348                                                  l4968 17F5  
                                                l5696 1457                                                  l5688 084D  
                                                l5952 0E3D                                                  l5936 0E16  
                                                l5872 0D6A                                                  l4898 0968  
                                                l5858 0D15                                                  l5866 0D32  
                                                l5794 0C00                                                  l5890 0DA6  
                                                l5972 0E69                                                  l5956 0E43  
                                                l5884 0D85                                                  l5868 0D45  
                                                l5798 0C13                                                  l5984 0E88  
                                                l5968 0E62                                                  l5988 0E8D  
                                                STR_1 183B                                                  STR_2 183B  
                                                STR_3 1819                                                  STR_4 183B  
                                                STR_5 183B                                                  STR_6 183B  
                                                STR_7 183B                                                  STR_8 183B  
                                                STR_9 183B                                                  u5305 0A38  
                                                u5155 088E                                                  u5315 0A3E  
                                                u5235 09E4                                                  _PEIE 005E  
                                                u5165 089E                                                  u5245 09F4  
                                                u5405 07DE                                                  u4615 16BD  
                                                u5175 08BE                                                  u5185 08CD  
                                                u5265 0A1C                                                  u5345 0799  
                                                u4635 16D6                                                  u5195 08D7  
                                                u5275 0A22                                                  u4565 12F9  
                                                u4575 12FE                                                  u4655 16E3  
                                                u5375 07C3                                                  u4745 1635  
                                                u5545 1571                                                  u6507 1615  
                                                u6517 1623                                                  u4765 163F  
                                                u5805 0D83                                                  u6527 15CA  
                                                u4695 16FD                                                  u4775 1649  
                                                u5815 0DA1                                                  u5735 0C23  
                                                u6537 15D6                                                  u4785 1651  
                                                u5745 0C49                                                  u6547 15E2  
                                                u5755 0C68                                                  u6467 0B61  
                                                u6557 15F0                                                  u6477 1246  
                                                u4965 095E                                                  u5765 0C8E  
                                                u6567 1235                                                  u6487 15FD  
                                                u5775 0CEB                                                  u6497 1609  
                                                u5785 0D13                                                  _TMR2 001A  
                                                _TMR4 0415                                                  _TMR6 041C  
                                                _WPUB 020D                                                  _WPUD 020F  
                                                _WPUE 0210                                                  _WPUG 048D  
                                        __CFG_WRT$OFF 0000                                                  abs@a 0020  
                                                _atoi 170D                                                  _main 0B5B  
                                        ___ftpack@arg 0020                                          ___ftpack@exp 0023  
                  applicationControlRGB@CompleteClock 00D6                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  btemp 007E  
                             _copy_parentalLockBuffer 01B8                                                  start 0100  
                                       __CFG_IESO$OFF 0000                                       _TMR3_Initialize 11F7  
                              __size_of_pinINIT_extra 0015                    applicationControlRGB@NeedBluePulse 00BA  
                                        ___ftmul@cntr 0036                                          ___ftmul@sign 0037  
                      applicationControlRGB@remainder 00A0                                          ___fttol@exp1 004B  
                                               ??_abs 0022                                          ___fttol@lval 0047  
                                               ??_isr 007A                   applianceControl@charParentalControl 0031  
                           __size_of_CCP10_Initialize 000A                                                 ?_atoi 0026  
                                               ?_main 0076                                                 STR_10 182F  
                                               STR_11 1838                                                 STR_12 1838  
                                               STR_20 1808                                                 STR_13 1838  
                                               STR_14 1825                                                 STR_15 182A  
                                               STR_16 183B                                                 STR_17 1834  
                                       __CFG_WDTE$OFF 0000                                                 STR_18 183B  
                                               STR_19 1820                                       __end_of___ftdiv 08F8  
                                     __end_of___ftmul 0A5F                                                 _T1CON 0018  
                                     __end_of___fttol 0800                                                 _T2CON 001C  
                                               _T3CON 0413                                                 _RC1IF 008D  
                                               _T4CON 0417                               _AllColorIntensityString 005E  
                                               _T5CON 041A                                                 _T6CON 041E  
                                     __end_of___lwdiv 165E                                                 i1l470 00A2  
                                               i1l464 0060                                                 i1l474 00B5  
                                               i1l466 0075                                                 i1l484 00FB  
                                               i1l468 008B                                                 i1l596 12A8  
                                               _TMR1H 0017                                                 _TMR3H 0412  
                                               _TMR1L 0016                                                 _TMR3L 0411  
                                               _TMR5H 0419                                                 _TMR5L 0418  
                              ??_hexadecimalToDecimal 0028                                       _TMR4_Initialize 11D6  
                                     _charSwitchState 0168                        applicationControlRGB@strGreenH 00C5  
                      applicationControlRGB@strGreenL 00C8                                        __CFG_FCMEN$OFF 0000  
                                       ___awtoft@sign 002D                                       _CCP7_Initialize 11A3  
                                     __end_of_isdigit 121E                                         ___ftpack@sign 0024  
                                               atoi@a 002B                                                 atoi@s 0026  
                                               _token 0065      applicationControlRGB@ConvertIntoTenMsRangeFactor 00E0  
                                               main@j 02D4                                                 main@k 02D6  
                             __end_of_TMR1_Initialize 11D6                                        __CFG_BOREN$OFF 0000  
                _ConvertIntegertoStringRedColorBuffer 013A                        __size_of_applicationControlRGB 05FC  
                       _RedColorIntensityStringLength 01E4                         __end_of_applicationControlRGB 0779  
                                               status 0003                                                 wtemp0 007E  
                                     __end_of_sprintf 09AB   applicationControlRGB@ConvertIntToTimeInMicrosecBlue 00E8  
                                     __end_of_strcspn 152F                                       __end_of_strncpy 14D0  
                               __end_of_clearAllPorts 1261                                   _GPIO_pin_Initialize 1476  
                                     _TMR5_Initialize 1203                                        __CFG_MCLRE$OFF 0000  
                                     __initialization 0102                               ?_copyReceivedDataBuffer 0076  
                                        __end_of_atoi 177E                                          __end_of_main 1000  
                                     _CCP8_Initialize 11AD                                            _ErrorNames 01CA  
                             __end_of_TMR2_Initialize 11CB                                        __CFG_LPBOR$OFF 0000  
                               _GreenLedSwitchCounter 01D8                                                ??_atoi 0028  
                                              ??_main 0055                                         ___fttol@sign1 0046  
                            _BlueColorIntensityBuffer 0154                                  ?_GPIO_pin_Initialize 0076  
           __end_of_TransmissionIndicationLedBlinking 124F            __size_of_TransmissionIndicationLedBlinking 0011  
                 ??_TransmissionIndicationLedBlinking 0020                    ?_TransmissionIndicationLedBlinking 0076  
                   _TransmissionIndicationLedBlinking 123E                                    _switchstatusbuffer 0162  
                       applicationControlRGB@RedPulse 00A6                                         _pinINIT_extra 1261  
                                     _TMR6_Initialize 11E1                              _BlueColorIntensityString 005F  
                                     _CCP9_Initialize 11B7                                                _CCP7IF 00A2  
                                              _CCP9IF 00A6                                                _CCPR7H 0615  
                                              _CCPR8H 0618                                                _CCPR9H 061B  
                                              _CCPR7L 0614                                                _CCPR8L 0617  
                                              _CCPR9L 061A                                      __end_of___awtoft 1424  
                                              _ANSELA 018C                                                _ANSELB 018D  
                                              _ANSELD 018F                                                _ANSELE 0190  
                                              _ANSELF 040C                                      __end_of___ftpack 170D  
                                              _ANSELG 040D                                                _T1GCON 0019  
                                              _T3GCON 0414                                                _T5GCON 041B  
                                              _RC1REG 0199                                   _RedLedSwitchCounter 01DA  
                                              _RC1STA 019D                                                i1l4020 0040  
                                              i1l4022 0049                                                i1l4006 0017  
                                              i1l4108 00CB                                                i1l4028 0053  
                                              i1l4126 00E3                                                i1l4070 0098  
                                              i1l4054 0081                                                i1l4038 006C  
                             __end_of_TMR3_Initialize 1203                                                i1l4086 00AF  
                                              i1l3838 12A3                                      __end_of___lwtoft 128B  
                                              _TX1REG 019A                                                _TX1STA 019E  
                                      __CFG_PWRTE$OFF 0000                        __end_of_copyReceivedDataBuffer 1591  
                         __size_of_sendAcknowledgment 001E                        __size_of_sendAcknowledgmentRGB 0020  
                                 _FinalFramebitBuffer 00EF                         __end_of_sendAcknowledgmentRGB 13A1  
                                              ___wmul 12EF                                             ??___ftdiv 0034  
                                           ??___ftmul 002E                                             ??___fttol 0042  
                                           ??___lwdiv 0024                                                _memset 12D4  
                             __end_of_TMR4_Initialize 11E1            sendAcknowledgmentRGB@currentStateBufferRGB 0023  
                                              _strcat 1424                                                _strchr 12BA  
                                              _strcmp 144C                                                _strcpy 130B  
                                              _strlen 1362                               __end_of_CCP7_Initialize 11AD  
                                              _strtok 0804                                                _strspn 152F  
                               ??_GPIO_pin_Initialize 0020                                 ___ftmul@f3_as_product 0033  
                            _mainReceivedDataPosition 0072                                      _applianceControl 0A5F  
                                           ??_isdigit 0020                                        ?_pinINIT_extra 0076  
                                           ??_sprintf 002E                                             ??_strcspn 0029  
                          ??_SwitchOffStatustToGatway 0022                                             ??_strncpy 0023  
applicationControlRGB@ConvertIntToTimeInMicrosecGreen 00E5                                      ?_TMR1_Initialize 0076  
                             __end_of_TMR5_Initialize 120F                               __end_of__initialization 0179  
                       applicationControlRGB@strBlueH 00CB                         applicationControlRGB@strBlueL 00CE  
                             __end_of_CCP8_Initialize 11B7                                            ___ftdiv@f1 0031  
                                          ___ftdiv@f2 002E                                            ___ftdiv@f3 0039  
                                          ___awtoft@c 0028                                            ___ftmul@f1 0028  
                                          ___ftmul@f2 002B                                            ___fttol@f1 003E  
                                      __pcstackCOMMON 0076                      __size_of_SwitchOnStatustToGatway 0033  
                                        __pidataBANK0 0003                                          __pidataBANK2 11EC  
                                        __pidataBANK3 14D0                                          __pidataBANK4 13C1  
                                        __pidataBANK5 1591                                          __pidataBANK6 13A1  
                                        __pidataBANK7 165E                                      ?_TMR2_Initialize 0076  
                                    _CCP10_Initialize 1199                               __end_of_TMR6_Initialize 11EC  
           applicationControlRGB@RedColorIntensitystr 004E                      applicationControlRGB@Allcolorstr 0052  
                                          ___lwtoft@c 0028                               __end_of_CCP9_Initialize 11C1  
                       sendAcknowledgmentRGB@Tx_count 0021                                            __pbssBANK0 005C  
                                          __pbssBANK1 00EB                                            __pbssBANK2 0120  
                                          __pbssBANK3 01CF                                            __pbssBANK4 0220  
                                    ?_TMR3_Initialize 0076                                       __CFG_VCAPEN$OFF 0000  
                                  __size_of_errorsISR 0019                          applicationControlRGB@strRedH 00BF  
                        applicationControlRGB@strRedL 00C2                        _BlueColorIntensityStringLength 01DE  
                                          __pmaintext 0B5B                                   _IntegerSwitchNumber 0134  
                                             ?___wmul 0020                                            __pintentry 0004  
                                             _CCP10IF 00A7                            sendAcknowledgment@Tx_count 0021  
                                             _CCP7CON 0616                                               _CCP9CON 061C  
                                             _CCPR10H 061E                                               _CCPR10L 061D  
                                             ?_memset 0020                                      ?_TMR4_Initialize 0076  
                                           ?___awtoft 0028                                             ?___ftpack 0020  
                                     ??_pinINIT_extra 0020                                               ?_strcat 0020  
                                             ?_strchr 0020                                               ?_strcmp 0020  
                                             ?_strcpy 0020                                               ?_strlen 0020  
                                           ?___lwtoft 0028                                               ?_strtok 002E  
                                             ?_strspn 0027                                      ?_CCP7_Initialize 0076  
                    _start_PWM_Generation_For_BlueLed 0148                                               _SP1BRGH 019C  
                                             _SP1BRGL 019B                                      ?_TMR5_Initialize 0076  
                     _GreenColorIntensityStringLength 01E2                       _start_PWM_Generation_For_RedLed 014C  
         applianceControl@currentStateBufferPositions 003E                                      ?_CCP8_Initialize 0076  
                    applianceControl@chDimmerSpeedLSB 0030                      applianceControl@chDimmerSpeedMSB 002F  
                                             _Timer1H 0146                                               _Timer1L 0144  
                                             _Timer3H 0142                                               _Timer3L 0140  
                                             _Timer5H 013E                                               _Timer5L 013C  
                     applicationControlRGB@GreenPulse 00AA                                               ___ftdiv 084F  
                                     __size_of___wmul 001C                                               ___ftmul 09AB  
                                             ___fttol 0779                              _sendFinalBufferToGAteway 0220  
                                             ___lwdiv 1629                                       __CFG_STVREN$OFF 0000  
                          _copymainReceivedDataBuffer 024E                                            ??___awtoft 002B  
                                          ??___ftpack 0025                                       __size_of_memset 001B  
                                    ?_TMR6_Initialize 0076                                            _errorsMain 1327  
                                             __ptext1 0804                                               __ptext2 152F  
                                             __ptext3 14FF                                               __ptext4 12BA  
                                             __ptext5 144C                                               __ptext6 1327  
                                             __ptext7 155F                                               __ptext8 017D  
                                             __ptext9 14A1                                            ??___lwtoft 002B  
                                     __size_of_strcat 0028                                       __size_of_strchr 001A  
                                     __size_of_strcmp 002A                                       __size_of_strcpy 001C  
                                     __size_of_strlen 001F                                     __end_of_hexpowers 1808  
                                           _T1CONbits 0018                                      ?_CCP9_Initialize 0076  
                                     __size_of_strtok 004B                                       __size_of_strspn 0030  
                                           _T2CONbits 001C                                          __size_of_abs 000F  
                                             _isdigit 120F                                          __size_of_isr 00FC  
                                           _T3CONbits 0413                                     __end_of_errorsISR 12BA  
                                           _T4CONbits 0417                                             _T5CONbits 041A  
                                           _T6CONbits 041E                               _RedColorIntensityBuffer 0158  
                       __size_of_hexadecimalToDecimal 0082                  sendAcknowledgment@currentStateBuffer 0023  
                    __end_of_SwitchOffStatustToGatway 15F6                             _IntergerRedColorIntensity 00ED  
                                             main@man 02DA                                               _sprintf 08F8  
                                             clrloop0 118E                                               _strcspn 14FF  
                                             _strncpy 14A1                                  end_of_initialization 0179  
                             _RedColorIntensityString 0061                                               init_ram 1193  
                            applicationControlRGB@end 00A4                                               memset@c 0020  
                                             memset@n 0022                                               memset@p 0025  
                                             initloop 1194                                 _applicationControlRGB 017D  
                                   _EUSART_Initialize 128B                              __end_of_applianceControl 0B5B  
                  applianceControl@integerSwitchState 0040                               _SwitchOnStatustToGatway 15F6  
                applicationControlRGB@SwitchNumberstr 004C                                    ?_EUSART_Initialize 0076  
          applicationControlRGB@BlueColorIntensitystr 0050                                               strcmp@r 0023  
                                             strlen@s 0020                                   ??_EUSART_Initialize 0020  
                                             strspn@i 002B                  applicationControlRGB@SwitchStatusstr 004D  
                                           _PORTBbits 000D                                             _PORTDbits 000F  
                                           _PORTEbits 0010                                             _PORTFbits 028C  
                                           _PORTGbits 028D                __end_of_ReceivingIndicationLedBlinking 123E  
             __size_of_ReceivingIndicationLedBlinking 0011                        _ReceivingIndicationLedBlinking 122D  
                              __size_of_clearAllPorts 0012                                             _TRISBbits 008D  
                                           _TRISCbits 008E                                             _TRISDbits 008F  
                                           _TRISEbits 0090                                             _TRISFbits 030C  
                                           _TRISGbits 030D                                     _levelofRedLed_LSB 016B  
                                   _levelofRedLed_MSB 016C                                            main@k_1118 02D8  
                                _IntergerSwitchStatus 0132               SwitchOffStatustToGatway@SwitchOffNumber 0020  
                            __end_of_CCP10_Initialize 11A3                             __end_of_EUSART_Initialize 12A1  
                                         ___ftdiv@exp 003C                     applicationControlRGB@ChildLockstr 0051  
            applianceControl@switchNumberStringBuffer 0038                            __end_of_sendAcknowledgment 1362  
                                         ___ftmul@exp 0032                           __end_of_GPIO_pin_Initialize 14A1  
                                      __end_of___wmul 130B                                _mainReceivedDataBuffer 02A0  
                               _sendAcknowledgmentRGB 1381                _ConvertIntegertoStringGreenColorBuffer 0138  
                                 _FinalframebitString 015E                                           ?_errorsMain 0020  
                                       _charchildLock 0067                                        __end_of_memset 12EF  
                                 _Finalframebitbuffer 01DC                                        __end_of_strcat 144C  
                                      __end_of_strchr 12D4                                        __end_of_strcmp 1476  
                                      __end_of_strcpy 1327                                        __end_of_strlen 1381  
  applicationControlRGB@ConvertIntToTimeInMicrosecRed 00E2                                        __end_of_strtok 084F  
                                      __end_of_strspn 155F                                   start_initialization 0102  
                                  _SwitchNumberBuffer 015A                                           __end_of_abs 122D  
                               applianceControl@F4004 0166                                 applianceControl@F4006 0164  
                                         __end_of_isr 0100                                    _SwitchNumberString 0063  
                          applicationControlRGB@start 00A2                                ?_applicationControlRGB 004C  
                           ??_SwitchOnStatustToGatway 0022                    applicationControlRGB@ModuleNamestr 00BE  
                               _AcknowledgementString 015F                             _GreenColorIntensityBuffer 0156  
                                       _clearAllPorts 124F                              __size_of_TMR1_Initialize 000B  
             copyReceivedDataBuffer@dataBufferCounter 0021                                              ??___wmul 0024  
                   __size_of_SwitchOffStatustToGatway 0033                             _GreenColorIntensityString 0060  
                           ?_SwitchOffStatustToGatway 0020                                           __pdataBANK0 0067  
                                         __pdataBANK2 0164                                           __pdataBANK3 01A0  
                                         __pdataBANK4 024E                                           __pdataBANK5 02A0  
                                         __pdataBANK6 0320                                           __pdataBANK7 03A0  
                                            ??_memset 0024           applicationControlRGB@GreenColorIntensitystr 004F  
                                            ??_strcat 0022                                              ??_strchr 0024  
                                            ??_strcmp 0022                                              ??_strcpy 0021  
                                            ??_strlen 0022                                              ??_strtok 0030  
                                            ??_strspn 0029                                     __size_of___awtoft 0022  
                                   __size_of___ftpack 0065                                      _mainDataReceived 0152  
                                         __pbssCOMMON 0070                                             ___latbits 0002  
                                   __size_of___lwtoft 0015                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00A0                                         __pcstackBANK5 02D2  
                            __size_of_TMR2_Initialize 000A                                     errorsISR@Tx_count 0078  
                                _mainReceivedDataFlag 0150                                          _isdigit$1395 0020  
                            ??_copyReceivedDataBuffer 0020                            __size_of_EUSART_Initialize 0016  
                                         sprintf@flag 0032                                           sprintf@prec 0037  
                                  errorsMain@Tx_count 0022                                   __size_of_errorsMain 001D  
                                      ?_clearAllPorts 0076                                      ___lwdiv@dividend 0022  
                                     errorsISR@errNum 0076                              __size_of_TMR3_Initialize 000C  
                                    errorsMain@errNum 0020                                              ?___ftdiv 002E  
                                            ?___ftmul 0028                                              ?___fttol 003E  
                              ?_sendAcknowledgmentRGB 0076                                              ?___lwdiv 0020  
                                     _ChildLockBuffer 0074                       __end_of_SwitchOnStatustToGatway 1629  
                                           __pswtext1 1000                                             __pswtext2 1010  
                                            _CCP10CON 061F                                      _IntegerChildLock 0130  
                                     _ChildLockString 005D                                              _BAUD1CON 019F  
                               __end_of_pinINIT_extra 1276                                              ?_isdigit 0076  
                                     _ChildLockbuffer 0160                         _AllColorIntensityStringLength 01E0  
                            __size_of_TMR4_Initialize 000B                                             _hexpowers 1800  
                 applianceControl@charFinalFrameState 0032                                      ___lwdiv@quotient 0026  
                           _tempRGBReceivedDataBuffer 0320                                              ?_sprintf 0028  
                                           _errorsISR 12A1                                              ?_strcspn 0027  
                                            ?_strncpy 0020                              __size_of_CCP7_Initialize 000A  
             applianceControl@dimmerSpeedStringBuffer 003A                                        ___wmul@product 0024  
                                           clear_ram0 118D                                           strncpy@from 0020  
                                            _PIE1bits 0091                                           strncpy@size 0021  
                                            _PIE3bits 0093                                              _PIE4bits 0094  
                   _start_PWM_Generation_For_GreenLed 014A                                    _SwitchStatusBuffer 0075  
                                   ?_applianceControl 002D                           hexadecimalToDecimal@dec_val 002C  
                                            _PIR1bits 0011                          __end_of_hexadecimalToDecimal 1800  
                                            _PIR3bits 0013                                              _PIR4bits 0014  
                            __size_of_TMR5_Initialize 000C                                    ??_applianceControl 0033  
                                  _SwitchStatusString 0062                              __size_of_CCP8_Initialize 000A  
                                   ??_TMR1_Initialize 0020                                 hexadecimalToDecimal@i 0030  
                                   ___wmul@multiplier 0020                     applicationControlRGB@NeedRedPulse 00B2  
               SwitchOnStatustToGatway@SwitchOnNumber 0020                   applicationControlRGB@NeedGreenPulse 00B6  
                       applianceControl@charSwitchLSB 002D                         applianceControl@charSwitchMSB 0037  
                            __size_of_TMR6_Initialize 000B                                            ?_errorsISR 0076  
                            __size_of_CCP9_Initialize 000A                       __size_of_copyReceivedDataBuffer 0032  
                                   ??_TMR2_Initialize 0020                                     ?_CCP10_Initialize 0076  
                                     ??_clearAllPorts 0020                      ??_ReceivingIndicationLedBlinking 0020  
                     ?_ReceivingIndicationLedBlinking 0076                           _mainDataReceiveStringLength 01E6  
                                  ??_CCP10_Initialize 0020                                      __size_of___ftdiv 00A9  
                                    __size_of___ftmul 00B4                                      __size_of___fttol 0087  
                                   _allPeripheralInit 13E1                                      __size_of___lwdiv 0035  
                                            ___awtoft 1402                                              ___ftpack 16A8  
                                        ??_errorsMain 0022                                    _sendAcknowledgment 1344  
                                   ??_TMR3_Initialize 0020                                              ___lwtoft 1276  
                                  ?_allPeripheralInit 0076                                            sprintf@idx 0033  
                                          sprintf@val 0035                                            strcat@from 0020  
                                    __size_of_isdigit 000F                                       ___lwdiv@divisor 0020  
                                 ?_sendAcknowledgment 0076                                       ___lwdiv@counter 0025  
                                            __ptext10 130B                                              __ptext11 1424  
                                            __ptext20 0779                                              __ptext12 08F8  
                                            __ptext21 09AB                                              __ptext13 1629  
                                            __ptext30 13E1                                              __ptext22 084F  
                                            __ptext14 1381                                              __ptext31 11E1  
                                            __ptext23 1402                                              __ptext15 12D4  
                                            __ptext40 11A3                                              __ptext32 1203  
                                            __ptext24 16A8                                              __ptext16 177E  
                                            __ptext41 1199                                              __ptext33 11D6  
                                            __ptext25 0A5F                                              __ptext17 1362  
                                            __ptext50 12A1                                              __ptext42 123E  
                                            __ptext34 11F7                                              __ptext26 1344  
                                            __ptext18 121E                                              __ptext43 15F6  
                                            __ptext35 11C1                                              __ptext27 170D  
                                            __ptext19 1276                                              __ptext44 15C3  
                                            __ptext36 11CB                                              __ptext28 120F  
                                            __ptext45 122D                                              __ptext37 128B  
                                            __ptext29 12EF                                              __ptext46 1476  
                                            __ptext38 11B7                                              __ptext47 1261  
                                            __ptext39 11AD                                              __ptext48 124F  
                                 ??_allPeripheralInit 0020                       applianceControl@charSwitchSTATE 002E  
     applicationControlRGB@Convert255RangeintoHundred 00DA                               ??_applicationControlRGB 0053  
                                    __size_of_sprintf 00B3                                      __size_of_strcspn 0030  
                                    __size_of_strncpy 002F                                            strcpy@from 0020  
                               main@dataBufferCounter 02D2                                           _partCounter 0136  
                                   ??_TMR4_Initialize 0020                                         __size_of_atoi 0071  
                                       __size_of_main 04A5                                    __end_of_errorsMain 1344  
                                   ??_CCP7_Initialize 0020                                    _currentStateBuffer 03A0  
                                          _RC1STAbits 019D                                  ??_sendAcknowledgment 0020  
                          hexadecimalToDecimal@hexVal 0032                             _IntegerBlueColorIntensity 0070  
                           __end_of_allPeripheralInit 1402                                              int$flags 007E  
                                            atoi@sign 002A                              _IntegerAllColorIntensity 01D4  
                              _copyReceivedDataBuffer 155F                        applicationControlRGB@BluePulse 00AE  
                                   ??_TMR5_Initialize 0020                                _tempReceivedDataBuffer 01A0  
                        __size_of_GPIO_pin_Initialize 002B                                     ??_CCP8_Initialize 0020  
                                  _levelofBlueLed_LSB 016D                                    _levelofBlueLed_MSB 016E  
                                  _switchNumberBuffer 01EA                                        __pstringtext10 0000  
                                            isdigit@c 0021                                  _hexadecimalToDecimal 177E  
                                            memset@p1 0026                                           ??_errorsISR 0078  
                                _mainDatacopyPosition 014E                                              intlevel1 0000  
                                           sprintf@ap 0034                                             sprintf@sp 0038  
                                           strchr@chr 0022                                             strchr@ptr 0020  
                                   ??_TMR6_Initialize 0020                                     __CFG_CLKOUTEN$OFF 0000  
                 applianceControl@integerSwitchNumber 003C                                             strcspn@s1 002D  
                                           strcspn@s2 0027                                     ??_CCP9_Initialize 0020  
                                           strncpy@cp 0024                               ??_sendAcknowledgmentRGB 0020  
                                           strncpy@to 0025                                    _parentalLockBuffer 02C0  
                                  _StopBitStringbufer 015C                                         __pstringtext1 1800  
                                       __pstringtext2 1819                                         __pstringtext3 1820  
                                       __pstringtext4 1825                                         __pstringtext5 182A  
                                       __pstringtext6 182F                                         __pstringtext7 1834  
                                       __pstringtext8 1838                                         __pstringtext9 183B  
                                            sprintf@c 0039                                              sprintf@f 0028  
                                            strcat@cp 0023                                              strcat@to 0024  
                                            strcmp@s1 0024                                              strcmp@s2 0020  
                                            strcpy@cp 0023                                              strlen@cp 0024  
                                            strcpy@to 0022                                              strcspn@i 002B  
                                       _StopBitString 015D                                 ?_hexadecimalToDecimal 0026  
                                            strtok@s1 0033                                              strtok@s2 002E  
                                            strspn@s1 002D                                              strspn@s2 0027  
                                            strtok@sp 005C                                            _TX1STAbits 019E  
                                _BlueLedSwitchCounter 01D6                              ?_SwitchOnStatustToGatway 0020  
                    _ConvertmaindataReceiveIntoString 0066                                   _levelofGreenLed_LSB 0169  
                                 _levelofGreenLed_MSB 016A                    applicationControlRGB@clockPerCycle 00DD  
                 applicationControlRGB@HexlevelBuffer 00D1                                       _TMR1_Initialize 11CB  
                            _SwitchOffStatustToGatway 15C3  
