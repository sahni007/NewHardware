

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 12 16:26:55 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1526
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	stringtext1,global,class=STRCODE,delta=2
    12                           	psect	stringtext2,global,class=STRCODE,delta=2
    13                           	psect	stringtext3,global,class=STRCODE,delta=2
    14                           	psect	stringtext4,global,class=STRCODE,delta=2
    15                           	psect	stringtext5,global,class=STRCODE,delta=2
    16                           	psect	stringtext6,global,class=STRCODE,delta=2
    17                           	psect	stringtext7,global,class=STRCODE,delta=2
    18                           	psect	stringtext8,global,class=STRCODE,delta=2
    19                           	psect	stringtext9,global,class=STRCODE,delta=2
    20                           	psect	stringtext10,global,class=STRCODE,delta=2
    21                           	psect	cinit,global,class=CODE,merge=1,delta=2
    22                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    29                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    30                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    31                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    32                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    33                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    34                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    35                           	psect	inittext,global,class=CODE,delta=2
    36                           	psect	clrtext,global,class=CODE,delta=2
    37                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    38                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    39                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    40                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    41                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    42                           	psect	swtext1,local,class=CONST,delta=2
    43                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text6,local,class=CODE,merge=1,delta=2
    49                           	psect	text7,local,class=CODE,merge=1,delta=2
    50                           	psect	text8,local,class=CODE,merge=1,delta=2
    51                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text12,local,class=CODE,merge=1,delta=2
    55                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text14,local,class=CODE,merge=1,delta=2
    57                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text16,local,class=CODE,merge=1,delta=2
    59                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text25,local,class=CODE,merge=1,delta=2
    68                           	psect	swtext2,local,class=CONST,delta=2
    69                           	psect	text26,local,class=CODE,merge=1,delta=2
    70                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text30,local,class=CODE,merge=1,delta=2
    74                           	psect	text31,local,class=CODE,merge=1,delta=2
    75                           	psect	text32,local,class=CODE,merge=1,delta=2
    76                           	psect	text33,local,class=CODE,merge=1,delta=2
    77                           	psect	text34,local,class=CODE,merge=1,delta=2
    78                           	psect	text35,local,class=CODE,merge=1,delta=2
    79                           	psect	text36,local,class=CODE,merge=1,delta=2
    80                           	psect	text37,local,class=CODE,merge=1,delta=2
    81                           	psect	text38,local,class=CODE,merge=1,delta=2
    82                           	psect	text39,local,class=CODE,merge=1,delta=2
    83                           	psect	text40,local,class=CODE,merge=1,delta=2
    84                           	psect	text41,local,class=CODE,merge=1,delta=2
    85                           	psect	text42,local,class=CODE,merge=1,delta=2
    86                           	psect	text43,local,class=CODE,merge=1,delta=2
    87                           	psect	text44,local,class=CODE,merge=1,delta=2
    88                           	psect	text45,local,class=CODE,merge=1,delta=2
    89                           	psect	text46,local,class=CODE,merge=1,delta=2
    90                           	psect	text47,local,class=CODE,merge=1,delta=2
    91                           	psect	intentry,global,class=CODE,delta=2
    92                           	psect	text49,local,class=CODE,merge=1,delta=2
    93                           	dabs	1,0x7E,2
    94  0000                     
    95                           ; Version 1.45
    96                           ; Generated 16/11/2017 GMT
    97                           ; 
    98                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution.
   112                           ; 
   113                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   114                           ;        software without specific prior written permission.
   115                           ; 
   116                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   117                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   118                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   119                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   120                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   121                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   122                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   123                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   124                           ; 
   125                           ; 
   126                           ; Code-generator required, PIC16F1526 Definitions
   127                           ; 
   128                           ; SFR Addresses
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  008F                     	;# 
   163  0090                     	;# 
   164  0091                     	;# 
   165  0092                     	;# 
   166  0093                     	;# 
   167  0094                     	;# 
   168  0095                     	;# 
   169  0096                     	;# 
   170  0097                     	;# 
   171  0099                     	;# 
   172  009A                     	;# 
   173  009B                     	;# 
   174  009B                     	;# 
   175  009C                     	;# 
   176  009D                     	;# 
   177  009E                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  0110                     	;# 
   183  0116                     	;# 
   184  0117                     	;# 
   185  011D                     	;# 
   186  018C                     	;# 
   187  018D                     	;# 
   188  018F                     	;# 
   189  0190                     	;# 
   190  0191                     	;# 
   191  0191                     	;# 
   192  0192                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0197                     	;# 
   199  0199                     	;# 
   200  0199                     	;# 
   201  0199                     	;# 
   202  019A                     	;# 
   203  019A                     	;# 
   204  019A                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019C                     	;# 
   211  019C                     	;# 
   212  019C                     	;# 
   213  019D                     	;# 
   214  019D                     	;# 
   215  019D                     	;# 
   216  019E                     	;# 
   217  019E                     	;# 
   218  019E                     	;# 
   219  019F                     	;# 
   220  019F                     	;# 
   221  019F                     	;# 
   222  020D                     	;# 
   223  020F                     	;# 
   224  0210                     	;# 
   225  0211                     	;# 
   226  0211                     	;# 
   227  0212                     	;# 
   228  0212                     	;# 
   229  0213                     	;# 
   230  0213                     	;# 
   231  0214                     	;# 
   232  0214                     	;# 
   233  0215                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0216                     	;# 
   237  0216                     	;# 
   238  0217                     	;# 
   239  0217                     	;# 
   240  0219                     	;# 
   241  021A                     	;# 
   242  021B                     	;# 
   243  021C                     	;# 
   244  021D                     	;# 
   245  021E                     	;# 
   246  021F                     	;# 
   247  028C                     	;# 
   248  028D                     	;# 
   249  0291                     	;# 
   250  0291                     	;# 
   251  0292                     	;# 
   252  0293                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  029D                     	;# 
   258  029E                     	;# 
   259  029F                     	;# 
   260  030C                     	;# 
   261  030D                     	;# 
   262  0311                     	;# 
   263  0311                     	;# 
   264  0312                     	;# 
   265  0313                     	;# 
   266  0318                     	;# 
   267  0318                     	;# 
   268  0319                     	;# 
   269  031A                     	;# 
   270  031C                     	;# 
   271  031C                     	;# 
   272  031D                     	;# 
   273  031E                     	;# 
   274  038C                     	;# 
   275  038D                     	;# 
   276  0394                     	;# 
   277  0395                     	;# 
   278  0396                     	;# 
   279  040C                     	;# 
   280  040D                     	;# 
   281  0411                     	;# 
   282  0411                     	;# 
   283  0412                     	;# 
   284  0413                     	;# 
   285  0414                     	;# 
   286  0415                     	;# 
   287  0416                     	;# 
   288  0417                     	;# 
   289  0418                     	;# 
   290  0418                     	;# 
   291  0419                     	;# 
   292  041A                     	;# 
   293  041B                     	;# 
   294  041C                     	;# 
   295  041D                     	;# 
   296  041E                     	;# 
   297  048D                     	;# 
   298  0491                     	;# 
   299  0491                     	;# 
   300  0492                     	;# 
   301  0492                     	;# 
   302  0493                     	;# 
   303  0493                     	;# 
   304  0493                     	;# 
   305  0494                     	;# 
   306  0494                     	;# 
   307  0495                     	;# 
   308  0495                     	;# 
   309  0496                     	;# 
   310  0496                     	;# 
   311  0497                     	;# 
   312  0497                     	;# 
   313  0595                     	;# 
   314  0596                     	;# 
   315  0597                     	;# 
   316  059C                     	;# 
   317  059D                     	;# 
   318  059E                     	;# 
   319  0611                     	;# 
   320  0611                     	;# 
   321  0612                     	;# 
   322  0613                     	;# 
   323  0614                     	;# 
   324  0614                     	;# 
   325  0615                     	;# 
   326  0616                     	;# 
   327  0617                     	;# 
   328  0617                     	;# 
   329  0618                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061A                     	;# 
   333  061B                     	;# 
   334  061C                     	;# 
   335  061D                     	;# 
   336  061D                     	;# 
   337  061E                     	;# 
   338  061F                     	;# 
   339  0FE4                     	;# 
   340  0FE5                     	;# 
   341  0FE6                     	;# 
   342  0FE7                     	;# 
   343  0FE8                     	;# 
   344  0FE9                     	;# 
   345  0FEA                     	;# 
   346  0FEB                     	;# 
   347  0FED                     	;# 
   348  0FEE                     	;# 
   349  0FEF                     	;# 
   350                           
   351                           	psect	idataBANK0
   352  07FF                     __pidataBANK0:	
   353                           
   354                           ;initializer for _charchildLock
   355  07FF  3430               	retlw	48
   356                           
   357                           	psect	idataBANK2
   358  11DA                     __pidataBANK2:	
   359                           
   360                           ;initializer for applianceControl@F4006
   361  11DA  3423               	retlw	35
   362  11DB  3400               	retlw	0
   363                           
   364                           ;initializer for applianceControl@F4004
   365  11DC  3423               	retlw	35
   366  11DD  3400               	retlw	0
   367                           
   368                           ;initializer for _charSwitchState
   369  11DE  3430               	retlw	48
   370                           
   371                           ;initializer for _levelofGreenLed_LSB
   372  11DF  3430               	retlw	48
   373                           
   374                           ;initializer for _levelofGreenLed_MSB
   375  11E0  3430               	retlw	48
   376                           
   377                           ;initializer for _levelofRedLed_LSB
   378  11E1  3430               	retlw	48
   379                           
   380                           ;initializer for _levelofRedLed_MSB
   381  11E2  3430               	retlw	48
   382                           
   383                           ;initializer for _levelofBlueLed_LSB
   384  11E3  3430               	retlw	48
   385                           
   386                           ;initializer for _levelofBlueLed_MSB
   387  11E4  3430               	retlw	48
   388                           
   389                           	psect	idataBANK3
   390  14BA                     __pidataBANK3:	
   391                           
   392                           ;initializer for _tempReceivedDataBuffer
   393  14BA  3423               	retlw	35
   394  14BB  3400               	retlw	0
   395  14BC  3400               	retlw	0
   396  14BD  3400               	retlw	0
   397  14BE  3400               	retlw	0
   398  14BF  3400               	retlw	0
   399  14C0  3400               	retlw	0
   400  14C1  3400               	retlw	0
   401  14C2  3400               	retlw	0
   402  14C3  3400               	retlw	0
   403  14C4  3400               	retlw	0
   404  14C5  3400               	retlw	0
   405  14C6  3400               	retlw	0
   406  14C7  3400               	retlw	0
   407  14C8  3400               	retlw	0
   408  14C9  3400               	retlw	0
   409  14CA  3400               	retlw	0
   410  14CB  3400               	retlw	0
   411  14CC  3400               	retlw	0
   412  14CD  3400               	retlw	0
   413  14CE  3400               	retlw	0
   414  14CF  3400               	retlw	0
   415  14D0  3400               	retlw	0
   416  14D1  3400               	retlw	0
   417                           
   418                           ;initializer for _copy_parentalLockBuffer
   419  14D2  3430               	retlw	48
   420  14D3  3400               	retlw	0
   421  14D4  3400               	retlw	0
   422  14D5  3400               	retlw	0
   423  14D6  3400               	retlw	0
   424  14D7  3400               	retlw	0
   425  14D8  3400               	retlw	0
   426  14D9  3400               	retlw	0
   427  14DA  3400               	retlw	0
   428  14DB  3400               	retlw	0
   429  14DC  3400               	retlw	0
   430  14DD  3400               	retlw	0
   431  14DE  3400               	retlw	0
   432  14DF  3400               	retlw	0
   433  14E0  3400               	retlw	0
   434  14E1  3400               	retlw	0
   435  14E2  3400               	retlw	0
   436  14E3  3400               	retlw	0
   437                           
   438                           ;initializer for _ErrorNames
   439  14E4  3423               	retlw	35
   440  14E5  3423               	retlw	35
   441  14E6  3423               	retlw	35
   442  14E7  3423               	retlw	35
   443  14E8  3400               	retlw	0
   444                           
   445                           	psect	idataBANK4
   446  13CD                     __pidataBANK4:	
   447                           
   448                           ;initializer for _copymainReceivedDataBuffer
   449  13CD  3423               	retlw	35
   450  13CE  3400               	retlw	0
   451  13CF  3400               	retlw	0
   452  13D0  3400               	retlw	0
   453  13D1  3400               	retlw	0
   454  13D2  3400               	retlw	0
   455  13D3  3400               	retlw	0
   456  13D4  3400               	retlw	0
   457  13D5  3400               	retlw	0
   458  13D6  3400               	retlw	0
   459  13D7  3400               	retlw	0
   460  13D8  3400               	retlw	0
   461  13D9  3400               	retlw	0
   462  13DA  3400               	retlw	0
   463  13DB  3400               	retlw	0
   464  13DC  3400               	retlw	0
   465  13DD  3400               	retlw	0
   466  13DE  3400               	retlw	0
   467  13DF  3400               	retlw	0
   468  13E0  3400               	retlw	0
   469  13E1  3400               	retlw	0
   470  13E2  3400               	retlw	0
   471  13E3  3400               	retlw	0
   472  13E4  3400               	retlw	0
   473  13E5  3400               	retlw	0
   474  13E6  3400               	retlw	0
   475  13E7  3400               	retlw	0
   476  13E8  3400               	retlw	0
   477  13E9  3400               	retlw	0
   478  13EA  3400               	retlw	0
   479  13EB  3400               	retlw	0
   480  13EC  3400               	retlw	0
   481                           
   482                           	psect	idataBANK5
   483  157B                     __pidataBANK5:	
   484                           
   485                           ;initializer for _mainReceivedDataBuffer
   486  157B  3423               	retlw	35
   487  157C  3400               	retlw	0
   488  157D  3400               	retlw	0
   489  157E  3400               	retlw	0
   490  157F  3400               	retlw	0
   491  1580  3400               	retlw	0
   492  1581  3400               	retlw	0
   493  1582  3400               	retlw	0
   494  1583  3400               	retlw	0
   495  1584  3400               	retlw	0
   496  1585  3400               	retlw	0
   497  1586  3400               	retlw	0
   498  1587  3400               	retlw	0
   499  1588  3400               	retlw	0
   500  1589  3400               	retlw	0
   501  158A  3400               	retlw	0
   502  158B  3400               	retlw	0
   503  158C  3400               	retlw	0
   504  158D  3400               	retlw	0
   505  158E  3400               	retlw	0
   506  158F  3400               	retlw	0
   507  1590  3400               	retlw	0
   508  1591  3400               	retlw	0
   509  1592  3400               	retlw	0
   510  1593  3400               	retlw	0
   511  1594  3400               	retlw	0
   512  1595  3400               	retlw	0
   513  1596  3400               	retlw	0
   514  1597  3400               	retlw	0
   515  1598  3400               	retlw	0
   516  1599  3400               	retlw	0
   517  159A  3400               	retlw	0
   518                           
   519                           ;initializer for _parentalLockBuffer
   520  159B  3430               	retlw	48
   521  159C  3400               	retlw	0
   522  159D  3400               	retlw	0
   523  159E  3400               	retlw	0
   524  159F  3400               	retlw	0
   525  15A0  3400               	retlw	0
   526  15A1  3400               	retlw	0
   527  15A2  3400               	retlw	0
   528  15A3  3400               	retlw	0
   529  15A4  3400               	retlw	0
   530  15A5  3400               	retlw	0
   531  15A6  3400               	retlw	0
   532  15A7  3400               	retlw	0
   533  15A8  3400               	retlw	0
   534  15A9  3400               	retlw	0
   535  15AA  3400               	retlw	0
   536  15AB  3400               	retlw	0
   537  15AC  3400               	retlw	0
   538                           
   539                           	psect	idataBANK6
   540  13AD                     __pidataBANK6:	
   541                           
   542                           ;initializer for _tempRGBReceivedDataBuffer
   543  13AD  3423               	retlw	35
   544  13AE  3400               	retlw	0
   545  13AF  3400               	retlw	0
   546  13B0  3400               	retlw	0
   547  13B1  3400               	retlw	0
   548  13B2  3400               	retlw	0
   549  13B3  3400               	retlw	0
   550  13B4  3400               	retlw	0
   551  13B5  3400               	retlw	0
   552  13B6  3400               	retlw	0
   553  13B7  3400               	retlw	0
   554  13B8  3400               	retlw	0
   555  13B9  3400               	retlw	0
   556  13BA  3400               	retlw	0
   557  13BB  3400               	retlw	0
   558  13BC  3400               	retlw	0
   559  13BD  3400               	retlw	0
   560  13BE  3400               	retlw	0
   561  13BF  3400               	retlw	0
   562  13C0  3400               	retlw	0
   563  13C1  3400               	retlw	0
   564  13C2  3400               	retlw	0
   565  13C3  3400               	retlw	0
   566  13C4  3400               	retlw	0
   567  13C5  3400               	retlw	0
   568  13C6  3400               	retlw	0
   569  13C7  3400               	retlw	0
   570  13C8  3400               	retlw	0
   571  13C9  3400               	retlw	0
   572  13CA  3400               	retlw	0
   573  13CB  3400               	retlw	0
   574  13CC  3400               	retlw	0
   575                           
   576                           	psect	idataBANK7
   577  1648                     __pidataBANK7:	
   578                           
   579                           ;initializer for _currentStateBuffer
   580  1648  3423               	retlw	35
   581  1649  3400               	retlw	0
   582  164A  3400               	retlw	0
   583  164B  3400               	retlw	0
   584  164C  3400               	retlw	0
   585  164D  3400               	retlw	0
   586  164E  3400               	retlw	0
   587  164F  3400               	retlw	0
   588  1650  3400               	retlw	0
   589  1651  3400               	retlw	0
   590  1652  3400               	retlw	0
   591  1653  3400               	retlw	0
   592  1654  3400               	retlw	0
   593  1655  3400               	retlw	0
   594  1656  3400               	retlw	0
   595  1657  3400               	retlw	0
   596  1658  3400               	retlw	0
   597  1659  3400               	retlw	0
   598  165A  3400               	retlw	0
   599  165B  3400               	retlw	0
   600  165C  3400               	retlw	0
   601  165D  3400               	retlw	0
   602  165E  3400               	retlw	0
   603  165F  3400               	retlw	0
   604  1660  3400               	retlw	0
   605  1661  3400               	retlw	0
   606  1662  3400               	retlw	0
   607  1663  3400               	retlw	0
   608  1664  3400               	retlw	0
   609  1665  3400               	retlw	0
   610  1666  3400               	retlw	0
   611  1667  3400               	retlw	0
   612  1668  3400               	retlw	0
   613  1669  3400               	retlw	0
   614  166A  3400               	retlw	0
   615  166B  3400               	retlw	0
   616  166C  3400               	retlw	0
   617  166D  3400               	retlw	0
   618  166E  3400               	retlw	0
   619  166F  3400               	retlw	0
   620  1670  3400               	retlw	0
   621  1671  3400               	retlw	0
   622  1672  3400               	retlw	0
   623  1673  3400               	retlw	0
   624  1674  3400               	retlw	0
   625  1675  3400               	retlw	0
   626  1676  3400               	retlw	0
   627  1677  3400               	retlw	0
   628  1678  3400               	retlw	0
   629  1679  3400               	retlw	0
   630  167A  3400               	retlw	0
   631  167B  3400               	retlw	0
   632  167C  3400               	retlw	0
   633  167D  3400               	retlw	0
   634  167E  3400               	retlw	0
   635  167F  3400               	retlw	0
   636  1680  3400               	retlw	0
   637  1681  3400               	retlw	0
   638  1682  3400               	retlw	0
   639  1683  3400               	retlw	0
   640  1684  3400               	retlw	0
   641  1685  3400               	retlw	0
   642  1686  3400               	retlw	0
   643  1687  3400               	retlw	0
   644  1688  3400               	retlw	0
   645  1689  3400               	retlw	0
   646  168A  3400               	retlw	0
   647  168B  3400               	retlw	0
   648  168C  3400               	retlw	0
   649  168D  3400               	retlw	0
   650  168E  3400               	retlw	0
   651  168F  3400               	retlw	0
   652  1690  3400               	retlw	0
   653  1691  3400               	retlw	0
   654                           
   655                           	psect	stringtext1
   656  1800                     __pstringtext1:	
   657  1800                     _hexpowers:	
   658  1800  3401               	retlw	1
   659  1801  3400               	retlw	0
   660  1802  3410               	retlw	16
   661  1803  3400               	retlw	0
   662  1804  3400               	retlw	0
   663  1805  3401               	retlw	1
   664  1806  3400               	retlw	0
   665  1807  3410               	retlw	16
   666  1808                     __end_of_hexpowers:	
   667  001A                     _TMR2	set	26
   668  001C                     _T2CON	set	28
   669  0019                     _T1GCON	set	25
   670  0018                     _T1CON	set	24
   671  000D                     _PORTBbits	set	13
   672  0016                     _TMR1L	set	22
   673  0017                     _TMR1H	set	23
   674  0014                     _PIR4bits	set	20
   675  0013                     _PIR3bits	set	19
   676  0018                     _T1CONbits	set	24
   677  0011                     _PIR1bits	set	17
   678  0010                     _PORTEbits	set	16
   679  001C                     _T2CONbits	set	28
   680  001B                     _PR2	set	27
   681  000F                     _PORTDbits	set	15
   682  005E                     _PEIE	set	94
   683  005F                     _GIE	set	95
   684  00A2                     _CCP7IF	set	162
   685  00A3                     _CCP8IF	set	163
   686  00A6                     _CCP9IF	set	166
   687  008D                     _RC1IF	set	141
   688  0094                     _PIE4bits	set	148
   689  008E                     _TRISCbits	set	142
   690  0090                     _TRISEbits	set	144
   691  008D                     _TRISBbits	set	141
   692  008F                     _TRISDbits	set	143
   693  0093                     _PIE3bits	set	147
   694  0091                     _PIE1bits	set	145
   695  018C                     _ANSELA	set	396
   696  018D                     _ANSELB	set	397
   697  018F                     _ANSELD	set	399
   698  0190                     _ANSELE	set	400
   699  019C                     _SP1BRGH	set	412
   700  019B                     _SP1BRGL	set	411
   701  019E                     _TX1STA	set	414
   702  019D                     _RC1STA	set	413
   703  019F                     _BAUD1CON	set	415
   704  0199                     _RC1REG	set	409
   705  019D                     _RC1STAbits	set	413
   706  019E                     _TX1STAbits	set	414
   707  019A                     _TX1REG	set	410
   708  020D                     _WPUB	set	525
   709  020F                     _WPUD	set	527
   710  0210                     _WPUE	set	528
   711  028C                     _PORTFbits	set	652
   712  028D                     _PORTGbits	set	653
   713  030C                     _TRISFbits	set	780
   714  030D                     _TRISGbits	set	781
   715  040C                     _ANSELF	set	1036
   716  040D                     _ANSELG	set	1037
   717  041C                     _TMR6	set	1052
   718  041E                     _T6CON	set	1054
   719  0415                     _TMR4	set	1045
   720  0417                     _T4CON	set	1047
   721  041B                     _T5GCON	set	1051
   722  041A                     _T5CON	set	1050
   723  0414                     _T3GCON	set	1044
   724  0413                     _T3CON	set	1043
   725  0418                     _TMR5L	set	1048
   726  0419                     _TMR5H	set	1049
   727  0411                     _TMR3L	set	1041
   728  0412                     _TMR3H	set	1042
   729  041A                     _T5CONbits	set	1050
   730  0413                     _T3CONbits	set	1043
   731  041E                     _T6CONbits	set	1054
   732  041D                     _PR6	set	1053
   733  0417                     _T4CONbits	set	1047
   734  0416                     _PR4	set	1046
   735  048D                     _WPUG	set	1165
   736  0617                     _CCPR8L	set	1559
   737  0618                     _CCPR8H	set	1560
   738  0614                     _CCPR7L	set	1556
   739  0615                     _CCPR7H	set	1557
   740  0616                     _CCP7CON	set	1558
   741  061A                     _CCPR9L	set	1562
   742  061B                     _CCPR9H	set	1563
   743  061C                     _CCP9CON	set	1564
   744  1808                     STR_20:	
   745  1808  3430               	retlw	48	;'0'
   746  1809  3431               	retlw	49	;'1'
   747  180A  3432               	retlw	50	;'2'
   748  180B  3433               	retlw	51	;'3'
   749  180C  3434               	retlw	52	;'4'
   750  180D  3435               	retlw	53	;'5'
   751  180E  3436               	retlw	54	;'6'
   752  180F  3437               	retlw	55	;'7'
   753  1810  3438               	retlw	56	;'8'
   754  1811  3439               	retlw	57	;'9'
   755  1812  3441               	retlw	65	;'A'
   756  1813  3442               	retlw	66	;'B'
   757  1814  3443               	retlw	67	;'C'
   758  1815  3444               	retlw	68	;'D'
   759  1816  3445               	retlw	69	;'E'
   760  1817  3446               	retlw	70	;'F'
   761  1818  3400               	retlw	0
   762                           
   763                           	psect	stringtext2
   764  1819                     __pstringtext2:	
   765  1819                     STR_3:	
   766  1819  3441               	retlw	65	;'A'
   767  181A  3443               	retlw	67	;'C'
   768  181B  3454               	retlw	84	;'T'
   769  181C  3441               	retlw	65	;'A'
   770  181D  3443               	retlw	67	;'C'
   771  181E  344B               	retlw	75	;'K'
   772  181F  3400               	retlw	0
   773                           
   774                           	psect	stringtext3
   775  1820                     __pstringtext3:	
   776  1820                     STR_19:	
   777  1820  3445               	retlw	69	;'E'
   778  1821  3452               	retlw	82	;'R'
   779  1822  344C               	retlw	76	;'L'
   780  1823  3453               	retlw	83	;'S'
   781  1824  3400               	retlw	0
   782                           
   783                           	psect	stringtext4
   784  1825                     __pstringtext4:	
   785  1825                     STR_14:	
   786  1825  3445               	retlw	69	;'E'
   787  1826  3452               	retlw	82	;'R'
   788  1827  344F               	retlw	79	;'O'
   789  1828  3456               	retlw	86	;'V'
   790  1829  3400               	retlw	0
   791                           
   792                           	psect	stringtext5
   793  182A                     __pstringtext5:	
   794  182A                     STR_15:	
   795  182A  3445               	retlw	69	;'E'
   796  182B  3452               	retlw	82	;'R'
   797  182C  3452               	retlw	82	;'R'
   798  182D  3458               	retlw	88	;'X'
   799  182E  3400               	retlw	0
   800                           
   801                           	psect	stringtext6
   802  182F                     __pstringtext6:	
   803  182F                     STR_10:	
   804  182F  3431               	retlw	49	;'1'
   805  1830  3430               	retlw	48	;'0'
   806  1831  3430               	retlw	48	;'0'
   807  1832  347C               	retlw	124	;'|'
   808  1833  3400               	retlw	0
   809                           
   810                           	psect	stringtext7
   811  1834                     __pstringtext7:	
   812  1834                     STR_17:	
   813  1834  3452               	retlw	82	;'R'
   814  1835  3447               	retlw	71	;'G'
   815  1836  3442               	retlw	66	;'B'
   816  1837  3400               	retlw	0
   817                           
   818                           	psect	stringtext8
   819  1838                     __pstringtext8:	
   820  1838                     STR_11:	
   821  1838  3425               	retlw	37	;'%'
   822  1839  3458               	retlw	88	;'X'
   823  183A  3400               	retlw	0
   824                           
   825                           	psect	stringtext9
   826  183B                     __pstringtext9:	
   827  183B                     STR_1:	
   828  183B  342E               	retlw	46	;'.'
   829  183C  3400               	retlw	0
   830                           
   831                           	psect	stringtext10
   832  0000                     __pstringtext10:	
   833  183B                     
   834                           ; #config settings
   835  0000                     
   836                           	psect	cinit
   837  0102                     start_initialization:	
   838  0102                     __initialization:	
   839                           
   840                           ; Initialize objects allocated to BANK0
   841  0102  3187  27FF  3181   	fcall	__pidataBANK0	;fetch initializer
   842  0105  00E7               	movwf	__pdataBANK0& (0+127)
   843                           
   844                           ; Initialize objects allocated to BANK2
   845  0106  30DA               	movlw	low __pidataBANK2
   846  0107  0084               	movwf	4
   847  0108  3091               	movlw	(high __pidataBANK2)| (0+128)
   848  0109  0085               	movwf	5
   849  010A  3064               	movlw	low __pdataBANK2
   850  010B  0086               	movwf	6
   851  010C  3001               	movlw	high __pdataBANK2
   852  010D  0087               	movwf	7
   853  010E  300B               	movlw	11
   854  010F  3191  218B  3181   	fcall	init_ram
   855                           
   856                           ; Initialize objects allocated to BANK3
   857  0112  30BA               	movlw	low __pidataBANK3
   858  0113  0084               	movwf	4
   859  0114  3094               	movlw	(high __pidataBANK3)| (0+128)
   860  0115  0085               	movwf	5
   861  0116  30A0               	movlw	low __pdataBANK3
   862  0117  0086               	movwf	6
   863  0118  3001               	movlw	high __pdataBANK3
   864  0119  0087               	movwf	7
   865  011A  302F               	movlw	47
   866  011B  3191  218B  3181   	fcall	init_ram
   867                           
   868                           ; Initialize objects allocated to BANK4
   869  011E  30CD               	movlw	low __pidataBANK4
   870  011F  0084               	movwf	4
   871  0120  3093               	movlw	(high __pidataBANK4)| (0+128)
   872  0121  0085               	movwf	5
   873  0122  304E               	movlw	low __pdataBANK4
   874  0123  0086               	movwf	6
   875  0124  3002               	movlw	high __pdataBANK4
   876  0125  0087               	movwf	7
   877  0126  3020               	movlw	32
   878  0127  3191  218B  3181   	fcall	init_ram
   879                           
   880                           ; Initialize objects allocated to BANK5
   881  012A  307B               	movlw	low __pidataBANK5
   882  012B  0084               	movwf	4
   883  012C  3095               	movlw	(high __pidataBANK5)| (0+128)
   884  012D  0085               	movwf	5
   885  012E  30A0               	movlw	low __pdataBANK5
   886  012F  0086               	movwf	6
   887  0130  3002               	movlw	high __pdataBANK5
   888  0131  0087               	movwf	7
   889  0132  3032               	movlw	50
   890  0133  3191  218B  3181   	fcall	init_ram
   891                           
   892                           ; Initialize objects allocated to BANK6
   893  0136  30AD               	movlw	low __pidataBANK6
   894  0137  0084               	movwf	4
   895  0138  3093               	movlw	(high __pidataBANK6)| (0+128)
   896  0139  0085               	movwf	5
   897  013A  3020               	movlw	low __pdataBANK6
   898  013B  0086               	movwf	6
   899  013C  3003               	movlw	high __pdataBANK6
   900  013D  0087               	movwf	7
   901  013E  3020               	movlw	32
   902  013F  3191  218B  3181   	fcall	init_ram
   903                           
   904                           ; Initialize objects allocated to BANK7
   905  0142  3048               	movlw	low __pidataBANK7
   906  0143  0084               	movwf	4
   907  0144  3096               	movlw	(high __pidataBANK7)| (0+128)
   908  0145  0085               	movwf	5
   909  0146  30A0               	movlw	low __pdataBANK7
   910  0147  0086               	movwf	6
   911  0148  3003               	movlw	high __pdataBANK7
   912  0149  0087               	movwf	7
   913  014A  304A               	movlw	74
   914  014B  3191  218B  3181   	fcall	init_ram
   915                           
   916                           ; Clear objects allocated to COMMON
   917  014E  01F0               	clrf	__pbssCOMMON& (0+127)
   918  014F  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   919  0150  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   920  0151  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   921  0152  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   922  0153  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   923                           
   924                           ; Clear objects allocated to BANK0
   925  0154  305C               	movlw	low __pbssBANK0
   926  0155  0084               	movwf	4
   927  0156  3000               	movlw	high __pbssBANK0
   928  0157  0085               	movwf	5
   929  0158  300B               	movlw	11
   930  0159  3191  2185  3181   	fcall	clear_ram0
   931                           
   932                           ; Clear objects allocated to BANK1
   933  015C  0021               	movlb	1	; select bank1
   934  015D  01EB               	clrf	__pbssBANK1& (0+127)
   935  015E  01EC               	clrf	(__pbssBANK1+1)& (0+127)
   936  015F  01ED               	clrf	(__pbssBANK1+2)& (0+127)
   937  0160  01EE               	clrf	(__pbssBANK1+3)& (0+127)
   938  0161  01EF               	clrf	(__pbssBANK1+4)& (0+127)
   939                           
   940                           ; Clear objects allocated to BANK2
   941  0162  3020               	movlw	low __pbssBANK2
   942  0163  0084               	movwf	4
   943  0164  3001               	movlw	high __pbssBANK2
   944  0165  0085               	movwf	5
   945  0166  3044               	movlw	68
   946  0167  3191  2185  3181   	fcall	clear_ram0
   947                           
   948                           ; Clear objects allocated to BANK3
   949  016A  30CF               	movlw	low __pbssBANK3
   950  016B  0084               	movwf	4
   951  016C  3001               	movlw	high __pbssBANK3
   952  016D  0085               	movwf	5
   953  016E  301E               	movlw	30
   954  016F  3191  2185  3181   	fcall	clear_ram0
   955                           
   956                           ; Clear objects allocated to BANK4
   957  0172  3020               	movlw	low __pbssBANK4
   958  0173  0084               	movwf	4
   959  0174  3002               	movlw	high __pbssBANK4
   960  0175  0085               	movwf	5
   961  0176  302E               	movlw	46
   962  0177  3191  2185         	fcall	clear_ram0
   963  0179                     end_of_initialization:	
   964                           ;End of C runtime variable initialization code
   965                           
   966  0179                     __end_of__initialization:	
   967  0179  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   968  017A  0020               	movlb	0
   969  017B  318B  2B5B         	ljmp	_main	;jump to C main() function
   970                           
   971                           	psect	bssCOMMON
   972  0070                     __pbssCOMMON:	
   973  0070                     _IntegerBlueColorIntensity:	
   974  0070                     	ds	2
   975  0072                     _mainReceivedDataPosition:	
   976  0072                     	ds	2
   977  0074                     _ChildLockBuffer:	
   978  0074                     	ds	1
   979  0075                     _SwitchStatusBuffer:	
   980  0075                     	ds	1
   981                           
   982                           	psect	bssBANK0
   983  005C                     __pbssBANK0:	
   984  005C                     strtok@sp:	
   985  005C                     	ds	1
   986  005D                     _ChildLockString:	
   987  005D                     	ds	1
   988  005E                     _AllColorIntensityString:	
   989  005E                     	ds	1
   990  005F                     _BlueColorIntensityString:	
   991  005F                     	ds	1
   992  0060                     _GreenColorIntensityString:	
   993  0060                     	ds	1
   994  0061                     _RedColorIntensityString:	
   995  0061                     	ds	1
   996  0062                     _SwitchStatusString:	
   997  0062                     	ds	1
   998  0063                     _SwitchNumberString:	
   999  0063                     	ds	1
  1000  0064                     _ModuleNameString:	
  1001  0064                     	ds	1
  1002  0065                     _token:	
  1003  0065                     	ds	1
  1004  0066                     _ConvertmaindataReceiveIntoString:	
  1005  0066                     	ds	1
  1006                           
  1007                           	psect	dataBANK0
  1008  0067                     __pdataBANK0:	
  1009  0067                     _charchildLock:	
  1010  0067                     	ds	1
  1011                           
  1012                           	psect	bssBANK1
  1013  00EB                     __pbssBANK1:	
  1014  00EB                     _IntegerGreenColorIntensity:	
  1015  00EB                     	ds	2
  1016  00ED                     _IntergerRedColorIntensity:	
  1017  00ED                     	ds	2
  1018  00EF                     _FinalFramebitBuffer:	
  1019  00EF                     	ds	1
  1020                           
  1021                           	psect	bssBANK2
  1022  0120                     __pbssBANK2:	
  1023  0120                     _M8:	
  1024  0120                     	ds	2
  1025  0122                     _M7:	
  1026  0122                     	ds	2
  1027  0124                     _M6:	
  1028  0124                     	ds	2
  1029  0126                     _M5:	
  1030  0126                     	ds	2
  1031  0128                     _M4:	
  1032  0128                     	ds	2
  1033  012A                     _M3:	
  1034  012A                     	ds	2
  1035  012C                     _M2:	
  1036  012C                     	ds	2
  1037  012E                     _M1:	
  1038  012E                     	ds	2
  1039  0130                     _IntegerChildLock:	
  1040  0130                     	ds	2
  1041  0132                     _IntergerSwitchStatus:	
  1042  0132                     	ds	2
  1043  0134                     _IntegerSwitchNumber:	
  1044  0134                     	ds	2
  1045  0136                     _partCounter:	
  1046  0136                     	ds	2
  1047  0138                     _ConvertIntegertoStringGreenColorBuffer:	
  1048  0138                     	ds	2
  1049  013A                     _ConvertIntegertoStringRedColorBuffer:	
  1050  013A                     	ds	2
  1051  013C                     _Timer5L:	
  1052  013C                     	ds	2
  1053  013E                     _Timer5H:	
  1054  013E                     	ds	2
  1055  0140                     _Timer3L:	
  1056  0140                     	ds	2
  1057  0142                     _Timer3H:	
  1058  0142                     	ds	2
  1059  0144                     _Timer1L:	
  1060  0144                     	ds	2
  1061  0146                     _Timer1H:	
  1062  0146                     	ds	2
  1063  0148                     _start_PWM_Generation_For_BlueLed:	
  1064  0148                     	ds	2
  1065  014A                     _start_PWM_Generation_For_GreenLed:	
  1066  014A                     	ds	2
  1067  014C                     _start_PWM_Generation_For_RedLed:	
  1068  014C                     	ds	2
  1069  014E                     _mainDatacopyPosition:	
  1070  014E                     	ds	2
  1071  0150                     _mainReceivedDataFlag:	
  1072  0150                     	ds	2
  1073  0152                     _mainDataReceived:	
  1074  0152                     	ds	2
  1075  0154                     _BlueColorIntensityBuffer:	
  1076  0154                     	ds	2
  1077  0156                     _GreenColorIntensityBuffer:	
  1078  0156                     	ds	2
  1079  0158                     _RedColorIntensityBuffer:	
  1080  0158                     	ds	2
  1081  015A                     _SwitchNumberBuffer:	
  1082  015A                     	ds	2
  1083  015C                     _StopBitStringbufer:	
  1084  015C                     	ds	1
  1085  015D                     _StopBitString:	
  1086  015D                     	ds	1
  1087  015E                     _FinalframebitString:	
  1088  015E                     	ds	1
  1089  015F                     _AcknowledgementString:	
  1090  015F                     	ds	1
  1091  0160                     _ChildLockbuffer:	
  1092  0160                     	ds	2
  1093  0162                     _switchstatusbuffer:	
  1094  0162                     	ds	2
  1095                           
  1096                           	psect	dataBANK2
  1097  0164                     __pdataBANK2:	
  1098  0164                     applianceControl@F4006:	
  1099  0164                     	ds	2
  1100  0166                     applianceControl@F4004:	
  1101  0166                     	ds	2
  1102  0168                     _charSwitchState:	
  1103  0168                     	ds	1
  1104  0169                     _levelofGreenLed_LSB:	
  1105  0169                     	ds	1
  1106  016A                     _levelofGreenLed_MSB:	
  1107  016A                     	ds	1
  1108  016B                     _levelofRedLed_LSB:	
  1109  016B                     	ds	1
  1110  016C                     _levelofRedLed_MSB:	
  1111  016C                     	ds	1
  1112  016D                     _levelofBlueLed_LSB:	
  1113  016D                     	ds	1
  1114  016E                     _levelofBlueLed_MSB:	
  1115  016E                     	ds	1
  1116                           
  1117                           	psect	bssBANK3
  1118  01CF                     __pbssBANK3:	
  1119  01CF                     _ModuleNameBuffer:	
  1120  01CF                     	ds	3
  1121  01D2                     _M9:	
  1122  01D2                     	ds	2
  1123  01D4                     _IntegerAllColorIntensity:	
  1124  01D4                     	ds	2
  1125  01D6                     _BlueLedSwitchCounter:	
  1126  01D6                     	ds	2
  1127  01D8                     _GreenLedSwitchCounter:	
  1128  01D8                     	ds	2
  1129  01DA                     _RedLedSwitchCounter:	
  1130  01DA                     	ds	2
  1131  01DC                     _Finalframebitbuffer:	
  1132  01DC                     	ds	2
  1133  01DE                     _BlueColorIntensityStringLength:	
  1134  01DE                     	ds	2
  1135  01E0                     _AllColorIntensityStringLength:	
  1136  01E0                     	ds	2
  1137  01E2                     _GreenColorIntensityStringLength:	
  1138  01E2                     	ds	2
  1139  01E4                     _RedColorIntensityStringLength:	
  1140  01E4                     	ds	2
  1141  01E6                     _mainDataReceiveStringLength:	
  1142  01E6                     	ds	2
  1143  01E8                     _ConvertIntegertoStringBlueColorBuffer:	
  1144  01E8                     	ds	2
  1145  01EA                     _switchNumberBuffer:	
  1146  01EA                     	ds	3
  1147                           
  1148                           	psect	dataBANK3
  1149  01A0                     __pdataBANK3:	
  1150  01A0                     _tempReceivedDataBuffer:	
  1151  01A0                     	ds	24
  1152  01B8                     _copy_parentalLockBuffer:	
  1153  01B8                     	ds	18
  1154  01CA                     _ErrorNames:	
  1155  01CA                     	ds	5
  1156                           
  1157                           	psect	bssBANK4
  1158  0220                     __pbssBANK4:	
  1159  0220                     _sendFinalBufferToGAteway:	
  1160  0220                     	ds	46
  1161                           
  1162                           	psect	dataBANK4
  1163  024E                     __pdataBANK4:	
  1164  024E                     _copymainReceivedDataBuffer:	
  1165  024E                     	ds	32
  1166                           
  1167                           	psect	dataBANK5
  1168  02A0                     __pdataBANK5:	
  1169  02A0                     _mainReceivedDataBuffer:	
  1170  02A0                     	ds	32
  1171  02C0                     _parentalLockBuffer:	
  1172  02C0                     	ds	18
  1173                           
  1174                           	psect	dataBANK6
  1175  0320                     __pdataBANK6:	
  1176  0320                     _tempRGBReceivedDataBuffer:	
  1177  0320                     	ds	32
  1178                           
  1179                           	psect	dataBANK7
  1180  03A0                     __pdataBANK7:	
  1181  03A0                     _currentStateBuffer:	
  1182  03A0                     	ds	74
  1183                           
  1184                           	psect	inittext
  1185  118B                     init_ram:	
  1186  118B  00FE               	movwf	126
  1187  118C                     initloop:	
  1188  118C  0012               	moviw fsr0++
  1189  118D  001E               	movwi fsr1++
  1190  118E  0BFE               	decfsz	126,f
  1191  118F  298C               	goto	initloop
  1192  1190  3400               	retlw	0
  1193                           
  1194                           	psect	clrtext
  1195  1185                     clear_ram0:	
  1196                           ;	Called with FSR0 containing the base address, and
  1197                           ;	WREG with the size to clear
  1198                           
  1199  1185  0064               	clrwdt	;clear the watchdog before getting into this loop
  1200  1186                     clrloop0:	
  1201  1186  0180               	clrf	0	;clear RAM location pointed to by FSR
  1202  1187  3101               	addfsr 0,1
  1203  1188  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1204  1189  2986               	goto	clrloop0	;have we reached the end yet?
  1205  118A  3400               	retlw	0	;all done for this memory range, return
  1206                           
  1207                           	psect	cstackBANK5
  1208  02D2                     __pcstackBANK5:	
  1209  02D2                     main@dataBufferCounter:	
  1210                           
  1211                           ; 2 bytes @ 0x0
  1212  02D2                     	ds	2
  1213  02D4                     main@j:	
  1214                           
  1215                           ; 2 bytes @ 0x2
  1216  02D4                     	ds	2
  1217  02D6                     main@k:	
  1218                           
  1219                           ; 2 bytes @ 0x4
  1220  02D6                     	ds	2
  1221  02D8                     main@k_1111:	
  1222                           
  1223                           ; 2 bytes @ 0x6
  1224  02D8                     	ds	2
  1225  02DA                     main@man:	
  1226                           
  1227                           ; 2 bytes @ 0x8
  1228  02DA                     	ds	2
  1229                           
  1230                           	psect	cstackBANK1
  1231  00A0                     __pcstackBANK1:	
  1232  00A0                     applicationControlRGB@remainder:	
  1233                           
  1234                           ; 2 bytes @ 0x0
  1235  00A0                     	ds	2
  1236  00A2                     applicationControlRGB@start:	
  1237                           
  1238                           ; 2 bytes @ 0x2
  1239  00A2                     	ds	2
  1240  00A4                     applicationControlRGB@end:	
  1241                           
  1242                           ; 2 bytes @ 0x4
  1243  00A4                     	ds	2
  1244  00A6                     applicationControlRGB@RedPulse:	
  1245                           
  1246                           ; 4 bytes @ 0x6
  1247  00A6                     	ds	4
  1248  00AA                     applicationControlRGB@GreenPulse:	
  1249                           
  1250                           ; 4 bytes @ 0xA
  1251  00AA                     	ds	4
  1252  00AE                     applicationControlRGB@BluePulse:	
  1253                           
  1254                           ; 4 bytes @ 0xE
  1255  00AE                     	ds	4
  1256  00B2                     applicationControlRGB@NeedRedPulse:	
  1257                           
  1258                           ; 4 bytes @ 0x12
  1259  00B2                     	ds	4
  1260  00B6                     applicationControlRGB@NeedGreenPulse:	
  1261                           
  1262                           ; 4 bytes @ 0x16
  1263  00B6                     	ds	4
  1264  00BA                     applicationControlRGB@NeedBluePulse:	
  1265                           
  1266                           ; 4 bytes @ 0x1A
  1267  00BA                     	ds	4
  1268  00BE                     applicationControlRGB@ModuleNamestr:	
  1269                           
  1270                           ; 1 bytes @ 0x1E
  1271  00BE                     	ds	1
  1272  00BF                     applicationControlRGB@strRedH:	
  1273                           
  1274                           ; 3 bytes @ 0x1F
  1275  00BF                     	ds	3
  1276  00C2                     applicationControlRGB@strRedL:	
  1277                           
  1278                           ; 3 bytes @ 0x22
  1279  00C2                     	ds	3
  1280  00C5                     applicationControlRGB@strGreenH:	
  1281                           
  1282                           ; 3 bytes @ 0x25
  1283  00C5                     	ds	3
  1284  00C8                     applicationControlRGB@strGreenL:	
  1285                           
  1286                           ; 3 bytes @ 0x28
  1287  00C8                     	ds	3
  1288  00CB                     applicationControlRGB@strBlueH:	
  1289                           
  1290                           ; 3 bytes @ 0x2B
  1291  00CB                     	ds	3
  1292  00CE                     applicationControlRGB@strBlueL:	
  1293                           
  1294                           ; 3 bytes @ 0x2E
  1295  00CE                     	ds	3
  1296  00D1                     applicationControlRGB@HexlevelBuffer:	
  1297                           
  1298                           ; 5 bytes @ 0x31
  1299  00D1                     	ds	5
  1300  00D6                     applicationControlRGB@CompleteClock:	
  1301                           
  1302                           ; 4 bytes @ 0x36
  1303  00D6                     	ds	4
  1304  00DA                     applicationControlRGB@Convert255RangeintoHundred:	
  1305                           
  1306                           ; 3 bytes @ 0x3A
  1307  00DA                     	ds	3
  1308  00DD                     applicationControlRGB@clockPerCycle:	
  1309                           
  1310                           ; 3 bytes @ 0x3D
  1311  00DD                     	ds	3
  1312  00E0                     applicationControlRGB@ConvertIntoTenMsRangeFactor:	
  1313                           
  1314                           ; 2 bytes @ 0x40
  1315  00E0                     	ds	2
  1316  00E2                     applicationControlRGB@ConvertIntToTimeInMicrosecRed:	
  1317                           
  1318                           ; 3 bytes @ 0x42
  1319  00E2                     	ds	3
  1320  00E5                     applicationControlRGB@ConvertIntToTimeInMicrosecGreen:	
  1321                           
  1322                           ; 3 bytes @ 0x45
  1323  00E5                     	ds	3
  1324  00E8                     applicationControlRGB@ConvertIntToTimeInMicrosecBlue:	
  1325                           
  1326                           ; 3 bytes @ 0x48
  1327  00E8                     	ds	3
  1328                           
  1329                           	psect	cstackCOMMON
  1330  0076                     __pcstackCOMMON:	
  1331  0076                     ?_isdigit:	
  1332  0076                     ?_sendAcknowledgmentRGB:	
  1333                           ; 1 bit 
  1334                           
  1335  0076                     ?_sendAcknowledgment:	
  1336                           ; 1 bytes @ 0x0
  1337                           
  1338  0076                     ?_errorsISR:	
  1339                           ; 1 bytes @ 0x0
  1340                           
  1341  0076                     ?_GPIO_pin_Initialize:	
  1342                           ; 1 bytes @ 0x0
  1343                           
  1344  0076                     ?_allPeripheralInit:	
  1345                           ; 1 bytes @ 0x0
  1346                           
  1347  0076                     ?_ReceivingIndicationLedBlinking:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0076                     ?_copyReceivedDataBuffer:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0076                     ?_TransmissionIndicationLedBlinking:	
  1354                           ; 1 bytes @ 0x0
  1355                           
  1356  0076                     ?_clearAllPorts:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0076                     ?_pinINIT_extra:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0076                     ?_EUSART_Initialize:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365  0076                     ?_TMR1_Initialize:	
  1366                           ; 1 bytes @ 0x0
  1367                           
  1368  0076                     ?_TMR2_Initialize:	
  1369                           ; 1 bytes @ 0x0
  1370                           
  1371  0076                     ?_TMR3_Initialize:	
  1372                           ; 1 bytes @ 0x0
  1373                           
  1374  0076                     ?_TMR4_Initialize:	
  1375                           ; 1 bytes @ 0x0
  1376                           
  1377  0076                     ?_TMR5_Initialize:	
  1378                           ; 1 bytes @ 0x0
  1379                           
  1380  0076                     ?_TMR6_Initialize:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383  0076                     ?_CCP9_Initialize:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386  0076                     ?_CCP8_Initialize:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389  0076                     ?_CCP7_Initialize:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  0076                     ?_isr:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  0076                     ?_main:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398  0076                     errorsISR@errNum:	
  1399                           ; 2 bytes @ 0x0
  1400                           
  1401                           
  1402                           ; 2 bytes @ 0x0
  1403  0076                     	ds	2
  1404  0078                     ??_errorsISR:	
  1405  0078                     errorsISR@Tx_count:	
  1406                           ; 1 bytes @ 0x2
  1407                           
  1408                           
  1409                           ; 2 bytes @ 0x2
  1410  0078                     	ds	2
  1411  007A                     ??_isr:	
  1412                           
  1413                           ; 1 bytes @ 0x4
  1414  007A                     	ds	2
  1415                           
  1416                           	psect	cstackBANK0
  1417  0020                     __pcstackBANK0:	
  1418  0020                     ?_strcpy:	
  1419  0020                     ?_strcat:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0020                     ??_sendAcknowledgmentRGB:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0020                     ?_strncpy:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0020                     ?_memset:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0020                     ??_sendAcknowledgment:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0020                     ??_GPIO_pin_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0020                     ??_allPeripheralInit:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0020                     ??_ReceivingIndicationLedBlinking:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0020                     ??_copyReceivedDataBuffer:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0020                     ?_errorsMain:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0020                     ?_SwitchOnStatustToGatway:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0020                     ??_TransmissionIndicationLedBlinking:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0020                     ?_SwitchOffStatustToGatway:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0020                     ??_clearAllPorts:	
  1459                           ; 1 bytes @ 0x0
  1460                           
  1461  0020                     ??_pinINIT_extra:	
  1462                           ; 1 bytes @ 0x0
  1463                           
  1464  0020                     ??_EUSART_Initialize:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0020                     ??_TMR1_Initialize:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0020                     ??_TMR2_Initialize:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0020                     ??_TMR3_Initialize:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0020                     ??_TMR4_Initialize:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0020                     ??_TMR5_Initialize:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0020                     ??_TMR6_Initialize:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0020                     ??_CCP9_Initialize:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0020                     ??_CCP8_Initialize:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0020                     ??_CCP7_Initialize:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0020                     ??_isdigit:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0020                     ?_strlen:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0020                     ?_abs:	
  1501                           ; 2 bytes @ 0x0
  1502                           
  1503  0020                     ?_strcmp:	
  1504                           ; 2 bytes @ 0x0
  1505                           
  1506  0020                     ?_strchr:	
  1507                           ; 2 bytes @ 0x0
  1508                           
  1509  0020                     ?___wmul:	
  1510                           ; 2 bytes @ 0x0
  1511                           
  1512  0020                     ?___lwdiv:	
  1513                           ; 2 bytes @ 0x0
  1514                           
  1515  0020                     ?___ftpack:	
  1516                           ; 2 bytes @ 0x0
  1517                           
  1518  0020                     _isdigit$1387:	
  1519                           ; 3 bytes @ 0x0
  1520                           
  1521  0020                     strcpy@from:	
  1522                           ; 1 bytes @ 0x0
  1523                           
  1524  0020                     strncpy@from:	
  1525                           ; 1 bytes @ 0x0
  1526                           
  1527  0020                     errorsMain@errNum:	
  1528                           ; 1 bytes @ 0x0
  1529                           
  1530  0020                     SwitchOffStatustToGatway@SwitchOffNumber:	
  1531                           ; 2 bytes @ 0x0
  1532                           
  1533  0020                     SwitchOnStatustToGatway@SwitchOnNumber:	
  1534                           ; 2 bytes @ 0x0
  1535                           
  1536  0020                     ___wmul@multiplier:	
  1537                           ; 2 bytes @ 0x0
  1538                           
  1539  0020                     abs@a:	
  1540                           ; 2 bytes @ 0x0
  1541                           
  1542  0020                     ___lwdiv@divisor:	
  1543                           ; 2 bytes @ 0x0
  1544                           
  1545  0020                     memset@c:	
  1546                           ; 2 bytes @ 0x0
  1547                           
  1548  0020                     strcat@from:	
  1549                           ; 2 bytes @ 0x0
  1550                           
  1551  0020                     strcmp@s2:	
  1552                           ; 2 bytes @ 0x0
  1553                           
  1554  0020                     strlen@s:	
  1555                           ; 2 bytes @ 0x0
  1556                           
  1557  0020                     strchr@ptr:	
  1558                           ; 2 bytes @ 0x0
  1559                           
  1560  0020                     ___ftpack@arg:	
  1561                           ; 2 bytes @ 0x0
  1562                           
  1563                           
  1564                           ; 3 bytes @ 0x0
  1565  0020                     	ds	1
  1566  0021                     ??_strcpy:	
  1567  0021                     isdigit@c:	
  1568                           ; 1 bytes @ 0x1
  1569                           
  1570  0021                     sendAcknowledgment@Tx_count:	
  1571                           ; 1 bytes @ 0x1
  1572                           
  1573  0021                     sendAcknowledgmentRGB@Tx_count:	
  1574                           ; 2 bytes @ 0x1
  1575                           
  1576  0021                     copyReceivedDataBuffer@dataBufferCounter:	
  1577                           ; 2 bytes @ 0x1
  1578                           
  1579  0021                     strncpy@size:	
  1580                           ; 2 bytes @ 0x1
  1581                           
  1582                           
  1583                           ; 2 bytes @ 0x1
  1584  0021                     	ds	1
  1585  0022                     ??_strcat:	
  1586  0022                     ??_strlen:	
  1587                           ; 1 bytes @ 0x2
  1588                           
  1589  0022                     ??_abs:	
  1590                           ; 1 bytes @ 0x2
  1591                           
  1592  0022                     ??_strcmp:	
  1593                           ; 1 bytes @ 0x2
  1594                           
  1595  0022                     ??_errorsMain:	
  1596                           ; 1 bytes @ 0x2
  1597                           
  1598  0022                     ??_SwitchOnStatustToGatway:	
  1599                           ; 1 bytes @ 0x2
  1600                           
  1601  0022                     ??_SwitchOffStatustToGatway:	
  1602                           ; 1 bytes @ 0x2
  1603                           
  1604  0022                     strcpy@to:	
  1605                           ; 1 bytes @ 0x2
  1606                           
  1607  0022                     errorsMain@Tx_count:	
  1608                           ; 1 bytes @ 0x2
  1609                           
  1610  0022                     ___wmul@multiplicand:	
  1611                           ; 2 bytes @ 0x2
  1612                           
  1613  0022                     ___lwdiv@dividend:	
  1614                           ; 2 bytes @ 0x2
  1615                           
  1616  0022                     memset@n:	
  1617                           ; 2 bytes @ 0x2
  1618                           
  1619  0022                     strchr@chr:	
  1620                           ; 2 bytes @ 0x2
  1621                           
  1622                           
  1623                           ; 2 bytes @ 0x2
  1624  0022                     	ds	1
  1625  0023                     ??_strncpy:	
  1626  0023                     sendAcknowledgment@currentStateBuffer:	
  1627                           ; 1 bytes @ 0x3
  1628                           
  1629  0023                     sendAcknowledgmentRGB@currentStateBufferRGB:	
  1630                           ; 1 bytes @ 0x3
  1631                           
  1632  0023                     ___ftpack@exp:	
  1633                           ; 1 bytes @ 0x3
  1634                           
  1635  0023                     strcat@cp:	
  1636                           ; 1 bytes @ 0x3
  1637                           
  1638  0023                     strcmp@r:	
  1639                           ; 1 bytes @ 0x3
  1640                           
  1641  0023                     strcpy@cp:	
  1642                           ; 1 bytes @ 0x3
  1643                           
  1644                           
  1645                           ; 1 bytes @ 0x3
  1646  0023                     	ds	1
  1647  0024                     ??_memset:	
  1648  0024                     ??_strchr:	
  1649                           ; 1 bytes @ 0x4
  1650                           
  1651  0024                     ??___wmul:	
  1652                           ; 1 bytes @ 0x4
  1653                           
  1654  0024                     ??___lwdiv:	
  1655                           ; 1 bytes @ 0x4
  1656                           
  1657  0024                     ___ftpack@sign:	
  1658                           ; 1 bytes @ 0x4
  1659                           
  1660  0024                     strcat@to:	
  1661                           ; 1 bytes @ 0x4
  1662                           
  1663  0024                     strcmp@s1:	
  1664                           ; 1 bytes @ 0x4
  1665                           
  1666  0024                     strncpy@cp:	
  1667                           ; 1 bytes @ 0x4
  1668                           
  1669  0024                     ___wmul@product:	
  1670                           ; 1 bytes @ 0x4
  1671                           
  1672  0024                     strlen@cp:	
  1673                           ; 2 bytes @ 0x4
  1674                           
  1675                           
  1676                           ; 2 bytes @ 0x4
  1677  0024                     	ds	1
  1678  0025                     ??___ftpack:	
  1679  0025                     ___lwdiv@counter:	
  1680                           ; 1 bytes @ 0x5
  1681                           
  1682  0025                     memset@p:	
  1683                           ; 1 bytes @ 0x5
  1684                           
  1685  0025                     strncpy@to:	
  1686                           ; 1 bytes @ 0x5
  1687                           
  1688                           
  1689                           ; 1 bytes @ 0x5
  1690  0025                     	ds	1
  1691  0026                     ?_atoi:	
  1692  0026                     ?_hexadecimalToDecimal:	
  1693                           ; 2 bytes @ 0x6
  1694                           
  1695  0026                     memset@p1:	
  1696                           ; 2 bytes @ 0x6
  1697                           
  1698  0026                     atoi@s:	
  1699                           ; 1 bytes @ 0x6
  1700                           
  1701  0026                     ___lwdiv@quotient:	
  1702                           ; 2 bytes @ 0x6
  1703                           
  1704                           
  1705                           ; 2 bytes @ 0x6
  1706  0026                     	ds	1
  1707  0027                     ?_strspn:	
  1708  0027                     ?_strcspn:	
  1709                           ; 2 bytes @ 0x7
  1710                           
  1711  0027                     strcspn@s2:	
  1712                           ; 2 bytes @ 0x7
  1713                           
  1714  0027                     strspn@s2:	
  1715                           ; 2 bytes @ 0x7
  1716                           
  1717                           
  1718                           ; 2 bytes @ 0x7
  1719  0027                     	ds	1
  1720  0028                     ??_atoi:	
  1721  0028                     ??_hexadecimalToDecimal:	
  1722                           ; 1 bytes @ 0x8
  1723                           
  1724  0028                     ?_sprintf:	
  1725                           ; 1 bytes @ 0x8
  1726                           
  1727  0028                     ?___awtoft:	
  1728                           ; 2 bytes @ 0x8
  1729                           
  1730  0028                     ?___ftmul:	
  1731                           ; 3 bytes @ 0x8
  1732                           
  1733  0028                     ?___lwtoft:	
  1734                           ; 3 bytes @ 0x8
  1735                           
  1736  0028                     sprintf@f:	
  1737                           ; 3 bytes @ 0x8
  1738                           
  1739  0028                     ___awtoft@c:	
  1740                           ; 2 bytes @ 0x8
  1741                           
  1742  0028                     ___lwtoft@c:	
  1743                           ; 2 bytes @ 0x8
  1744                           
  1745  0028                     ___ftmul@f1:	
  1746                           ; 2 bytes @ 0x8
  1747                           
  1748                           
  1749                           ; 3 bytes @ 0x8
  1750  0028                     	ds	1
  1751  0029                     ??_strspn:	
  1752  0029                     ??_strcspn:	
  1753                           ; 1 bytes @ 0x9
  1754                           
  1755                           
  1756                           ; 1 bytes @ 0x9
  1757  0029                     	ds	1
  1758  002A                     atoi@sign:	
  1759  002A                     hexadecimalToDecimal@len:	
  1760                           ; 1 bytes @ 0xA
  1761                           
  1762                           
  1763                           ; 2 bytes @ 0xA
  1764  002A                     	ds	1
  1765  002B                     ??___awtoft:	
  1766  002B                     ??___lwtoft:	
  1767                           ; 1 bytes @ 0xB
  1768                           
  1769  002B                     atoi@a:	
  1770                           ; 1 bytes @ 0xB
  1771                           
  1772  002B                     strcspn@i:	
  1773                           ; 2 bytes @ 0xB
  1774                           
  1775  002B                     strspn@i:	
  1776                           ; 2 bytes @ 0xB
  1777                           
  1778  002B                     ___ftmul@f2:	
  1779                           ; 2 bytes @ 0xB
  1780                           
  1781                           
  1782                           ; 3 bytes @ 0xB
  1783  002B                     	ds	1
  1784  002C                     hexadecimalToDecimal@dec_val:	
  1785                           
  1786                           ; 2 bytes @ 0xC
  1787  002C                     	ds	1
  1788  002D                     ?_applianceControl:	
  1789  002D                     applianceControl@charSwitchLSB:	
  1790                           ; 1 bytes @ 0xD
  1791                           
  1792  002D                     ___awtoft@sign:	
  1793                           ; 1 bytes @ 0xD
  1794                           
  1795  002D                     strcspn@s1:	
  1796                           ; 1 bytes @ 0xD
  1797                           
  1798  002D                     strspn@s1:	
  1799                           ; 1 bytes @ 0xD
  1800                           
  1801                           
  1802                           ; 1 bytes @ 0xD
  1803  002D                     	ds	1
  1804  002E                     ??_sprintf:	
  1805  002E                     ?_strtok:	
  1806                           ; 1 bytes @ 0xE
  1807                           
  1808  002E                     ??___ftmul:	
  1809                           ; 1 bytes @ 0xE
  1810                           
  1811  002E                     ?___ftdiv:	
  1812                           ; 1 bytes @ 0xE
  1813                           
  1814  002E                     applianceControl@charSwitchSTATE:	
  1815                           ; 3 bytes @ 0xE
  1816                           
  1817  002E                     hexadecimalToDecimal@base:	
  1818                           ; 1 bytes @ 0xE
  1819                           
  1820  002E                     strtok@s2:	
  1821                           ; 2 bytes @ 0xE
  1822                           
  1823  002E                     ___ftdiv@f2:	
  1824                           ; 2 bytes @ 0xE
  1825                           
  1826                           
  1827                           ; 3 bytes @ 0xE
  1828  002E                     	ds	1
  1829  002F                     applianceControl@chDimmerSpeedMSB:	
  1830                           
  1831                           ; 1 bytes @ 0xF
  1832  002F                     	ds	1
  1833  0030                     ??_strtok:	
  1834  0030                     applianceControl@chDimmerSpeedLSB:	
  1835                           ; 1 bytes @ 0x10
  1836                           
  1837  0030                     hexadecimalToDecimal@i:	
  1838                           ; 1 bytes @ 0x10
  1839                           
  1840                           
  1841                           ; 2 bytes @ 0x10
  1842  0030                     	ds	1
  1843  0031                     applianceControl@charParentalControl:	
  1844  0031                     ___ftdiv@f1:	
  1845                           ; 1 bytes @ 0x11
  1846                           
  1847                           
  1848                           ; 3 bytes @ 0x11
  1849  0031                     	ds	1
  1850  0032                     applianceControl@charFinalFrameState:	
  1851  0032                     hexadecimalToDecimal@hexVal:	
  1852                           ; 1 bytes @ 0x12
  1853                           
  1854  0032                     sprintf@flag:	
  1855                           ; 1 bytes @ 0x12
  1856                           
  1857  0032                     ___ftmul@exp:	
  1858                           ; 1 bytes @ 0x12
  1859                           
  1860                           
  1861                           ; 1 bytes @ 0x12
  1862  0032                     	ds	1
  1863  0033                     ??_applianceControl:	
  1864  0033                     sprintf@idx:	
  1865                           ; 1 bytes @ 0x13
  1866                           
  1867  0033                     strtok@s1:	
  1868                           ; 1 bytes @ 0x13
  1869                           
  1870  0033                     ___ftmul@f3_as_product:	
  1871                           ; 1 bytes @ 0x13
  1872                           
  1873                           
  1874                           ; 3 bytes @ 0x13
  1875  0033                     	ds	1
  1876  0034                     ??___ftdiv:	
  1877  0034                     sprintf@ap:	
  1878                           ; 1 bytes @ 0x14
  1879                           
  1880                           
  1881                           ; 1 bytes @ 0x14
  1882  0034                     	ds	1
  1883  0035                     applianceControl@integerSpeed:	
  1884  0035                     sprintf@val:	
  1885                           ; 2 bytes @ 0x15
  1886                           
  1887                           
  1888                           ; 2 bytes @ 0x15
  1889  0035                     	ds	1
  1890  0036                     ___ftmul@cntr:	
  1891                           
  1892                           ; 1 bytes @ 0x16
  1893  0036                     	ds	1
  1894  0037                     applianceControl@charSwitchMSB:	
  1895  0037                     sprintf@prec:	
  1896                           ; 1 bytes @ 0x17
  1897                           
  1898  0037                     ___ftmul@sign:	
  1899                           ; 1 bytes @ 0x17
  1900                           
  1901                           
  1902                           ; 1 bytes @ 0x17
  1903  0037                     	ds	1
  1904  0038                     sprintf@sp:	
  1905  0038                     ___ftdiv@cntr:	
  1906                           ; 1 bytes @ 0x18
  1907                           
  1908  0038                     applianceControl@switchNumberStringBuffer:	
  1909                           ; 1 bytes @ 0x18
  1910                           
  1911                           
  1912                           ; 2 bytes @ 0x18
  1913  0038                     	ds	1
  1914  0039                     sprintf@c:	
  1915  0039                     ___ftdiv@f3:	
  1916                           ; 1 bytes @ 0x19
  1917                           
  1918                           
  1919                           ; 3 bytes @ 0x19
  1920  0039                     	ds	1
  1921  003A                     applianceControl@dimmerSpeedStringBuffer:	
  1922                           
  1923                           ; 2 bytes @ 0x1A
  1924  003A                     	ds	2
  1925  003C                     ___ftdiv@exp:	
  1926  003C                     applianceControl@integerSwitchNumber:	
  1927                           ; 1 bytes @ 0x1C
  1928                           
  1929                           
  1930                           ; 2 bytes @ 0x1C
  1931  003C                     	ds	1
  1932  003D                     ___ftdiv@sign:	
  1933                           
  1934                           ; 1 bytes @ 0x1D
  1935  003D                     	ds	1
  1936  003E                     ?___fttol:	
  1937  003E                     applianceControl@currentStateBufferPositions:	
  1938                           ; 4 bytes @ 0x1E
  1939                           
  1940  003E                     ___fttol@f1:	
  1941                           ; 2 bytes @ 0x1E
  1942                           
  1943                           
  1944                           ; 3 bytes @ 0x1E
  1945  003E                     	ds	2
  1946  0040                     applianceControl@integerSwitchState:	
  1947                           
  1948                           ; 2 bytes @ 0x20
  1949  0040                     	ds	2
  1950  0042                     ??___fttol:	
  1951                           
  1952                           ; 1 bytes @ 0x22
  1953  0042                     	ds	4
  1954  0046                     ___fttol@sign1:	
  1955                           
  1956                           ; 1 bytes @ 0x26
  1957  0046                     	ds	1
  1958  0047                     ___fttol@lval:	
  1959                           
  1960                           ; 4 bytes @ 0x27
  1961  0047                     	ds	4
  1962  004B                     ___fttol@exp1:	
  1963                           
  1964                           ; 1 bytes @ 0x2B
  1965  004B                     	ds	1
  1966  004C                     ?_applicationControlRGB:	
  1967  004C                     applicationControlRGB@SwitchNumberstr:	
  1968                           ; 1 bytes @ 0x2C
  1969                           
  1970                           
  1971                           ; 1 bytes @ 0x2C
  1972  004C                     	ds	1
  1973  004D                     applicationControlRGB@SwitchStatusstr:	
  1974                           
  1975                           ; 1 bytes @ 0x2D
  1976  004D                     	ds	1
  1977  004E                     applicationControlRGB@RedColorIntensitystr:	
  1978                           
  1979                           ; 1 bytes @ 0x2E
  1980  004E                     	ds	1
  1981  004F                     applicationControlRGB@GreenColorIntensitystr:	
  1982                           
  1983                           ; 1 bytes @ 0x2F
  1984  004F                     	ds	1
  1985  0050                     applicationControlRGB@BlueColorIntensitystr:	
  1986                           
  1987                           ; 1 bytes @ 0x30
  1988  0050                     	ds	1
  1989  0051                     applicationControlRGB@ChildLockstr:	
  1990                           
  1991                           ; 1 bytes @ 0x31
  1992  0051                     	ds	1
  1993  0052                     applicationControlRGB@Allcolorstr:	
  1994                           
  1995                           ; 1 bytes @ 0x32
  1996  0052                     	ds	1
  1997  0053                     ??_applicationControlRGB:	
  1998                           
  1999                           ; 1 bytes @ 0x33
  2000  0053                     	ds	2
  2001  0055                     ??_main:	
  2002                           
  2003                           ; 1 bytes @ 0x35
  2004  0055                     	ds	7
  2005                           
  2006                           	psect	maintext
  2007  0B5B                     __pmaintext:	
  2008 ;;
  2009 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  2010 ;;
  2011 ;; *************** function _main *****************
  2012 ;; Defined at:
  2013 ;;		line 481 in file "main.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;		None
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;  k               2    6[BANK5 ] int 
  2018 ;;  k               2    4[BANK5 ] int 
  2019 ;;  j               2    2[BANK5 ] int 
  2020 ;;  dataBufferCo    2    0[BANK5 ] int 
  2021 ;;  man             2    8[BANK5 ] int 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  2  480[None  ] int 
  2024 ;; Registers used:
  2025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : B1F/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2032 ;;      Locals:         0       0       0       0       0       0      10       0       0       0       0
  2033 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0
  2034 ;;      Totals:         0       7       0       0       0       0      10       0       0       0       0
  2035 ;;Total ram usage:       17 bytes
  2036 ;; Hardware stack levels required when called:    5
  2037 ;; This function calls:
  2038 ;;		_GPIO_pin_Initialize
  2039 ;;		_ReceivingIndicationLedBlinking
  2040 ;;		_SwitchOffStatustToGatway
  2041 ;;		_SwitchOnStatustToGatway
  2042 ;;		_TransmissionIndicationLedBlinking
  2043 ;;		_allPeripheralInit
  2044 ;;		_applianceControl
  2045 ;;		_applicationControlRGB
  2046 ;;		_copyReceivedDataBuffer
  2047 ;;		_errorsMain
  2048 ;;		_strcmp
  2049 ;;		_strlen
  2050 ;;		_strtok
  2051 ;; This function is called by:
  2052 ;;		Startup code after reset
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           
  2057                           ;psect for function _main
  2058  0B5B                     _main:	
  2059                           
  2060                           ;main.c: 482: _delay((unsigned long)((2000)*(16000000/4000.0)));
  2061                           
  2062                           ;incstack = 0
  2063                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2064  0B5B  3029               	movlw	41
  2065  0B5C  0020               	movlb	0	; select bank0
  2066  0B5D  00D6               	movwf	??_main+1
  2067  0B5E  3096               	movlw	150
  2068  0B5F  00D5               	movwf	??_main
  2069  0B60  307F               	movlw	127
  2070  0B61                     u6467:	
  2071  0B61  0B89               	decfsz	9,f
  2072  0B62  2B61               	goto	u6467
  2073  0B63  0BD5               	decfsz	??_main,f
  2074  0B64  2B61               	goto	u6467
  2075  0B65  0BD6               	decfsz	??_main+1,f
  2076  0B66  2B61               	goto	u6467
  2077                           
  2078                           ;main.c: 483: M1=0; M2=0; M3=0; M4=0; M5=0; M6=0; M7=0;M8=0;
  2079  0B67  0022               	movlb	2	; select bank2
  2080  0B68  01AE               	clrf	_M1^(0+256)
  2081  0B69  01AF               	clrf	(_M1+1)^(0+256)
  2082  0B6A  01AC               	clrf	_M2^(0+256)
  2083  0B6B  01AD               	clrf	(_M2+1)^(0+256)
  2084  0B6C  01AA               	clrf	_M3^(0+256)
  2085  0B6D  01AB               	clrf	(_M3+1)^(0+256)
  2086  0B6E  01A8               	clrf	_M4^(0+256)
  2087  0B6F  01A9               	clrf	(_M4+1)^(0+256)
  2088  0B70  01A6               	clrf	_M5^(0+256)
  2089  0B71  01A7               	clrf	(_M5+1)^(0+256)
  2090  0B72  01A4               	clrf	_M6^(0+256)
  2091  0B73  01A5               	clrf	(_M6+1)^(0+256)
  2092  0B74  01A2               	clrf	_M7^(0+256)
  2093  0B75  01A3               	clrf	(_M7+1)^(0+256)
  2094  0B76  01A0               	clrf	_M8^(0+256)
  2095  0B77  01A1               	clrf	(_M8+1)^(0+256)
  2096                           
  2097                           ;main.c: 484: M9=0;
  2098  0B78  0023               	movlb	3	; select bank3
  2099  0B79  01D2               	clrf	_M9^(0+384)
  2100  0B7A  01D3               	clrf	(_M9+1)^(0+384)
  2101                           
  2102                           ;main.c: 485: GPIO_pin_Initialize();
  2103  0B7B  3194  2437  318B   	fcall	_GPIO_pin_Initialize
  2104                           
  2105                           ;main.c: 486: allPeripheralInit();
  2106  0B7E  3193  2332  318B   	fcall	_allPeripheralInit
  2107  0B81                     l5727:	
  2108                           ;main.c: 488: while(1){
  2109                           
  2110                           
  2111                           ;main.c: 489: if(mainDataReceived==1){
  2112  0B81  0022               	movlb	2	; select bank2
  2113  0B82  0352               	decf	_mainDataReceived^(0+256),w
  2114  0B83  0453               	iorwf	(_mainDataReceived+1)^(0+256),w
  2115  0B84  1D03               	btfss	3,2
  2116  0B85  2DA6               	goto	l5861
  2117                           
  2118                           ;main.c: 491: mainDataReceived=0;
  2119  0B86  01D2               	clrf	_mainDataReceived^(0+256)
  2120  0B87  01D3               	clrf	(_mainDataReceived+1)^(0+256)
  2121                           
  2122                           ;main.c: 492: if(copymainReceivedDataBuffer[0]=='%' && copymainReceivedDataBuffer[1]=='%
      +                          ' && copymainReceivedDataBuffer[14]=='@' && copymainReceivedDataBuffer[15]=='@'){
  2123  0B88  3025               	movlw	37
  2124  0B89  0024               	movlb	4	; select bank4
  2125  0B8A  064E               	xorwf	_copymainReceivedDataBuffer^(0+512),w
  2126  0B8B  1D03               	btfss	3,2
  2127  0B8C  2BC9               	goto	l5745
  2128  0B8D  3025               	movlw	37
  2129  0B8E  064F               	xorwf	(_copymainReceivedDataBuffer^(0+512)+1),w
  2130  0B8F  1D03               	btfss	3,2
  2131  0B90  2BC9               	goto	l5745
  2132  0B91  3040               	movlw	64
  2133  0B92  065C               	xorwf	(_copymainReceivedDataBuffer^(0+512)+14),w
  2134  0B93  1D03               	btfss	3,2
  2135  0B94  2BC9               	goto	l5745
  2136  0B95  3040               	movlw	64
  2137  0B96  065D               	xorwf	(_copymainReceivedDataBuffer^(0+512)+15),w
  2138  0B97  1D03               	btfss	3,2
  2139  0B98  2BC9               	goto	l5745
  2140                           
  2141                           ;main.c: 493: ReceivingIndicationLedBlinking();
  2142  0B99  3192  221B  318B   	fcall	_ReceivingIndicationLedBlinking
  2143                           
  2144                           ;main.c: 494: copyReceivedDataBuffer();
  2145  0B9C  3195  2549  318B   	fcall	_copyReceivedDataBuffer
  2146                           
  2147                           ;main.c: 496: applianceControl(tempReceivedDataBuffer[0],
  2148                           ;main.c: 497: tempReceivedDataBuffer[1],
  2149                           ;main.c: 498: tempReceivedDataBuffer[2],
  2150                           ;main.c: 499: tempReceivedDataBuffer[3],
  2151                           ;main.c: 500: tempReceivedDataBuffer[4],
  2152                           ;main.c: 501: tempReceivedDataBuffer[5],
  2153                           ;main.c: 502: tempReceivedDataBuffer[6]);
  2154  0B9F  0023               	movlb	3	; select bank3
  2155  0BA0  0821               	movf	(_tempReceivedDataBuffer^(0+384)+1),w
  2156  0BA1  0020               	movlb	0	; select bank0
  2157  0BA2  00D5               	movwf	??_main
  2158  0BA3  0855               	movf	??_main,w
  2159  0BA4  00AD               	movwf	applianceControl@charSwitchLSB
  2160  0BA5  0023               	movlb	3	; select bank3
  2161  0BA6  0822               	movf	(_tempReceivedDataBuffer^(0+384)+2),w
  2162  0BA7  0020               	movlb	0	; select bank0
  2163  0BA8  00D6               	movwf	??_main+1
  2164  0BA9  0856               	movf	??_main+1,w
  2165  0BAA  00AE               	movwf	applianceControl@charSwitchSTATE
  2166  0BAB  0023               	movlb	3	; select bank3
  2167  0BAC  0823               	movf	(_tempReceivedDataBuffer^(0+384)+3),w
  2168  0BAD  0020               	movlb	0	; select bank0
  2169  0BAE  00D7               	movwf	??_main+2
  2170  0BAF  0857               	movf	??_main+2,w
  2171  0BB0  00AF               	movwf	applianceControl@chDimmerSpeedMSB
  2172  0BB1  0023               	movlb	3	; select bank3
  2173  0BB2  0824               	movf	(_tempReceivedDataBuffer^(0+384)+4),w
  2174  0BB3  0020               	movlb	0	; select bank0
  2175  0BB4  00D8               	movwf	??_main+3
  2176  0BB5  0858               	movf	??_main+3,w
  2177  0BB6  00B0               	movwf	applianceControl@chDimmerSpeedLSB
  2178  0BB7  0023               	movlb	3	; select bank3
  2179  0BB8  0825               	movf	(_tempReceivedDataBuffer^(0+384)+5),w
  2180  0BB9  0020               	movlb	0	; select bank0
  2181  0BBA  00D9               	movwf	??_main+4
  2182  0BBB  0859               	movf	??_main+4,w
  2183  0BBC  00B1               	movwf	applianceControl@charParentalControl
  2184  0BBD  0023               	movlb	3	; select bank3
  2185  0BBE  0826               	movf	(_tempReceivedDataBuffer^(0+384)+6),w
  2186  0BBF  0020               	movlb	0	; select bank0
  2187  0BC0  00DA               	movwf	??_main+5
  2188  0BC1  085A               	movf	??_main+5,w
  2189  0BC2  00B2               	movwf	applianceControl@charFinalFrameState
  2190  0BC3  0023               	movlb	3	; select bank3
  2191  0BC4  0820               	movf	_tempReceivedDataBuffer^(0+384),w
  2192  0BC5  318A  225F  318B   	fcall	_applianceControl
  2193                           
  2194                           ;main.c: 504: }
  2195  0BC8  2DA6               	goto	l5861
  2196  0BC9                     l5745:	
  2197                           
  2198                           ;main.c: 505: else if(copymainReceivedDataBuffer[0]=='R' && copymainReceivedDataBuffer[1
      +                          ]=='G' && copymainReceivedDataBuffer[2]=='B'){
  2199  0BC9  3052               	movlw	82
  2200  0BCA  0024               	movlb	4	; select bank4
  2201  0BCB  064E               	xorwf	_copymainReceivedDataBuffer^(0+512),w
  2202  0BCC  1D03               	btfss	3,2
  2203  0BCD  2D6A               	goto	l5843
  2204  0BCE  3047               	movlw	71
  2205  0BCF  064F               	xorwf	(_copymainReceivedDataBuffer^(0+512)+1),w
  2206  0BD0  1D03               	btfss	3,2
  2207  0BD1  2D6A               	goto	l5843
  2208  0BD2  3042               	movlw	66
  2209  0BD3  0650               	xorwf	(_copymainReceivedDataBuffer^(0+512)+2),w
  2210  0BD4  1D03               	btfss	3,2
  2211  0BD5  2D6A               	goto	l5843
  2212                           
  2213                           ;main.c: 506: ReceivingIndicationLedBlinking();
  2214  0BD6  3192  221B  318B   	fcall	_ReceivingIndicationLedBlinking
  2215                           
  2216                           ;main.c: 512: ConvertmaindataReceiveIntoString = copymainReceivedDataBuffer;
  2217  0BD9  304E               	movlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
  2218  0BDA  0020               	movlb	0	; select bank0
  2219  0BDB  00D5               	movwf	??_main
  2220  0BDC  0855               	movf	??_main,w
  2221  0BDD  00E6               	movwf	_ConvertmaindataReceiveIntoString
  2222                           
  2223                           ;main.c: 515: token = strtok(ConvertmaindataReceiveIntoString,".");
  2224  0BDE  303B               	movlw	low (STR_1| (0+32768))
  2225  0BDF  00AE               	movwf	strtok@s2
  2226  0BE0  3098               	movlw	high (STR_1| (0+32768))
  2227  0BE1  00AF               	movwf	strtok@s2+1
  2228  0BE2  0866               	movf	_ConvertmaindataReceiveIntoString,w
  2229  0BE3  3188  2004  318B   	fcall	_strtok
  2230  0BE6  0020               	movlb	0	; select bank0
  2231  0BE7  00D5               	movwf	??_main
  2232  0BE8  0855               	movf	??_main,w
  2233  0BE9  00E5               	movwf	_token
  2234                           
  2235                           ;main.c: 516: ModuleNameString = token;
  2236  0BEA  0865               	movf	_token,w
  2237  0BEB  00D5               	movwf	??_main
  2238  0BEC  0855               	movf	??_main,w
  2239  0BED  00E4               	movwf	_ModuleNameString
  2240                           
  2241                           ;main.c: 517: partCounter=0;
  2242  0BEE  0022               	movlb	2	; select bank2
  2243  0BEF  01B6               	clrf	_partCounter^(0+256)
  2244  0BF0  01B7               	clrf	(_partCounter+1)^(0+256)
  2245                           
  2246                           ;main.c: 519: if((strcmp(ModuleNameString,"RGB") == 0)){
  2247  0BF1  3034               	movlw	low (STR_17| (0+32768))
  2248  0BF2  0020               	movlb	0	; select bank0
  2249  0BF3  00A0               	movwf	strcmp@s2
  2250  0BF4  3098               	movlw	high (STR_17| (0+32768))
  2251  0BF5  00A1               	movwf	strcmp@s2+1
  2252  0BF6  0864               	movf	_ModuleNameString,w
  2253  0BF7  3194  2461  318B   	fcall	_strcmp
  2254  0BFA  0020               	movlb	0	; select bank0
  2255  0BFB  0820               	movf	?_strcmp,w
  2256  0BFC  0421               	iorwf	?_strcmp+1,w
  2257  0BFD  1903               	btfsc	3,2
  2258  0BFE  2D45               	goto	l5839
  2259  0BFF  2D49               	goto	l5841
  2260  0C00                     l5765:	
  2261                           ;main.c: 520: while(token != (0))
  2262                           
  2263                           
  2264                           ;main.c: 521: {
  2265                           ;main.c: 522: partCounter++;
  2266  0C00  3001               	movlw	1
  2267  0C01  0022               	movlb	2	; select bank2
  2268  0C02  07B6               	addwf	_partCounter^(0+256),f
  2269  0C03  3000               	movlw	0
  2270  0C04  3DB7               	addwfc	(_partCounter+1)^(0+256),f
  2271                           
  2272                           ;main.c: 523: token = strtok((0),".");
  2273  0C05  303B               	movlw	low (STR_1| (0+32768))
  2274  0C06  0020               	movlb	0	; select bank0
  2275  0C07  00AE               	movwf	strtok@s2
  2276  0C08  3098               	movlw	high (STR_1| (0+32768))
  2277  0C09  00AF               	movwf	strtok@s2+1
  2278  0C0A  3000               	movlw	0
  2279  0C0B  3188  2004  318B   	fcall	_strtok
  2280  0C0E  0020               	movlb	0	; select bank0
  2281  0C0F  00D5               	movwf	??_main
  2282  0C10  0855               	movf	??_main,w
  2283  0C11  00E5               	movwf	_token
  2284                           
  2285                           ;main.c: 524: switch(partCounter){
  2286  0C12  2D32               	goto	l5837
  2287  0C13                     l5769:	
  2288                           ;main.c: 525: case 1:
  2289                           
  2290                           
  2291                           ;main.c: 526: {
  2292                           ;main.c: 527: int j=0;
  2293  0C13  0025               	movlb	5	; select bank5
  2294  0C14  01D4               	clrf	main@j^(0+640)
  2295  0C15  01D5               	clrf	(main@j+1)^(0+640)
  2296                           
  2297                           ;main.c: 528: for(j=0;j<1;j++)
  2298  0C16  01D4               	clrf	main@j^(0+640)
  2299  0C17  01D5               	clrf	(main@j+1)^(0+640)
  2300  0C18  0855               	movf	(main@j+1)^(0+640),w
  2301  0C19  3A80               	xorlw	128
  2302  0C1A  0020               	movlb	0	; select bank0
  2303  0C1B  00D5               	movwf	??_main
  2304  0C1C  3080               	movlw	128
  2305  0C1D  0255               	subwf	??_main,w
  2306  0C1E  1D03               	skipz
  2307  0C1F  2C23               	goto	u5735
  2308  0C20  3001               	movlw	1
  2309  0C21  0025               	movlb	5	; select bank5
  2310  0C22  0254               	subwf	main@j^(0+640),w
  2311  0C23                     u5735:	
  2312  0C23  1803               	btfsc	3,0
  2313  0C24  2C4B               	goto	l5783
  2314  0C25                     l5775:	
  2315                           
  2316                           ;main.c: 529: {
  2317                           ;main.c: 530: switchNumberBuffer[j]= *token;
  2318  0C25  0020               	movlb	0	; select bank0
  2319  0C26  0865               	movf	_token,w
  2320  0C27  0086               	movwf	6
  2321  0C28  3002               	movlw	2	; select bank4/5
  2322  0C29  0087               	movwf	7
  2323  0C2A  0801               	movf	1,w
  2324  0C2B  00D5               	movwf	??_main
  2325  0C2C  0025               	movlb	5	; select bank5
  2326  0C2D  0854               	movf	main@j^(0+640),w
  2327  0C2E  3EEA               	addlw	(low (_switchNumberBuffer| (0+256)))& (0+255)
  2328  0C2F  0086               	movwf	6
  2329  0C30  3001               	movlw	1	; select bank3/4
  2330  0C31  0087               	movwf	7
  2331  0C32  0020               	movlb	0	; select bank0
  2332  0C33  0855               	movf	??_main,w
  2333  0C34  0081               	movwf	1
  2334                           
  2335                           ;main.c: 531: *token++;
  2336  0C35  3001               	movlw	1
  2337  0C36  00D5               	movwf	??_main
  2338  0C37  0855               	movf	??_main,w
  2339  0C38  07E5               	addwf	_token,f
  2340  0C39  3001               	movlw	1
  2341  0C3A  0025               	movlb	5	; select bank5
  2342  0C3B  07D4               	addwf	main@j^(0+640),f
  2343  0C3C  3000               	movlw	0
  2344  0C3D  3DD5               	addwfc	(main@j+1)^(0+640),f
  2345  0C3E  0855               	movf	(main@j+1)^(0+640),w
  2346  0C3F  3A80               	xorlw	128
  2347  0C40  0020               	movlb	0	; select bank0
  2348  0C41  00D5               	movwf	??_main
  2349  0C42  3080               	movlw	128
  2350  0C43  0255               	subwf	??_main,w
  2351  0C44  1D03               	skipz
  2352  0C45  2C49               	goto	u5745
  2353  0C46  3001               	movlw	1
  2354  0C47  0025               	movlb	5	; select bank5
  2355  0C48  0254               	subwf	main@j^(0+640),w
  2356  0C49                     u5745:	
  2357  0C49  1C03               	skipc
  2358  0C4A  2C25               	goto	l5775
  2359  0C4B                     l5783:	
  2360                           
  2361                           ;main.c: 532: }
  2362                           ;main.c: 533: SwitchNumberString = switchNumberBuffer;
  2363  0C4B  30EA               	movlw	(low (_switchNumberBuffer| (0+256)))& (0+255)
  2364  0C4C  0020               	movlb	0	; select bank0
  2365  0C4D  00D5               	movwf	??_main
  2366  0C4E  0855               	movf	??_main,w
  2367  0C4F  00E3               	movwf	_SwitchNumberString
  2368                           
  2369                           ;main.c: 536: }break;
  2370  0C50  2D45               	goto	l5839
  2371  0C51                     l5785:	
  2372                           ;main.c: 538: case 2:
  2373                           
  2374                           
  2375                           ;main.c: 539: {
  2376                           ;main.c: 540: AcknowledgementString = token;
  2377  0C51  0020               	movlb	0	; select bank0
  2378  0C52  0865               	movf	_token,w
  2379  0C53  00D5               	movwf	??_main
  2380  0C54  0855               	movf	??_main,w
  2381  0C55  0022               	movlb	2	; select bank2
  2382  0C56  00DF               	movwf	_AcknowledgementString^(0+256)
  2383                           
  2384                           ;main.c: 543: }break;
  2385  0C57  2D45               	goto	l5839
  2386  0C58                     l5787:	
  2387                           ;main.c: 544: case 3:
  2388                           
  2389                           
  2390                           ;main.c: 545: {
  2391                           ;main.c: 546: int k=0;
  2392  0C58  0025               	movlb	5	; select bank5
  2393  0C59  01D6               	clrf	main@k^(0+640)
  2394  0C5A  01D7               	clrf	(main@k+1)^(0+640)
  2395                           
  2396                           ;main.c: 547: for(k=0;k<1;k++)
  2397  0C5B  01D6               	clrf	main@k^(0+640)
  2398  0C5C  01D7               	clrf	(main@k+1)^(0+640)
  2399  0C5D  0857               	movf	(main@k+1)^(0+640),w
  2400  0C5E  3A80               	xorlw	128
  2401  0C5F  0020               	movlb	0	; select bank0
  2402  0C60  00D5               	movwf	??_main
  2403  0C61  3080               	movlw	128
  2404  0C62  0255               	subwf	??_main,w
  2405  0C63  1D03               	skipz
  2406  0C64  2C68               	goto	u5755
  2407  0C65  3001               	movlw	1
  2408  0C66  0025               	movlb	5	; select bank5
  2409  0C67  0256               	subwf	main@k^(0+640),w
  2410  0C68                     u5755:	
  2411  0C68  1803               	btfsc	3,0
  2412  0C69  2C90               	goto	l5801
  2413  0C6A                     l5793:	
  2414                           
  2415                           ;main.c: 548: {
  2416                           ;main.c: 549: switchstatusbuffer[k]= *token;
  2417  0C6A  0020               	movlb	0	; select bank0
  2418  0C6B  0865               	movf	_token,w
  2419  0C6C  0086               	movwf	6
  2420  0C6D  3002               	movlw	2	; select bank4/5
  2421  0C6E  0087               	movwf	7
  2422  0C6F  0801               	movf	1,w
  2423  0C70  00D5               	movwf	??_main
  2424  0C71  0025               	movlb	5	; select bank5
  2425  0C72  0856               	movf	main@k^(0+640),w
  2426  0C73  3E62               	addlw	(low (_switchstatusbuffer| (0+256)))& (0+255)
  2427  0C74  0086               	movwf	6
  2428  0C75  3001               	movlw	1	; select bank2/3
  2429  0C76  0087               	movwf	7
  2430  0C77  0020               	movlb	0	; select bank0
  2431  0C78  0855               	movf	??_main,w
  2432  0C79  0081               	movwf	1
  2433                           
  2434                           ;main.c: 550: *token++;
  2435  0C7A  3001               	movlw	1
  2436  0C7B  00D5               	movwf	??_main
  2437  0C7C  0855               	movf	??_main,w
  2438  0C7D  07E5               	addwf	_token,f
  2439  0C7E  3001               	movlw	1
  2440  0C7F  0025               	movlb	5	; select bank5
  2441  0C80  07D6               	addwf	main@k^(0+640),f
  2442  0C81  3000               	movlw	0
  2443  0C82  3DD7               	addwfc	(main@k+1)^(0+640),f
  2444  0C83  0857               	movf	(main@k+1)^(0+640),w
  2445  0C84  3A80               	xorlw	128
  2446  0C85  0020               	movlb	0	; select bank0
  2447  0C86  00D5               	movwf	??_main
  2448  0C87  3080               	movlw	128
  2449  0C88  0255               	subwf	??_main,w
  2450  0C89  1D03               	skipz
  2451  0C8A  2C8E               	goto	u5765
  2452  0C8B  3001               	movlw	1
  2453  0C8C  0025               	movlb	5	; select bank5
  2454  0C8D  0256               	subwf	main@k^(0+640),w
  2455  0C8E                     u5765:	
  2456  0C8E  1C03               	skipc
  2457  0C8F  2C6A               	goto	l5793
  2458  0C90                     l5801:	
  2459                           
  2460                           ;main.c: 551: }
  2461                           ;main.c: 552: SwitchStatusString = switchstatusbuffer;
  2462  0C90  3062               	movlw	(low (_switchstatusbuffer| (0+256)))& (0+255)
  2463  0C91  0020               	movlb	0	; select bank0
  2464  0C92  00D5               	movwf	??_main
  2465  0C93  0855               	movf	??_main,w
  2466  0C94  00E2               	movwf	_SwitchStatusString
  2467                           
  2468                           ;main.c: 556: } break;
  2469  0C95  2D45               	goto	l5839
  2470  0C96                     l5803:	
  2471                           ;main.c: 557: case 4:
  2472                           
  2473                           
  2474                           ;main.c: 558: {
  2475                           ;main.c: 559: RedColorIntensityString = token;
  2476  0C96  0020               	movlb	0	; select bank0
  2477  0C97  0865               	movf	_token,w
  2478  0C98  00D5               	movwf	??_main
  2479  0C99  0855               	movf	??_main,w
  2480  0C9A  00E1               	movwf	_RedColorIntensityString
  2481                           
  2482                           ;main.c: 560: RedColorIntensityStringLength = strlen(RedColorIntensityString);
  2483  0C9B  0861               	movf	_RedColorIntensityString,w
  2484  0C9C  00A0               	movwf	strlen@s
  2485  0C9D  39FF               	andlw	255
  2486  0C9E  1D03               	skipz
  2487  0C9F  3002               	movlw	2
  2488  0CA0  00A1               	movwf	strlen@s+1
  2489  0CA1  3193  236E  318B   	fcall	_strlen
  2490  0CA4  0020               	movlb	0	; select bank0
  2491  0CA5  0821               	movf	?_strlen+1,w
  2492  0CA6  0023               	movlb	3	; select bank3
  2493  0CA7  00E5               	movwf	(_RedColorIntensityStringLength+1)^(0+384)
  2494  0CA8  0020               	movlb	0	; select bank0
  2495  0CA9  0820               	movf	?_strlen,w
  2496  0CAA  0023               	movlb	3	; select bank3
  2497  0CAB  00E4               	movwf	_RedColorIntensityStringLength^(0+384)
  2498                           
  2499                           ;main.c: 563: } break;
  2500  0CAC  2D45               	goto	l5839
  2501  0CAD                     l5807:	
  2502                           ;main.c: 564: case 5:
  2503                           
  2504                           
  2505                           ;main.c: 565: {
  2506                           ;main.c: 566: GreenColorIntensityString = token;
  2507  0CAD  0020               	movlb	0	; select bank0
  2508  0CAE  0865               	movf	_token,w
  2509  0CAF  00D5               	movwf	??_main
  2510  0CB0  0855               	movf	??_main,w
  2511  0CB1  00E0               	movwf	_GreenColorIntensityString
  2512                           
  2513                           ;main.c: 567: GreenColorIntensityStringLength = strlen(GreenColorIntensityString);
  2514  0CB2  0860               	movf	_GreenColorIntensityString,w
  2515  0CB3  00A0               	movwf	strlen@s
  2516  0CB4  39FF               	andlw	255
  2517  0CB5  1D03               	skipz
  2518  0CB6  3002               	movlw	2
  2519  0CB7  00A1               	movwf	strlen@s+1
  2520  0CB8  3193  236E  318B   	fcall	_strlen
  2521  0CBB  0020               	movlb	0	; select bank0
  2522  0CBC  0821               	movf	?_strlen+1,w
  2523  0CBD  0023               	movlb	3	; select bank3
  2524  0CBE  00E3               	movwf	(_GreenColorIntensityStringLength+1)^(0+384)
  2525  0CBF  0020               	movlb	0	; select bank0
  2526  0CC0  0820               	movf	?_strlen,w
  2527  0CC1  0023               	movlb	3	; select bank3
  2528  0CC2  00E2               	movwf	_GreenColorIntensityStringLength^(0+384)
  2529                           
  2530                           ;main.c: 570: } break;
  2531  0CC3  2D45               	goto	l5839
  2532  0CC4                     l5811:	
  2533                           ;main.c: 571: case 6:
  2534                           
  2535                           
  2536                           ;main.c: 572: {
  2537                           ;main.c: 573: BlueColorIntensityString = token;
  2538  0CC4  0020               	movlb	0	; select bank0
  2539  0CC5  0865               	movf	_token,w
  2540  0CC6  00D5               	movwf	??_main
  2541  0CC7  0855               	movf	??_main,w
  2542  0CC8  00DF               	movwf	_BlueColorIntensityString
  2543                           
  2544                           ;main.c: 574: BlueColorIntensityStringLength = strlen(BlueColorIntensityString);
  2545  0CC9  085F               	movf	_BlueColorIntensityString,w
  2546  0CCA  00A0               	movwf	strlen@s
  2547  0CCB  39FF               	andlw	255
  2548  0CCC  1D03               	skipz
  2549  0CCD  3002               	movlw	2
  2550  0CCE  00A1               	movwf	strlen@s+1
  2551  0CCF  3193  236E  318B   	fcall	_strlen
  2552  0CD2  0020               	movlb	0	; select bank0
  2553  0CD3  0821               	movf	?_strlen+1,w
  2554  0CD4  0023               	movlb	3	; select bank3
  2555  0CD5  00DF               	movwf	(_BlueColorIntensityStringLength+1)^(0+384)
  2556  0CD6  0020               	movlb	0	; select bank0
  2557  0CD7  0820               	movf	?_strlen,w
  2558  0CD8  0023               	movlb	3	; select bank3
  2559  0CD9  00DE               	movwf	_BlueColorIntensityStringLength^(0+384)
  2560                           
  2561                           ;main.c: 577: } break;
  2562  0CDA  2D45               	goto	l5839
  2563  0CDB                     l5815:	
  2564                           ;main.c: 578: case 7:
  2565                           
  2566                           
  2567                           ;main.c: 579: {
  2568                           ;main.c: 581: int k=0;
  2569  0CDB  0025               	movlb	5	; select bank5
  2570  0CDC  01D8               	clrf	main@k_1111^(0+640)
  2571  0CDD  01D9               	clrf	(main@k_1111+1)^(0+640)
  2572                           
  2573                           ;main.c: 582: for(k=0;k<1;k++)
  2574  0CDE  01D8               	clrf	main@k_1111^(0+640)
  2575  0CDF  01D9               	clrf	(main@k_1111+1)^(0+640)
  2576  0CE0  0859               	movf	(main@k_1111+1)^(0+640),w
  2577  0CE1  3A80               	xorlw	128
  2578  0CE2  0020               	movlb	0	; select bank0
  2579  0CE3  00D5               	movwf	??_main
  2580  0CE4  3080               	movlw	128
  2581  0CE5  0255               	subwf	??_main,w
  2582  0CE6  1D03               	skipz
  2583  0CE7  2CEB               	goto	u5775
  2584  0CE8  3001               	movlw	1
  2585  0CE9  0025               	movlb	5	; select bank5
  2586  0CEA  0258               	subwf	main@k_1111^(0+640),w
  2587  0CEB                     u5775:	
  2588  0CEB  1803               	btfsc	3,0
  2589  0CEC  2D15               	goto	l5829
  2590  0CED                     l5821:	
  2591                           
  2592                           ;main.c: 583: {
  2593                           ;main.c: 584: ChildLockString[k]= *token;
  2594  0CED  0020               	movlb	0	; select bank0
  2595  0CEE  0865               	movf	_token,w
  2596  0CEF  0086               	movwf	6
  2597  0CF0  3002               	movlw	2	; select bank4/5
  2598  0CF1  0087               	movwf	7
  2599  0CF2  0801               	movf	1,w
  2600  0CF3  00D5               	movwf	??_main
  2601  0CF4  0025               	movlb	5	; select bank5
  2602  0CF5  0858               	movf	main@k_1111^(0+640),w
  2603  0CF6  0020               	movlb	0	; select bank0
  2604  0CF7  075D               	addwf	_ChildLockString,w
  2605  0CF8  00D6               	movwf	??_main+1
  2606  0CF9  0856               	movf	??_main+1,w
  2607  0CFA  0086               	movwf	6
  2608  0CFB  3001               	movlw	1	; select bank2/3
  2609  0CFC  0087               	movwf	7
  2610  0CFD  0855               	movf	??_main,w
  2611  0CFE  0081               	movwf	1
  2612                           
  2613                           ;main.c: 585: *token++;
  2614  0CFF  3001               	movlw	1
  2615  0D00  00D5               	movwf	??_main
  2616  0D01  0855               	movf	??_main,w
  2617  0D02  07E5               	addwf	_token,f
  2618  0D03  3001               	movlw	1
  2619  0D04  0025               	movlb	5	; select bank5
  2620  0D05  07D8               	addwf	main@k_1111^(0+640),f
  2621  0D06  3000               	movlw	0
  2622  0D07  3DD9               	addwfc	(main@k_1111+1)^(0+640),f
  2623  0D08  0859               	movf	(main@k_1111+1)^(0+640),w
  2624  0D09  3A80               	xorlw	128
  2625  0D0A  0020               	movlb	0	; select bank0
  2626  0D0B  00D5               	movwf	??_main
  2627  0D0C  3080               	movlw	128
  2628  0D0D  0255               	subwf	??_main,w
  2629  0D0E  1D03               	skipz
  2630  0D0F  2D13               	goto	u5785
  2631  0D10  3001               	movlw	1
  2632  0D11  0025               	movlb	5	; select bank5
  2633  0D12  0258               	subwf	main@k_1111^(0+640),w
  2634  0D13                     u5785:	
  2635  0D13  1C03               	skipc
  2636  0D14  2CED               	goto	l5821
  2637  0D15                     l5829:	
  2638                           
  2639                           ;main.c: 586: }
  2640                           ;main.c: 587: ChildLockString = ChildLockbuffer;
  2641  0D15  3060               	movlw	(low (_ChildLockbuffer| (0+256)))& (0+255)
  2642  0D16  0020               	movlb	0	; select bank0
  2643  0D17  00D5               	movwf	??_main
  2644  0D18  0855               	movf	??_main,w
  2645  0D19  00DD               	movwf	_ChildLockString
  2646                           
  2647                           ;main.c: 590: } break;
  2648  0D1A  2D45               	goto	l5839
  2649  0D1B                     l5831:	
  2650                           ;main.c: 591: case 8:
  2651                           
  2652                           
  2653                           ;main.c: 592: {
  2654                           ;main.c: 593: AllColorIntensityString = token;
  2655  0D1B  0020               	movlb	0	; select bank0
  2656  0D1C  0865               	movf	_token,w
  2657  0D1D  00D5               	movwf	??_main
  2658  0D1E  0855               	movf	??_main,w
  2659  0D1F  00DE               	movwf	_AllColorIntensityString
  2660                           
  2661                           ;main.c: 594: AllColorIntensityStringLength = strlen(AllColorIntensityString);
  2662  0D20  085E               	movf	_AllColorIntensityString,w
  2663  0D21  00A0               	movwf	strlen@s
  2664  0D22  39FF               	andlw	255
  2665  0D23  1D03               	skipz
  2666  0D24  3002               	movlw	2
  2667  0D25  00A1               	movwf	strlen@s+1
  2668  0D26  3193  236E  318B   	fcall	_strlen
  2669  0D29  0020               	movlb	0	; select bank0
  2670  0D2A  0821               	movf	?_strlen+1,w
  2671  0D2B  0023               	movlb	3	; select bank3
  2672  0D2C  00E1               	movwf	(_AllColorIntensityStringLength+1)^(0+384)
  2673  0D2D  0020               	movlb	0	; select bank0
  2674  0D2E  0820               	movf	?_strlen,w
  2675  0D2F  0023               	movlb	3	; select bank3
  2676  0D30  00E0               	movwf	_AllColorIntensityStringLength^(0+384)
  2677                           
  2678                           ;main.c: 601: }
  2679                           
  2680                           ;main.c: 598: break;
  2681                           
  2682                           ;main.c: 597: default:
  2683                           
  2684                           ;main.c: 595: }break;
  2685  0D31  2D45               	goto	l5839
  2686  0D32                     l5837:	
  2687                           
  2688                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2689                           ; Switch size 1, requested type "space"
  2690                           ; Number of cases is 1, Range of values is 0 to 0
  2691                           ; switch strategies available:
  2692                           ; Name         Instructions Cycles
  2693                           ; simple_byte            4     3 (average)
  2694                           ; direct_byte            8     6 (fixed)
  2695                           ; jumptable            260     6 (fixed)
  2696                           ;	Chosen strategy is simple_byte
  2697  0D32  0022               	movlb	2	; select bank2
  2698  0D33  0837               	movf	(_partCounter+1)^(0+256),w
  2699  0D34  3A00               	xorlw	0	; case 0
  2700  0D35  1903               	skipnz
  2701  0D36  2D38               	goto	l6247
  2702  0D37  2D45               	goto	l5839
  2703  0D38                     l6247:	
  2704                           
  2705                           ; Switch size 1, requested type "space"
  2706                           ; Number of cases is 8, Range of values is 1 to 8
  2707                           ; switch strategies available:
  2708                           ; Name         Instructions Cycles
  2709                           ; direct_byte           25     9 (fixed)
  2710                           ; simple_byte           25    13 (average)
  2711                           ; jumptable            263     9 (fixed)
  2712                           ;	Chosen strategy is direct_byte
  2713  0D38  0836               	movf	_partCounter^(0+256),w
  2714  0D39  3EFF               	addlw	-1
  2715  0D3A  1C03               	skipc
  2716  0D3B  2D45               	goto	l5839
  2717  0D3C  0084               	movwf	4
  2718  0D3D  3008               	movlw	8
  2719  0D3E  0204               	subwf	4,w
  2720  0D3F  1803               	skipnc
  2721  0D40  2D45               	goto	l5839
  2722  0D41  3190               	movlp	high S6249
  2723  0D42  3504               	lslf	4,w
  2724  0D43  3E00               	addlw	low S6249
  2725  0D44  0082               	movwf	2
  2726  0D45                     l5839:	
  2727  0D45  0020               	movlb	0	; select bank0
  2728  0D46  0865               	movf	_token,w
  2729  0D47  1D03               	btfss	3,2
  2730  0D48  2C00               	goto	l5765
  2731  0D49                     l5841:	
  2732                           
  2733                           ;main.c: 602: }
  2734                           ;main.c: 604: }
  2735                           ;main.c: 606: applicationControlRGB(ModuleNameString,SwitchNumberString,SwitchStatusStri
      +                          ng,
  2736                           ;main.c: 607: RedColorIntensityString,GreenColorIntensityString,BlueColorIntensityString
      +                          ,ChildLockString,AllColorIntensityString );
  2737  0D49  0863               	movf	_SwitchNumberString,w
  2738  0D4A  00D5               	movwf	??_main
  2739  0D4B  0855               	movf	??_main,w
  2740  0D4C  00CC               	movwf	applicationControlRGB@SwitchNumberstr
  2741  0D4D  0862               	movf	_SwitchStatusString,w
  2742  0D4E  00D6               	movwf	??_main+1
  2743  0D4F  0856               	movf	??_main+1,w
  2744  0D50  00CD               	movwf	applicationControlRGB@SwitchStatusstr
  2745  0D51  0861               	movf	_RedColorIntensityString,w
  2746  0D52  00D7               	movwf	??_main+2
  2747  0D53  0857               	movf	??_main+2,w
  2748  0D54  00CE               	movwf	applicationControlRGB@RedColorIntensitystr
  2749  0D55  0860               	movf	_GreenColorIntensityString,w
  2750  0D56  00D8               	movwf	??_main+3
  2751  0D57  0858               	movf	??_main+3,w
  2752  0D58  00CF               	movwf	applicationControlRGB@GreenColorIntensitystr
  2753  0D59  085F               	movf	_BlueColorIntensityString,w
  2754  0D5A  00D9               	movwf	??_main+4
  2755  0D5B  0859               	movf	??_main+4,w
  2756  0D5C  00D0               	movwf	applicationControlRGB@BlueColorIntensitystr
  2757  0D5D  085D               	movf	_ChildLockString,w
  2758  0D5E  00DA               	movwf	??_main+5
  2759  0D5F  085A               	movf	??_main+5,w
  2760  0D60  00D1               	movwf	applicationControlRGB@ChildLockstr
  2761  0D61  085E               	movf	_AllColorIntensityString,w
  2762  0D62  00DB               	movwf	??_main+6
  2763  0D63  085B               	movf	??_main+6,w
  2764  0D64  00D2               	movwf	applicationControlRGB@Allcolorstr
  2765  0D65  0864               	movf	_ModuleNameString,w
  2766  0D66  3181  217D  318B   	fcall	_applicationControlRGB
  2767                           
  2768                           ;main.c: 609: }
  2769  0D69  2DA6               	goto	l5861
  2770  0D6A                     l5843:	
  2771                           
  2772                           ;main.c: 611: else
  2773                           ;main.c: 612: {
  2774                           ;main.c: 614: errorsMain("ERLS");
  2775  0D6A  3020               	movlw	low (STR_19| (0+32768))
  2776  0D6B  0020               	movlb	0	; select bank0
  2777  0D6C  00A0               	movwf	errorsMain@errNum
  2778  0D6D  3098               	movlw	high (STR_19| (0+32768))
  2779  0D6E  00A1               	movwf	errorsMain@errNum+1
  2780  0D6F  3193  2315  318B   	fcall	_errorsMain
  2781                           
  2782                           ;main.c: 615: RC1STAbits.SPEN = 0;
  2783  0D72  0023               	movlb	3	; select bank3
  2784  0D73  139D               	bcf	29,7	;volatile
  2785                           
  2786                           ;main.c: 616: RC1STAbits.CREN = 0;
  2787  0D74  121D               	bcf	29,4	;volatile
  2788                           
  2789                           ;main.c: 617: for(int dataBufferCounter = 0; dataBufferCounter< 15; dataBufferCounter++)
  2790  0D75  0025               	movlb	5	; select bank5
  2791  0D76  01D2               	clrf	main@dataBufferCounter^(0+640)
  2792  0D77  01D3               	clrf	(main@dataBufferCounter+1)^(0+640)
  2793  0D78  0853               	movf	(main@dataBufferCounter+1)^(0+640),w
  2794  0D79  3A80               	xorlw	128
  2795  0D7A  0020               	movlb	0	; select bank0
  2796  0D7B  00D5               	movwf	??_main
  2797  0D7C  3080               	movlw	128
  2798  0D7D  0255               	subwf	??_main,w
  2799  0D7E  1D03               	skipz
  2800  0D7F  2D83               	goto	u5805
  2801  0D80  300F               	movlw	15
  2802  0D81  0025               	movlb	5	; select bank5
  2803  0D82  0252               	subwf	main@dataBufferCounter^(0+640),w
  2804  0D83                     u5805:	
  2805  0D83  1803               	btfsc	3,0
  2806  0D84  2DA3               	goto	l509
  2807  0D85                     l5855:	
  2808                           
  2809                           ;main.c: 618: {
  2810                           ;main.c: 619: mainReceivedDataBuffer[dataBufferCounter] = '#';
  2811  0D85  3023               	movlw	35
  2812  0D86  0020               	movlb	0	; select bank0
  2813  0D87  00D5               	movwf	??_main
  2814  0D88  0025               	movlb	5	; select bank5
  2815  0D89  0852               	movf	main@dataBufferCounter^(0+640),w
  2816  0D8A  3EA0               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
  2817  0D8B  0086               	movwf	6
  2818  0D8C  3002               	movlw	2	; select bank5/6
  2819  0D8D  0087               	movwf	7
  2820  0D8E  0020               	movlb	0	; select bank0
  2821  0D8F  0855               	movf	??_main,w
  2822  0D90  0081               	movwf	1
  2823  0D91  3001               	movlw	1
  2824  0D92  0025               	movlb	5	; select bank5
  2825  0D93  07D2               	addwf	main@dataBufferCounter^(0+640),f
  2826  0D94  3000               	movlw	0
  2827  0D95  3DD3               	addwfc	(main@dataBufferCounter+1)^(0+640),f
  2828  0D96  0853               	movf	(main@dataBufferCounter+1)^(0+640),w
  2829  0D97  3A80               	xorlw	128
  2830  0D98  0020               	movlb	0	; select bank0
  2831  0D99  00D5               	movwf	??_main
  2832  0D9A  3080               	movlw	128
  2833  0D9B  0255               	subwf	??_main,w
  2834  0D9C  1D03               	skipz
  2835  0D9D  2DA1               	goto	u5815
  2836  0D9E  300F               	movlw	15
  2837  0D9F  0025               	movlb	5	; select bank5
  2838  0DA0  0252               	subwf	main@dataBufferCounter^(0+640),w
  2839  0DA1                     u5815:	
  2840  0DA1  1C03               	skipc
  2841  0DA2  2D85               	goto	l5855
  2842  0DA3                     l509:	
  2843                           
  2844                           ;main.c: 620: }
  2845                           ;main.c: 621: RC1STAbits.CREN = 1;
  2846  0DA3  0023               	movlb	3	; select bank3
  2847  0DA4  161D               	bsf	29,4	;volatile
  2848                           
  2849                           ;main.c: 622: RC1STAbits.SPEN=1;
  2850  0DA5  179D               	bsf	29,7	;volatile
  2851  0DA6                     l5861:	
  2852                           
  2853                           ;main.c: 623: }
  2854                           ;main.c: 624: }
  2855                           ;main.c: 629: int man = 1;
  2856  0DA6  3001               	movlw	1
  2857  0DA7  0025               	movlb	5	; select bank5
  2858  0DA8  00DA               	movwf	main@man^(0+640)
  2859  0DA9  3000               	movlw	0
  2860  0DAA  00DB               	movwf	(main@man^(0+640)+1)
  2861                           
  2862                           ;main.c: 630: if(copy_parentalLockBuffer[1] == '0' && PORTDbits.RD6 == 0 && M1 == 0)
  2863  0DAB  3030               	movlw	48
  2864  0DAC  0023               	movlb	3	; select bank3
  2865  0DAD  0639               	xorwf	(_copy_parentalLockBuffer^(0+384)+1),w
  2866  0DAE  1D03               	btfss	3,2
  2867  0DAF  2DD2               	goto	l5879
  2868  0DB0  0020               	movlb	0	; select bank0
  2869  0DB1  1B0F               	btfsc	15,6	;volatile
  2870  0DB2  2DD2               	goto	l5879
  2871  0DB3  0022               	movlb	2	; select bank2
  2872  0DB4  082E               	movf	_M1^(0+256),w
  2873  0DB5  042F               	iorwf	(_M1+1)^(0+256),w
  2874  0DB6  1D03               	btfss	3,2
  2875  0DB7  2DD2               	goto	l5879
  2876                           
  2877                           ;main.c: 631: {
  2878                           ;main.c: 632: if(man == 1)
  2879  0DB8  0025               	movlb	5	; select bank5
  2880  0DB9  035A               	decf	main@man^(0+640),w
  2881  0DBA  045B               	iorwf	(main@man+1)^(0+640),w
  2882  0DBB  1D03               	btfss	3,2
  2883  0DBC  2DCA               	goto	l5875
  2884                           
  2885                           ;main.c: 633: {
  2886                           ;main.c: 634: SwitchOnStatustToGatway('1');
  2887  0DBD  3031               	movlw	49
  2888  0DBE  0020               	movlb	0	; select bank0
  2889  0DBF  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  2890  0DC0  3000               	movlw	0
  2891  0DC1  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  2892  0DC2  3195  25E0  318B   	fcall	_SwitchOnStatustToGatway
  2893                           
  2894                           ;main.c: 636: TransmissionIndicationLedBlinking();
  2895  0DC5  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  2896                           
  2897                           ;main.c: 637: PORTEbits.RE0=1;
  2898  0DC8  0020               	movlb	0	; select bank0
  2899  0DC9  1410               	bsf	16,0	;volatile
  2900  0DCA                     l5875:	
  2901                           
  2902                           ;main.c: 639: }
  2903                           ;main.c: 640: man=0;
  2904  0DCA  0025               	movlb	5	; select bank5
  2905  0DCB  01DA               	clrf	main@man^(0+640)
  2906  0DCC  01DB               	clrf	(main@man+1)^(0+640)
  2907                           
  2908                           ;main.c: 641: M1=1;
  2909  0DCD  3001               	movlw	1
  2910  0DCE  0022               	movlb	2	; select bank2
  2911  0DCF  00AE               	movwf	_M1^(0+256)
  2912  0DD0  3000               	movlw	0
  2913  0DD1  00AF               	movwf	(_M1^(0+256)+1)
  2914  0DD2                     l5879:	
  2915                           
  2916                           ;main.c: 643: }
  2917                           ;main.c: 645: if(copy_parentalLockBuffer[1] == '0' && PORTDbits.RD6 == 1 && M1 == 1)
  2918  0DD2  3030               	movlw	48
  2919  0DD3  0023               	movlb	3	; select bank3
  2920  0DD4  0639               	xorwf	(_copy_parentalLockBuffer^(0+384)+1),w
  2921  0DD5  1D03               	btfss	3,2
  2922  0DD6  2DF7               	goto	l5895
  2923  0DD7  0020               	movlb	0	; select bank0
  2924  0DD8  1F0F               	btfss	15,6	;volatile
  2925  0DD9  2DF7               	goto	l5895
  2926  0DDA  0022               	movlb	2	; select bank2
  2927  0DDB  032E               	decf	_M1^(0+256),w
  2928  0DDC  042F               	iorwf	(_M1+1)^(0+256),w
  2929  0DDD  1D03               	btfss	3,2
  2930  0DDE  2DF7               	goto	l5895
  2931                           
  2932                           ;main.c: 646: {
  2933                           ;main.c: 648: if(man==1)
  2934  0DDF  0025               	movlb	5	; select bank5
  2935  0DE0  035A               	decf	main@man^(0+640),w
  2936  0DE1  045B               	iorwf	(main@man+1)^(0+640),w
  2937  0DE2  1D03               	btfss	3,2
  2938  0DE3  2DF1               	goto	l5891
  2939                           
  2940                           ;main.c: 649: {
  2941                           ;main.c: 650: SwitchOffStatustToGatway('1');
  2942  0DE4  3031               	movlw	49
  2943  0DE5  0020               	movlb	0	; select bank0
  2944  0DE6  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  2945  0DE7  3000               	movlw	0
  2946  0DE8  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  2947  0DE9  3195  25AD  318B   	fcall	_SwitchOffStatustToGatway
  2948                           
  2949                           ;main.c: 651: TransmissionIndicationLedBlinking();
  2950  0DEC  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  2951                           
  2952                           ;main.c: 652: PORTEbits.RE0=0;
  2953  0DEF  0020               	movlb	0	; select bank0
  2954  0DF0  1010               	bcf	16,0	;volatile
  2955  0DF1                     l5891:	
  2956                           
  2957                           ;main.c: 653: }
  2958                           ;main.c: 654: man=0;
  2959  0DF1  0025               	movlb	5	; select bank5
  2960  0DF2  01DA               	clrf	main@man^(0+640)
  2961  0DF3  01DB               	clrf	(main@man+1)^(0+640)
  2962                           
  2963                           ;main.c: 655: M1=0;
  2964  0DF4  0022               	movlb	2	; select bank2
  2965  0DF5  01AE               	clrf	_M1^(0+256)
  2966  0DF6  01AF               	clrf	(_M1+1)^(0+256)
  2967  0DF7                     l5895:	
  2968                           
  2969                           ;main.c: 656: }
  2970                           ;main.c: 660: if(copy_parentalLockBuffer[2] == '0' && PORTDbits.RD7 == 0 && M2 == 0)
  2971  0DF7  3030               	movlw	48
  2972  0DF8  0023               	movlb	3	; select bank3
  2973  0DF9  063A               	xorwf	(_copy_parentalLockBuffer^(0+384)+2),w
  2974  0DFA  1D03               	btfss	3,2
  2975  0DFB  2E1E               	goto	l5911
  2976  0DFC  0020               	movlb	0	; select bank0
  2977  0DFD  1B8F               	btfsc	15,7	;volatile
  2978  0DFE  2E1E               	goto	l5911
  2979  0DFF  0022               	movlb	2	; select bank2
  2980  0E00  082C               	movf	_M2^(0+256),w
  2981  0E01  042D               	iorwf	(_M2+1)^(0+256),w
  2982  0E02  1D03               	btfss	3,2
  2983  0E03  2E1E               	goto	l5911
  2984                           
  2985                           ;main.c: 661: {
  2986                           ;main.c: 662: if(man==1)
  2987  0E04  0025               	movlb	5	; select bank5
  2988  0E05  035A               	decf	main@man^(0+640),w
  2989  0E06  045B               	iorwf	(main@man+1)^(0+640),w
  2990  0E07  1D03               	btfss	3,2
  2991  0E08  2E16               	goto	l5907
  2992                           
  2993                           ;main.c: 663: {
  2994                           ;main.c: 664: SwitchOnStatustToGatway('2');
  2995  0E09  3032               	movlw	50
  2996  0E0A  0020               	movlb	0	; select bank0
  2997  0E0B  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  2998  0E0C  3000               	movlw	0
  2999  0E0D  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3000  0E0E  3195  25E0  318B   	fcall	_SwitchOnStatustToGatway
  3001                           
  3002                           ;main.c: 665: TransmissionIndicationLedBlinking();
  3003  0E11  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3004                           
  3005                           ;main.c: 666: PORTEbits.RE1=1;
  3006  0E14  0020               	movlb	0	; select bank0
  3007  0E15  1490               	bsf	16,1	;volatile
  3008  0E16                     l5907:	
  3009                           
  3010                           ;main.c: 667: }
  3011                           ;main.c: 668: man=0;
  3012  0E16  0025               	movlb	5	; select bank5
  3013  0E17  01DA               	clrf	main@man^(0+640)
  3014  0E18  01DB               	clrf	(main@man+1)^(0+640)
  3015                           
  3016                           ;main.c: 669: M2=1;
  3017  0E19  3001               	movlw	1
  3018  0E1A  0022               	movlb	2	; select bank2
  3019  0E1B  00AC               	movwf	_M2^(0+256)
  3020  0E1C  3000               	movlw	0
  3021  0E1D  00AD               	movwf	(_M2^(0+256)+1)
  3022  0E1E                     l5911:	
  3023                           
  3024                           ;main.c: 670: }
  3025                           ;main.c: 672: if(copy_parentalLockBuffer[2] == '0' && PORTDbits.RD7 == 1 && M2 == 1)
  3026  0E1E  3030               	movlw	48
  3027  0E1F  0023               	movlb	3	; select bank3
  3028  0E20  063A               	xorwf	(_copy_parentalLockBuffer^(0+384)+2),w
  3029  0E21  1D03               	btfss	3,2
  3030  0E22  2E43               	goto	l5927
  3031  0E23  0020               	movlb	0	; select bank0
  3032  0E24  1F8F               	btfss	15,7	;volatile
  3033  0E25  2E43               	goto	l5927
  3034  0E26  0022               	movlb	2	; select bank2
  3035  0E27  032C               	decf	_M2^(0+256),w
  3036  0E28  042D               	iorwf	(_M2+1)^(0+256),w
  3037  0E29  1D03               	btfss	3,2
  3038  0E2A  2E43               	goto	l5927
  3039                           
  3040                           ;main.c: 673: {
  3041                           ;main.c: 674: if(man==1)
  3042  0E2B  0025               	movlb	5	; select bank5
  3043  0E2C  035A               	decf	main@man^(0+640),w
  3044  0E2D  045B               	iorwf	(main@man+1)^(0+640),w
  3045  0E2E  1D03               	btfss	3,2
  3046  0E2F  2E3D               	goto	l5923
  3047                           
  3048                           ;main.c: 675: {
  3049                           ;main.c: 676: SwitchOffStatustToGatway('2');
  3050  0E30  3032               	movlw	50
  3051  0E31  0020               	movlb	0	; select bank0
  3052  0E32  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3053  0E33  3000               	movlw	0
  3054  0E34  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3055  0E35  3195  25AD  318B   	fcall	_SwitchOffStatustToGatway
  3056                           
  3057                           ;main.c: 677: TransmissionIndicationLedBlinking();
  3058  0E38  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3059                           
  3060                           ;main.c: 678: PORTEbits.RE1=0;
  3061  0E3B  0020               	movlb	0	; select bank0
  3062  0E3C  1090               	bcf	16,1	;volatile
  3063  0E3D                     l5923:	
  3064                           
  3065                           ;main.c: 679: }
  3066                           ;main.c: 680: man=0;
  3067  0E3D  0025               	movlb	5	; select bank5
  3068  0E3E  01DA               	clrf	main@man^(0+640)
  3069  0E3F  01DB               	clrf	(main@man+1)^(0+640)
  3070                           
  3071                           ;main.c: 681: M2=0;
  3072  0E40  0022               	movlb	2	; select bank2
  3073  0E41  01AC               	clrf	_M2^(0+256)
  3074  0E42  01AD               	clrf	(_M2+1)^(0+256)
  3075  0E43                     l5927:	
  3076                           
  3077                           ;main.c: 682: }
  3078                           ;main.c: 687: if(copy_parentalLockBuffer[3] == '0' && PORTBbits.RB0 == 0 && M3 == 0)
  3079  0E43  3030               	movlw	48
  3080  0E44  0023               	movlb	3	; select bank3
  3081  0E45  063B               	xorwf	(_copy_parentalLockBuffer^(0+384)+3),w
  3082  0E46  1D03               	btfss	3,2
  3083  0E47  2E69               	goto	l5943
  3084  0E48  0020               	movlb	0	; select bank0
  3085  0E49  180D               	btfsc	13,0	;volatile
  3086  0E4A  2E69               	goto	l5943
  3087  0E4B  0022               	movlb	2	; select bank2
  3088  0E4C  082A               	movf	_M3^(0+256),w
  3089  0E4D  042B               	iorwf	(_M3+1)^(0+256),w
  3090  0E4E  1D03               	btfss	3,2
  3091  0E4F  2E69               	goto	l5943
  3092                           
  3093                           ;main.c: 688: {
  3094                           ;main.c: 689: if(man == 1)
  3095  0E50  0025               	movlb	5	; select bank5
  3096  0E51  035A               	decf	main@man^(0+640),w
  3097  0E52  045B               	iorwf	(main@man+1)^(0+640),w
  3098  0E53  1D03               	btfss	3,2
  3099  0E54  2E62               	goto	l5939
  3100                           
  3101                           ;main.c: 690: {
  3102                           ;main.c: 691: SwitchOnStatustToGatway('3');
  3103  0E55  3033               	movlw	51
  3104  0E56  0020               	movlb	0	; select bank0
  3105  0E57  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3106  0E58  3000               	movlw	0
  3107  0E59  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3108  0E5A  3195  25E0  318B   	fcall	_SwitchOnStatustToGatway
  3109                           
  3110                           ;main.c: 692: TransmissionIndicationLedBlinking();
  3111  0E5D  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3112                           
  3113                           ;main.c: 693: PORTGbits.RG0=1;
  3114  0E60  0025               	movlb	5	; select bank5
  3115  0E61  140D               	bsf	13,0	;volatile
  3116  0E62                     l5939:	
  3117                           
  3118                           ;main.c: 694: }
  3119                           ;main.c: 695: man=0;
  3120  0E62  01DA               	clrf	main@man^(0+640)
  3121  0E63  01DB               	clrf	(main@man+1)^(0+640)
  3122                           
  3123                           ;main.c: 696: M3=1;
  3124  0E64  3001               	movlw	1
  3125  0E65  0022               	movlb	2	; select bank2
  3126  0E66  00AA               	movwf	_M3^(0+256)
  3127  0E67  3000               	movlw	0
  3128  0E68  00AB               	movwf	(_M3^(0+256)+1)
  3129  0E69                     l5943:	
  3130                           
  3131                           ;main.c: 698: }
  3132                           ;main.c: 700: if(copy_parentalLockBuffer[3] == '0' && PORTBbits.RB0 == 1 && M3 == 1)
  3133  0E69  3030               	movlw	48
  3134  0E6A  0023               	movlb	3	; select bank3
  3135  0E6B  063B               	xorwf	(_copy_parentalLockBuffer^(0+384)+3),w
  3136  0E6C  1D03               	btfss	3,2
  3137  0E6D  2E8D               	goto	l5959
  3138  0E6E  0020               	movlb	0	; select bank0
  3139  0E6F  1C0D               	btfss	13,0	;volatile
  3140  0E70  2E8D               	goto	l5959
  3141  0E71  0022               	movlb	2	; select bank2
  3142  0E72  032A               	decf	_M3^(0+256),w
  3143  0E73  042B               	iorwf	(_M3+1)^(0+256),w
  3144  0E74  1D03               	btfss	3,2
  3145  0E75  2E8D               	goto	l5959
  3146                           
  3147                           ;main.c: 701: {
  3148                           ;main.c: 702: if(man==1)
  3149  0E76  0025               	movlb	5	; select bank5
  3150  0E77  035A               	decf	main@man^(0+640),w
  3151  0E78  045B               	iorwf	(main@man+1)^(0+640),w
  3152  0E79  1D03               	btfss	3,2
  3153  0E7A  2E88               	goto	l5955
  3154                           
  3155                           ;main.c: 703: {
  3156                           ;main.c: 704: SwitchOffStatustToGatway('3');
  3157  0E7B  3033               	movlw	51
  3158  0E7C  0020               	movlb	0	; select bank0
  3159  0E7D  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3160  0E7E  3000               	movlw	0
  3161  0E7F  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3162  0E80  3195  25AD  318B   	fcall	_SwitchOffStatustToGatway
  3163                           
  3164                           ;main.c: 705: TransmissionIndicationLedBlinking();
  3165  0E83  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3166                           
  3167                           ;main.c: 706: PORTGbits.RG0=0;
  3168  0E86  0025               	movlb	5	; select bank5
  3169  0E87  100D               	bcf	13,0	;volatile
  3170  0E88                     l5955:	
  3171                           
  3172                           ;main.c: 707: }
  3173                           ;main.c: 708: man=0;
  3174  0E88  01DA               	clrf	main@man^(0+640)
  3175  0E89  01DB               	clrf	(main@man+1)^(0+640)
  3176                           
  3177                           ;main.c: 709: M3=0;
  3178  0E8A  0022               	movlb	2	; select bank2
  3179  0E8B  01AA               	clrf	_M3^(0+256)
  3180  0E8C  01AB               	clrf	(_M3+1)^(0+256)
  3181  0E8D                     l5959:	
  3182                           
  3183                           ;main.c: 711: }
  3184                           ;main.c: 716: if(copy_parentalLockBuffer[4] == '0' && PORTBbits.RB1 == 0 && M4 == 0)
  3185  0E8D  3030               	movlw	48
  3186  0E8E  0023               	movlb	3	; select bank3
  3187  0E8F  063C               	xorwf	(_copy_parentalLockBuffer^(0+384)+4),w
  3188  0E90  1D03               	btfss	3,2
  3189  0E91  2EB3               	goto	l5975
  3190  0E92  0020               	movlb	0	; select bank0
  3191  0E93  188D               	btfsc	13,1	;volatile
  3192  0E94  2EB3               	goto	l5975
  3193  0E95  0022               	movlb	2	; select bank2
  3194  0E96  0828               	movf	_M4^(0+256),w
  3195  0E97  0429               	iorwf	(_M4+1)^(0+256),w
  3196  0E98  1D03               	btfss	3,2
  3197  0E99  2EB3               	goto	l5975
  3198                           
  3199                           ;main.c: 717: {
  3200                           ;main.c: 718: if(man==1)
  3201  0E9A  0025               	movlb	5	; select bank5
  3202  0E9B  035A               	decf	main@man^(0+640),w
  3203  0E9C  045B               	iorwf	(main@man+1)^(0+640),w
  3204  0E9D  1D03               	btfss	3,2
  3205  0E9E  2EAC               	goto	l5971
  3206                           
  3207                           ;main.c: 719: {
  3208                           ;main.c: 720: SwitchOnStatustToGatway('4');
  3209  0E9F  3034               	movlw	52
  3210  0EA0  0020               	movlb	0	; select bank0
  3211  0EA1  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3212  0EA2  3000               	movlw	0
  3213  0EA3  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3214  0EA4  3195  25E0  318B   	fcall	_SwitchOnStatustToGatway
  3215                           
  3216                           ;main.c: 721: TransmissionIndicationLedBlinking();
  3217  0EA7  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3218                           
  3219                           ;main.c: 722: PORTGbits.RG3=1;
  3220  0EAA  0025               	movlb	5	; select bank5
  3221  0EAB  158D               	bsf	13,3	;volatile
  3222  0EAC                     l5971:	
  3223                           
  3224                           ;main.c: 723: }
  3225                           ;main.c: 724: man=0;
  3226  0EAC  01DA               	clrf	main@man^(0+640)
  3227  0EAD  01DB               	clrf	(main@man+1)^(0+640)
  3228                           
  3229                           ;main.c: 725: M4=1;
  3230  0EAE  3001               	movlw	1
  3231  0EAF  0022               	movlb	2	; select bank2
  3232  0EB0  00A8               	movwf	_M4^(0+256)
  3233  0EB1  3000               	movlw	0
  3234  0EB2  00A9               	movwf	(_M4^(0+256)+1)
  3235  0EB3                     l5975:	
  3236                           
  3237                           ;main.c: 727: }
  3238                           ;main.c: 729: if(copy_parentalLockBuffer[4] == '0' && PORTBbits.RB1 == 1 && M4 == 1)
  3239  0EB3  3030               	movlw	48
  3240  0EB4  0023               	movlb	3	; select bank3
  3241  0EB5  063C               	xorwf	(_copy_parentalLockBuffer^(0+384)+4),w
  3242  0EB6  1D03               	btfss	3,2
  3243  0EB7  2ED7               	goto	l5991
  3244  0EB8  0020               	movlb	0	; select bank0
  3245  0EB9  1C8D               	btfss	13,1	;volatile
  3246  0EBA  2ED7               	goto	l5991
  3247  0EBB  0022               	movlb	2	; select bank2
  3248  0EBC  0328               	decf	_M4^(0+256),w
  3249  0EBD  0429               	iorwf	(_M4+1)^(0+256),w
  3250  0EBE  1D03               	btfss	3,2
  3251  0EBF  2ED7               	goto	l5991
  3252                           
  3253                           ;main.c: 730: {
  3254                           ;main.c: 731: if(man==1)
  3255  0EC0  0025               	movlb	5	; select bank5
  3256  0EC1  035A               	decf	main@man^(0+640),w
  3257  0EC2  045B               	iorwf	(main@man+1)^(0+640),w
  3258  0EC3  1D03               	btfss	3,2
  3259  0EC4  2ED2               	goto	l5987
  3260                           
  3261                           ;main.c: 732: {
  3262                           ;main.c: 734: SwitchOffStatustToGatway('4');
  3263  0EC5  3034               	movlw	52
  3264  0EC6  0020               	movlb	0	; select bank0
  3265  0EC7  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3266  0EC8  3000               	movlw	0
  3267  0EC9  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3268  0ECA  3195  25AD  318B   	fcall	_SwitchOffStatustToGatway
  3269                           
  3270                           ;main.c: 735: TransmissionIndicationLedBlinking();
  3271  0ECD  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3272                           
  3273                           ;main.c: 736: PORTGbits.RG3=0;
  3274  0ED0  0025               	movlb	5	; select bank5
  3275  0ED1  118D               	bcf	13,3	;volatile
  3276  0ED2                     l5987:	
  3277                           
  3278                           ;main.c: 737: }
  3279                           ;main.c: 738: man=0;
  3280  0ED2  01DA               	clrf	main@man^(0+640)
  3281  0ED3  01DB               	clrf	(main@man+1)^(0+640)
  3282                           
  3283                           ;main.c: 739: M4=0;
  3284  0ED4  0022               	movlb	2	; select bank2
  3285  0ED5  01A8               	clrf	_M4^(0+256)
  3286  0ED6  01A9               	clrf	(_M4+1)^(0+256)
  3287  0ED7                     l5991:	
  3288                           
  3289                           ;main.c: 741: }
  3290                           ;main.c: 743: if(copy_parentalLockBuffer[5] == '0' && PORTBbits.RB2 == 0 && M5 == 0)
  3291  0ED7  3030               	movlw	48
  3292  0ED8  0023               	movlb	3	; select bank3
  3293  0ED9  063D               	xorwf	(_copy_parentalLockBuffer^(0+384)+5),w
  3294  0EDA  1D03               	btfss	3,2
  3295  0EDB  2EFD               	goto	l6007
  3296  0EDC  0020               	movlb	0	; select bank0
  3297  0EDD  190D               	btfsc	13,2	;volatile
  3298  0EDE  2EFD               	goto	l6007
  3299  0EDF  0022               	movlb	2	; select bank2
  3300  0EE0  0826               	movf	_M5^(0+256),w
  3301  0EE1  0427               	iorwf	(_M5+1)^(0+256),w
  3302  0EE2  1D03               	btfss	3,2
  3303  0EE3  2EFD               	goto	l6007
  3304                           
  3305                           ;main.c: 744: {
  3306                           ;main.c: 745: if(man==1)
  3307  0EE4  0025               	movlb	5	; select bank5
  3308  0EE5  035A               	decf	main@man^(0+640),w
  3309  0EE6  045B               	iorwf	(main@man+1)^(0+640),w
  3310  0EE7  1D03               	btfss	3,2
  3311  0EE8  2EF6               	goto	l6003
  3312                           
  3313                           ;main.c: 746: {
  3314                           ;main.c: 747: SwitchOnStatustToGatway('5');
  3315  0EE9  3035               	movlw	53
  3316  0EEA  0020               	movlb	0	; select bank0
  3317  0EEB  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3318  0EEC  3000               	movlw	0
  3319  0EED  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3320  0EEE  3195  25E0  318B   	fcall	_SwitchOnStatustToGatway
  3321                           
  3322                           ;main.c: 748: TransmissionIndicationLedBlinking();
  3323  0EF1  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3324                           
  3325                           ;main.c: 749: PORTGbits.RG4=1;
  3326  0EF4  0025               	movlb	5	; select bank5
  3327  0EF5  160D               	bsf	13,4	;volatile
  3328  0EF6                     l6003:	
  3329                           
  3330                           ;main.c: 750: }
  3331                           ;main.c: 751: man=0;
  3332  0EF6  01DA               	clrf	main@man^(0+640)
  3333  0EF7  01DB               	clrf	(main@man+1)^(0+640)
  3334                           
  3335                           ;main.c: 752: M5=1;
  3336  0EF8  3001               	movlw	1
  3337  0EF9  0022               	movlb	2	; select bank2
  3338  0EFA  00A6               	movwf	_M5^(0+256)
  3339  0EFB  3000               	movlw	0
  3340  0EFC  00A7               	movwf	(_M5^(0+256)+1)
  3341  0EFD                     l6007:	
  3342                           
  3343                           ;main.c: 754: }
  3344                           ;main.c: 756: if(copy_parentalLockBuffer[5] == '0' && PORTBbits.RB2 == 1 && M5 == 1)
  3345  0EFD  3030               	movlw	48
  3346  0EFE  0023               	movlb	3	; select bank3
  3347  0EFF  063D               	xorwf	(_copy_parentalLockBuffer^(0+384)+5),w
  3348  0F00  1D03               	btfss	3,2
  3349  0F01  2F21               	goto	l6023
  3350  0F02  0020               	movlb	0	; select bank0
  3351  0F03  1D0D               	btfss	13,2	;volatile
  3352  0F04  2F21               	goto	l6023
  3353  0F05  0022               	movlb	2	; select bank2
  3354  0F06  0326               	decf	_M5^(0+256),w
  3355  0F07  0427               	iorwf	(_M5+1)^(0+256),w
  3356  0F08  1D03               	btfss	3,2
  3357  0F09  2F21               	goto	l6023
  3358                           
  3359                           ;main.c: 757: {
  3360                           ;main.c: 758: if(man==1)
  3361  0F0A  0025               	movlb	5	; select bank5
  3362  0F0B  035A               	decf	main@man^(0+640),w
  3363  0F0C  045B               	iorwf	(main@man+1)^(0+640),w
  3364  0F0D  1D03               	btfss	3,2
  3365  0F0E  2F1C               	goto	l6019
  3366                           
  3367                           ;main.c: 759: {
  3368                           ;main.c: 761: SwitchOffStatustToGatway('5');
  3369  0F0F  3035               	movlw	53
  3370  0F10  0020               	movlb	0	; select bank0
  3371  0F11  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3372  0F12  3000               	movlw	0
  3373  0F13  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3374  0F14  3195  25AD  318B   	fcall	_SwitchOffStatustToGatway
  3375                           
  3376                           ;main.c: 762: TransmissionIndicationLedBlinking();
  3377  0F17  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3378                           
  3379                           ;main.c: 763: PORTGbits.RG4=0;
  3380  0F1A  0025               	movlb	5	; select bank5
  3381  0F1B  120D               	bcf	13,4	;volatile
  3382  0F1C                     l6019:	
  3383                           
  3384                           ;main.c: 764: }
  3385                           ;main.c: 765: man=0;
  3386  0F1C  01DA               	clrf	main@man^(0+640)
  3387  0F1D  01DB               	clrf	(main@man+1)^(0+640)
  3388                           
  3389                           ;main.c: 766: M5=0;
  3390  0F1E  0022               	movlb	2	; select bank2
  3391  0F1F  01A6               	clrf	_M5^(0+256)
  3392  0F20  01A7               	clrf	(_M5+1)^(0+256)
  3393  0F21                     l6023:	
  3394                           
  3395                           ;main.c: 768: }
  3396                           ;main.c: 771: if(copy_parentalLockBuffer[6] == '0' && PORTBbits.RB3 == 0 && M6 == 0)
  3397  0F21  3030               	movlw	48
  3398  0F22  0023               	movlb	3	; select bank3
  3399  0F23  063E               	xorwf	(_copy_parentalLockBuffer^(0+384)+6),w
  3400  0F24  1D03               	btfss	3,2
  3401  0F25  2F47               	goto	l6039
  3402  0F26  0020               	movlb	0	; select bank0
  3403  0F27  198D               	btfsc	13,3	;volatile
  3404  0F28  2F47               	goto	l6039
  3405  0F29  0022               	movlb	2	; select bank2
  3406  0F2A  0824               	movf	_M6^(0+256),w
  3407  0F2B  0425               	iorwf	(_M6+1)^(0+256),w
  3408  0F2C  1D03               	btfss	3,2
  3409  0F2D  2F47               	goto	l6039
  3410                           
  3411                           ;main.c: 772: {
  3412                           ;main.c: 773: if(man==1)
  3413  0F2E  0025               	movlb	5	; select bank5
  3414  0F2F  035A               	decf	main@man^(0+640),w
  3415  0F30  045B               	iorwf	(main@man+1)^(0+640),w
  3416  0F31  1D03               	btfss	3,2
  3417  0F32  2F40               	goto	l6035
  3418                           
  3419                           ;main.c: 774: {
  3420                           ;main.c: 775: SwitchOnStatustToGatway('6');
  3421  0F33  3036               	movlw	54
  3422  0F34  0020               	movlb	0	; select bank0
  3423  0F35  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3424  0F36  3000               	movlw	0
  3425  0F37  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3426  0F38  3195  25E0  318B   	fcall	_SwitchOnStatustToGatway
  3427                           
  3428                           ;main.c: 776: TransmissionIndicationLedBlinking();
  3429  0F3B  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3430                           
  3431                           ;main.c: 777: PORTFbits.RF6=1;
  3432  0F3E  0025               	movlb	5	; select bank5
  3433  0F3F  170C               	bsf	12,6	;volatile
  3434  0F40                     l6035:	
  3435                           
  3436                           ;main.c: 778: }
  3437                           ;main.c: 779: man=0;
  3438  0F40  01DA               	clrf	main@man^(0+640)
  3439  0F41  01DB               	clrf	(main@man+1)^(0+640)
  3440                           
  3441                           ;main.c: 780: M6=1;
  3442  0F42  3001               	movlw	1
  3443  0F43  0022               	movlb	2	; select bank2
  3444  0F44  00A4               	movwf	_M6^(0+256)
  3445  0F45  3000               	movlw	0
  3446  0F46  00A5               	movwf	(_M6^(0+256)+1)
  3447  0F47                     l6039:	
  3448                           
  3449                           ;main.c: 782: }
  3450                           ;main.c: 784: if(copy_parentalLockBuffer[6] == '0' && PORTBbits.RB3 == 1 && M6 == 1)
  3451  0F47  3030               	movlw	48
  3452  0F48  0023               	movlb	3	; select bank3
  3453  0F49  063E               	xorwf	(_copy_parentalLockBuffer^(0+384)+6),w
  3454  0F4A  1D03               	btfss	3,2
  3455  0F4B  2F6B               	goto	l6055
  3456  0F4C  0020               	movlb	0	; select bank0
  3457  0F4D  1D8D               	btfss	13,3	;volatile
  3458  0F4E  2F6B               	goto	l6055
  3459  0F4F  0022               	movlb	2	; select bank2
  3460  0F50  0324               	decf	_M6^(0+256),w
  3461  0F51  0425               	iorwf	(_M6+1)^(0+256),w
  3462  0F52  1D03               	btfss	3,2
  3463  0F53  2F6B               	goto	l6055
  3464                           
  3465                           ;main.c: 785: {
  3466                           ;main.c: 786: if(man==1)
  3467  0F54  0025               	movlb	5	; select bank5
  3468  0F55  035A               	decf	main@man^(0+640),w
  3469  0F56  045B               	iorwf	(main@man+1)^(0+640),w
  3470  0F57  1D03               	btfss	3,2
  3471  0F58  2F66               	goto	l6051
  3472                           
  3473                           ;main.c: 787: {
  3474                           ;main.c: 789: SwitchOffStatustToGatway('6');
  3475  0F59  3036               	movlw	54
  3476  0F5A  0020               	movlb	0	; select bank0
  3477  0F5B  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3478  0F5C  3000               	movlw	0
  3479  0F5D  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3480  0F5E  3195  25AD  318B   	fcall	_SwitchOffStatustToGatway
  3481                           
  3482                           ;main.c: 790: TransmissionIndicationLedBlinking();
  3483  0F61  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3484                           
  3485                           ;main.c: 791: PORTFbits.RF6=0;
  3486  0F64  0025               	movlb	5	; select bank5
  3487  0F65  130C               	bcf	12,6	;volatile
  3488  0F66                     l6051:	
  3489                           
  3490                           ;main.c: 792: }
  3491                           ;main.c: 793: man=0;
  3492  0F66  01DA               	clrf	main@man^(0+640)
  3493  0F67  01DB               	clrf	(main@man+1)^(0+640)
  3494                           
  3495                           ;main.c: 794: M6=0;
  3496  0F68  0022               	movlb	2	; select bank2
  3497  0F69  01A4               	clrf	_M6^(0+256)
  3498  0F6A  01A5               	clrf	(_M6+1)^(0+256)
  3499  0F6B                     l6055:	
  3500                           
  3501                           ;main.c: 796: }
  3502                           ;main.c: 800: if(copy_parentalLockBuffer[7] == '0' && PORTBbits.RB4 == 0 && M7 == 0)
  3503  0F6B  3030               	movlw	48
  3504  0F6C  0023               	movlb	3	; select bank3
  3505  0F6D  063F               	xorwf	(_copy_parentalLockBuffer^(0+384)+7),w
  3506  0F6E  1D03               	btfss	3,2
  3507  0F6F  2F91               	goto	l6071
  3508  0F70  0020               	movlb	0	; select bank0
  3509  0F71  1A0D               	btfsc	13,4	;volatile
  3510  0F72  2F91               	goto	l6071
  3511  0F73  0022               	movlb	2	; select bank2
  3512  0F74  0822               	movf	_M7^(0+256),w
  3513  0F75  0423               	iorwf	(_M7+1)^(0+256),w
  3514  0F76  1D03               	btfss	3,2
  3515  0F77  2F91               	goto	l6071
  3516                           
  3517                           ;main.c: 801: {
  3518                           ;main.c: 802: if(man==1)
  3519  0F78  0025               	movlb	5	; select bank5
  3520  0F79  035A               	decf	main@man^(0+640),w
  3521  0F7A  045B               	iorwf	(main@man+1)^(0+640),w
  3522  0F7B  1D03               	btfss	3,2
  3523  0F7C  2F8A               	goto	l6067
  3524                           
  3525                           ;main.c: 803: {
  3526                           ;main.c: 804: SwitchOnStatustToGatway('7');
  3527  0F7D  3037               	movlw	55
  3528  0F7E  0020               	movlb	0	; select bank0
  3529  0F7F  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3530  0F80  3000               	movlw	0
  3531  0F81  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3532  0F82  3195  25E0  318B   	fcall	_SwitchOnStatustToGatway
  3533                           
  3534                           ;main.c: 805: TransmissionIndicationLedBlinking();
  3535  0F85  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3536                           
  3537                           ;main.c: 806: PORTFbits.RF5=1;
  3538  0F88  0025               	movlb	5	; select bank5
  3539  0F89  168C               	bsf	12,5	;volatile
  3540  0F8A                     l6067:	
  3541                           
  3542                           ;main.c: 807: }
  3543                           ;main.c: 808: man=0;
  3544  0F8A  01DA               	clrf	main@man^(0+640)
  3545  0F8B  01DB               	clrf	(main@man+1)^(0+640)
  3546                           
  3547                           ;main.c: 809: M7=1;
  3548  0F8C  3001               	movlw	1
  3549  0F8D  0022               	movlb	2	; select bank2
  3550  0F8E  00A2               	movwf	_M7^(0+256)
  3551  0F8F  3000               	movlw	0
  3552  0F90  00A3               	movwf	(_M7^(0+256)+1)
  3553  0F91                     l6071:	
  3554                           
  3555                           ;main.c: 811: }
  3556                           ;main.c: 813: if(copy_parentalLockBuffer[7] == '0' && PORTBbits.RB4 == 1 && M7 == 1)
  3557  0F91  3030               	movlw	48
  3558  0F92  0023               	movlb	3	; select bank3
  3559  0F93  063F               	xorwf	(_copy_parentalLockBuffer^(0+384)+7),w
  3560  0F94  1D03               	btfss	3,2
  3561  0F95  2FB5               	goto	l6087
  3562  0F96  0020               	movlb	0	; select bank0
  3563  0F97  1E0D               	btfss	13,4	;volatile
  3564  0F98  2FB5               	goto	l6087
  3565  0F99  0022               	movlb	2	; select bank2
  3566  0F9A  0322               	decf	_M7^(0+256),w
  3567  0F9B  0423               	iorwf	(_M7+1)^(0+256),w
  3568  0F9C  1D03               	btfss	3,2
  3569  0F9D  2FB5               	goto	l6087
  3570                           
  3571                           ;main.c: 814: {
  3572                           ;main.c: 815: if(man==1)
  3573  0F9E  0025               	movlb	5	; select bank5
  3574  0F9F  035A               	decf	main@man^(0+640),w
  3575  0FA0  045B               	iorwf	(main@man+1)^(0+640),w
  3576  0FA1  1D03               	btfss	3,2
  3577  0FA2  2FB0               	goto	l6083
  3578                           
  3579                           ;main.c: 816: {
  3580                           ;main.c: 818: SwitchOffStatustToGatway('7');
  3581  0FA3  3037               	movlw	55
  3582  0FA4  0020               	movlb	0	; select bank0
  3583  0FA5  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3584  0FA6  3000               	movlw	0
  3585  0FA7  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3586  0FA8  3195  25AD  318B   	fcall	_SwitchOffStatustToGatway
  3587                           
  3588                           ;main.c: 819: TransmissionIndicationLedBlinking();
  3589  0FAB  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3590                           
  3591                           ;main.c: 820: PORTFbits.RF5=0;
  3592  0FAE  0025               	movlb	5	; select bank5
  3593  0FAF  128C               	bcf	12,5	;volatile
  3594  0FB0                     l6083:	
  3595                           
  3596                           ;main.c: 821: }
  3597                           ;main.c: 822: man=0;
  3598  0FB0  01DA               	clrf	main@man^(0+640)
  3599  0FB1  01DB               	clrf	(main@man+1)^(0+640)
  3600                           
  3601                           ;main.c: 823: M7=0;
  3602  0FB2  0022               	movlb	2	; select bank2
  3603  0FB3  01A2               	clrf	_M7^(0+256)
  3604  0FB4  01A3               	clrf	(_M7+1)^(0+256)
  3605  0FB5                     l6087:	
  3606                           
  3607                           ;main.c: 825: }
  3608                           ;main.c: 830: if(copy_parentalLockBuffer[8] == '0' && PORTBbits.RB5 == 0 && M8 == 0)
  3609  0FB5  3030               	movlw	48
  3610  0FB6  0023               	movlb	3	; select bank3
  3611  0FB7  0640               	xorwf	(_copy_parentalLockBuffer^(0+384)+8),w
  3612  0FB8  1D03               	btfss	3,2
  3613  0FB9  2FDB               	goto	l6103
  3614  0FBA  0020               	movlb	0	; select bank0
  3615  0FBB  1A8D               	btfsc	13,5	;volatile
  3616  0FBC  2FDB               	goto	l6103
  3617  0FBD  0022               	movlb	2	; select bank2
  3618  0FBE  0820               	movf	_M8^(0+256),w
  3619  0FBF  0421               	iorwf	(_M8+1)^(0+256),w
  3620  0FC0  1D03               	btfss	3,2
  3621  0FC1  2FDB               	goto	l6103
  3622                           
  3623                           ;main.c: 831: {
  3624                           ;main.c: 832: if(man==1)
  3625  0FC2  0025               	movlb	5	; select bank5
  3626  0FC3  035A               	decf	main@man^(0+640),w
  3627  0FC4  045B               	iorwf	(main@man+1)^(0+640),w
  3628  0FC5  1D03               	btfss	3,2
  3629  0FC6  2FD4               	goto	l6099
  3630                           
  3631                           ;main.c: 833: {
  3632                           ;main.c: 834: SwitchOnStatustToGatway('8');
  3633  0FC7  3038               	movlw	56
  3634  0FC8  0020               	movlb	0	; select bank0
  3635  0FC9  00A0               	movwf	SwitchOnStatustToGatway@SwitchOnNumber
  3636  0FCA  3000               	movlw	0
  3637  0FCB  00A1               	movwf	SwitchOnStatustToGatway@SwitchOnNumber+1
  3638  0FCC  3195  25E0  318B   	fcall	_SwitchOnStatustToGatway
  3639                           
  3640                           ;main.c: 835: TransmissionIndicationLedBlinking();
  3641  0FCF  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3642                           
  3643                           ;main.c: 836: PORTFbits.RF4=1;
  3644  0FD2  0025               	movlb	5	; select bank5
  3645  0FD3  160C               	bsf	12,4	;volatile
  3646  0FD4                     l6099:	
  3647                           
  3648                           ;main.c: 837: }
  3649                           ;main.c: 838: man=0;
  3650  0FD4  01DA               	clrf	main@man^(0+640)
  3651  0FD5  01DB               	clrf	(main@man+1)^(0+640)
  3652                           
  3653                           ;main.c: 839: M8=1;
  3654  0FD6  3001               	movlw	1
  3655  0FD7  0022               	movlb	2	; select bank2
  3656  0FD8  00A0               	movwf	_M8^(0+256)
  3657  0FD9  3000               	movlw	0
  3658  0FDA  00A1               	movwf	(_M8^(0+256)+1)
  3659  0FDB                     l6103:	
  3660                           
  3661                           ;main.c: 841: }
  3662                           ;main.c: 843: if(copy_parentalLockBuffer[8] == '0' && PORTBbits.RB5 == 1 && M8 == 1)
  3663  0FDB  3030               	movlw	48
  3664  0FDC  0023               	movlb	3	; select bank3
  3665  0FDD  0640               	xorwf	(_copy_parentalLockBuffer^(0+384)+8),w
  3666  0FDE  1D03               	btfss	3,2
  3667  0FDF  2B81               	goto	l5727
  3668  0FE0  0020               	movlb	0	; select bank0
  3669  0FE1  1E8D               	btfss	13,5	;volatile
  3670  0FE2  2B81               	goto	l5727
  3671  0FE3  0022               	movlb	2	; select bank2
  3672  0FE4  0320               	decf	_M8^(0+256),w
  3673  0FE5  0421               	iorwf	(_M8+1)^(0+256),w
  3674  0FE6  1D03               	btfss	3,2
  3675  0FE7  2B81               	goto	l5727
  3676                           
  3677                           ;main.c: 844: {
  3678                           ;main.c: 845: if(man==1)
  3679  0FE8  0025               	movlb	5	; select bank5
  3680  0FE9  035A               	decf	main@man^(0+640),w
  3681  0FEA  045B               	iorwf	(main@man+1)^(0+640),w
  3682  0FEB  1D03               	btfss	3,2
  3683  0FEC  2FFA               	goto	l6115
  3684                           
  3685                           ;main.c: 846: {
  3686                           ;main.c: 848: SwitchOffStatustToGatway('8');
  3687  0FED  3038               	movlw	56
  3688  0FEE  0020               	movlb	0	; select bank0
  3689  0FEF  00A0               	movwf	SwitchOffStatustToGatway@SwitchOffNumber
  3690  0FF0  3000               	movlw	0
  3691  0FF1  00A1               	movwf	SwitchOffStatustToGatway@SwitchOffNumber+1
  3692  0FF2  3195  25AD  318B   	fcall	_SwitchOffStatustToGatway
  3693                           
  3694                           ;main.c: 849: TransmissionIndicationLedBlinking();
  3695  0FF5  3192  222C  318B   	fcall	_TransmissionIndicationLedBlinking
  3696                           
  3697                           ;main.c: 850: PORTFbits.RF4=0;
  3698  0FF8  0025               	movlb	5	; select bank5
  3699  0FF9  120C               	bcf	12,4	;volatile
  3700  0FFA                     l6115:	
  3701                           
  3702                           ;main.c: 851: }
  3703                           ;main.c: 852: man=0;
  3704  0FFA  01DA               	clrf	main@man^(0+640)
  3705  0FFB  01DB               	clrf	(main@man+1)^(0+640)
  3706                           
  3707                           ;main.c: 853: M8=0;
  3708  0FFC  0022               	movlb	2	; select bank2
  3709  0FFD  01A0               	clrf	_M8^(0+256)
  3710  0FFE  01A1               	clrf	(_M8+1)^(0+256)
  3711  0FFF  2B81               	goto	l5727
  3712  1000                     __end_of_main:	
  3713                           
  3714                           	psect	swtext1
  3715  1000                     __pswtext1:	
  3716  1000                     S6249:	
  3717  1000  318C  2C13         	ljmp	l5769
  3718  1002  318C  2C51         	ljmp	l5785
  3719  1004  318C  2C58         	ljmp	l5787
  3720  1006  318C  2C96         	ljmp	l5803
  3721  1008  318C  2CAD         	ljmp	l5807
  3722  100A  318C  2CC4         	ljmp	l5811
  3723  100C  318C  2CDB         	ljmp	l5815
  3724  100E  318D  2D1B         	ljmp	l5831
  3725                           
  3726                           	psect	text1
  3727  0804                     __ptext1:	
  3728 ;; *************** function _strtok *****************
  3729 ;; Defined at:
  3730 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtok.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;  s1              1    wreg     PTR unsigned char 
  3733 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3734 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
  3735 ;;		 -> STR_18(2), STR_16(2), 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  s1              1   19[BANK0 ] PTR unsigned char 
  3738 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      PTR unsigned char 
  3741 ;; Registers used:
  3742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3748 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3749 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0
  3750 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  3751 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  3752 ;;Total ram usage:        6 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    4
  3755 ;; This function calls:
  3756 ;;		_strcspn
  3757 ;;		_strspn
  3758 ;; This function is called by:
  3759 ;;		_main
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           
  3764                           ;psect for function _strtok
  3765  0804                     _strtok:	
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3769                           ;strtok@s1 stored from wreg
  3770  0804  0020               	movlb	0	; select bank0
  3771  0805  00B3               	movwf	strtok@s1
  3772  0806  0833               	movf	strtok@s1,w
  3773  0807  1D03               	btfss	3,2
  3774  0808  280D               	goto	l5635
  3775  0809  085C               	movf	strtok@sp,w
  3776  080A  00B0               	movwf	??_strtok
  3777  080B  0830               	movf	??_strtok,w
  3778  080C  00B3               	movwf	strtok@s1
  3779  080D                     l5635:	
  3780  080D  0833               	movf	strtok@s1,w
  3781  080E  1D03               	btfss	3,2
  3782  080F  2812               	goto	l5641
  3783  0810  3000               	movlw	0
  3784  0811  0008               	return
  3785  0812                     l5641:	
  3786  0812  082F               	movf	strtok@s2+1,w
  3787  0813  00A8               	movwf	strspn@s2+1
  3788  0814  082E               	movf	strtok@s2,w
  3789  0815  00A7               	movwf	strspn@s2
  3790  0816  0833               	movf	strtok@s1,w
  3791  0817  3195  2519  3188   	fcall	_strspn
  3792  081A  0020               	movlb	0	; select bank0
  3793  081B  0827               	movf	?_strspn,w
  3794  081C  00B0               	movwf	??_strtok
  3795  081D  0830               	movf	??_strtok,w
  3796  081E  07B3               	addwf	strtok@s1,f
  3797  081F  0833               	movf	strtok@s1,w
  3798  0820  0086               	movwf	6
  3799  0821  3002               	movlw	2	; select bank4/5
  3800  0822  0087               	movwf	7
  3801  0823  0801               	movf	1,w
  3802  0824  1D03               	btfss	3,2
  3803  0825  2829               	goto	l5649
  3804  0826  01DC               	clrf	strtok@sp
  3805  0827  3000               	movlw	0
  3806  0828  0008               	return
  3807  0829                     l5649:	
  3808  0829  082F               	movf	strtok@s2+1,w
  3809  082A  00A8               	movwf	strcspn@s2+1
  3810  082B  082E               	movf	strtok@s2,w
  3811  082C  00A7               	movwf	strcspn@s2
  3812  082D  0833               	movf	strtok@s1,w
  3813  082E  3194  24E9  3188   	fcall	_strcspn
  3814  0831  0020               	movlb	0	; select bank0
  3815  0832  0827               	movf	?_strcspn,w
  3816  0833  00B0               	movwf	??_strtok
  3817  0834  0828               	movf	?_strcspn+1,w
  3818  0835  00B1               	movwf	??_strtok+1
  3819  0836  0833               	movf	strtok@s1,w
  3820  0837  0730               	addwf	??_strtok,w
  3821  0838  00B2               	movwf	??_strtok+2
  3822  0839  0832               	movf	??_strtok+2,w
  3823  083A  00DC               	movwf	strtok@sp
  3824  083B  085C               	movf	strtok@sp,w
  3825  083C  0086               	movwf	6
  3826  083D  3002               	movlw	2	; select bank4/5
  3827  083E  0087               	movwf	7
  3828  083F  0801               	movf	1,w
  3829  0840  1903               	btfsc	3,2
  3830  0841  284C               	goto	l5657
  3831  0842  085C               	movf	strtok@sp,w
  3832  0843  0086               	movwf	6
  3833  0844  3002               	movlw	2	; select bank4/5
  3834  0845  0087               	movwf	7
  3835  0846  0181               	clrf	1
  3836  0847  3001               	movlw	1
  3837  0848  00B0               	movwf	??_strtok
  3838  0849  0830               	movf	??_strtok,w
  3839  084A  07DC               	addwf	strtok@sp,f
  3840  084B  284D               	goto	l5659
  3841  084C                     l5657:	
  3842  084C  01DC               	clrf	strtok@sp
  3843  084D                     l5659:	
  3844  084D  0833               	movf	strtok@s1,w
  3845  084E  0008               	return
  3846  084F                     __end_of_strtok:	
  3847                           
  3848                           	psect	text2
  3849  1519                     __ptext2:	
  3850 ;; *************** function _strspn *****************
  3851 ;; Defined at:
  3852 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strspn.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  s1              1    wreg     PTR const unsigned char 
  3855 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3856 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  3857 ;;		 -> STR_18(2), STR_16(2), 
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  3860 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3861 ;;  i               2   11[BANK0 ] unsigned int 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  2    7[BANK0 ] unsigned int 
  3864 ;; Registers used:
  3865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3871 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3872 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3874 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  3875 ;;Total ram usage:        7 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    3
  3878 ;; This function calls:
  3879 ;;		_strchr
  3880 ;; This function is called by:
  3881 ;;		_strtok
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           
  3886                           ;psect for function _strspn
  3887  1519                     _strspn:	
  3888                           
  3889                           ;incstack = 0
  3890                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3891                           ;strspn@s1 stored from wreg
  3892  1519  0020               	movlb	0	; select bank0
  3893  151A  00AD               	movwf	strspn@s1
  3894  151B  01AB               	clrf	strspn@i
  3895  151C  01AC               	clrf	strspn@i+1
  3896  151D  2D26               	goto	l5231
  3897  151E                     l5229:	
  3898  151E  3001               	movlw	1
  3899  151F  00A9               	movwf	??_strspn
  3900  1520  0829               	movf	??_strspn,w
  3901  1521  07AD               	addwf	strspn@s1,f
  3902  1522  3001               	movlw	1
  3903  1523  07AB               	addwf	strspn@i,f
  3904  1524  3000               	movlw	0
  3905  1525  3DAC               	addwfc	strspn@i+1,f
  3906  1526                     l5231:	
  3907  1526  082D               	movf	strspn@s1,w
  3908  1527  0086               	movwf	6
  3909  1528  3002               	movlw	2	; select bank4/5
  3910  1529  0087               	movwf	7
  3911  152A  0801               	movf	1,w
  3912  152B  1903               	btfsc	3,2
  3913  152C  2D44               	goto	l5235
  3914  152D  0828               	movf	strspn@s2+1,w
  3915  152E  00A1               	movwf	strchr@ptr+1
  3916  152F  0827               	movf	strspn@s2,w
  3917  1530  00A0               	movwf	strchr@ptr
  3918  1531  082D               	movf	strspn@s1,w
  3919  1532  0086               	movwf	6
  3920  1533  3002               	movlw	2	; select bank4/5
  3921  1534  0087               	movwf	7
  3922  1535  0801               	movf	1,w
  3923  1536  00A9               	movwf	??_strspn
  3924  1537  01AA               	clrf	??_strspn+1
  3925  1538  0829               	movf	??_strspn,w
  3926  1539  00A2               	movwf	strchr@chr
  3927  153A  082A               	movf	??_strspn+1,w
  3928  153B  00A3               	movwf	strchr@chr+1
  3929  153C  3192  22A8  3195   	fcall	_strchr
  3930  153F  0020               	movlb	0	; select bank0
  3931  1540  0820               	movf	?_strchr,w
  3932  1541  0421               	iorwf	?_strchr+1,w
  3933  1542  1D03               	btfss	3,2
  3934  1543  2D1E               	goto	l5229
  3935  1544                     l5235:	
  3936  1544  082C               	movf	strspn@i+1,w
  3937  1545  00A8               	movwf	?_strspn+1
  3938  1546  082B               	movf	strspn@i,w
  3939  1547  00A7               	movwf	?_strspn
  3940  1548  0008               	return
  3941  1549                     __end_of_strspn:	
  3942                           
  3943                           	psect	text3
  3944  14E9                     __ptext3:	
  3945 ;; *************** function _strcspn *****************
  3946 ;; Defined at:
  3947 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  s1              1    wreg     PTR const unsigned char 
  3950 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3951 ;;  s2              2    7[BANK0 ] PTR const unsigned char 
  3952 ;;		 -> STR_18(2), STR_16(2), 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  3955 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  3956 ;;  i               2   11[BANK0 ] unsigned int 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  2    7[BANK0 ] unsigned int 
  3959 ;; Registers used:
  3960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3966 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3967 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3968 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3969 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  3970 ;;Total ram usage:        7 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    3
  3973 ;; This function calls:
  3974 ;;		_strchr
  3975 ;; This function is called by:
  3976 ;;		_strtok
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _strcspn
  3982  14E9                     _strcspn:	
  3983                           
  3984                           ;incstack = 0
  3985                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3986                           ;strcspn@s1 stored from wreg
  3987  14E9  0020               	movlb	0	; select bank0
  3988  14EA  00AD               	movwf	strcspn@s1
  3989  14EB  01AB               	clrf	strcspn@i
  3990  14EC  01AC               	clrf	strcspn@i+1
  3991  14ED  2CF6               	goto	l5243
  3992  14EE                     l5241:	
  3993  14EE  3001               	movlw	1
  3994  14EF  00A9               	movwf	??_strcspn
  3995  14F0  0829               	movf	??_strcspn,w
  3996  14F1  07AD               	addwf	strcspn@s1,f
  3997  14F2  3001               	movlw	1
  3998  14F3  07AB               	addwf	strcspn@i,f
  3999  14F4  3000               	movlw	0
  4000  14F5  3DAC               	addwfc	strcspn@i+1,f
  4001  14F6                     l5243:	
  4002  14F6  082D               	movf	strcspn@s1,w
  4003  14F7  0086               	movwf	6
  4004  14F8  3002               	movlw	2	; select bank4/5
  4005  14F9  0087               	movwf	7
  4006  14FA  0801               	movf	1,w
  4007  14FB  1903               	btfsc	3,2
  4008  14FC  2D14               	goto	l5247
  4009  14FD  0828               	movf	strcspn@s2+1,w
  4010  14FE  00A1               	movwf	strchr@ptr+1
  4011  14FF  0827               	movf	strcspn@s2,w
  4012  1500  00A0               	movwf	strchr@ptr
  4013  1501  082D               	movf	strcspn@s1,w
  4014  1502  0086               	movwf	6
  4015  1503  3002               	movlw	2	; select bank4/5
  4016  1504  0087               	movwf	7
  4017  1505  0801               	movf	1,w
  4018  1506  00A9               	movwf	??_strcspn
  4019  1507  01AA               	clrf	??_strcspn+1
  4020  1508  0829               	movf	??_strcspn,w
  4021  1509  00A2               	movwf	strchr@chr
  4022  150A  082A               	movf	??_strcspn+1,w
  4023  150B  00A3               	movwf	strchr@chr+1
  4024  150C  3192  22A8  3194   	fcall	_strchr
  4025  150F  0020               	movlb	0	; select bank0
  4026  1510  0820               	movf	?_strchr,w
  4027  1511  0421               	iorwf	?_strchr+1,w
  4028  1512  1903               	btfsc	3,2
  4029  1513  2CEE               	goto	l5241
  4030  1514                     l5247:	
  4031  1514  082C               	movf	strcspn@i+1,w
  4032  1515  00A8               	movwf	?_strcspn+1
  4033  1516  082B               	movf	strcspn@i,w
  4034  1517  00A7               	movwf	?_strcspn
  4035  1518  0008               	return
  4036  1519                     __end_of_strcspn:	
  4037                           
  4038                           	psect	text4
  4039  12A8                     __ptext4:	
  4040 ;; *************** function _strchr *****************
  4041 ;; Defined at:
  4042 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  4045 ;;		 -> STR_18(2), STR_16(2), 
  4046 ;;  chr             2    2[BANK0 ] int 
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;		None
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  2    0[BANK0 ] PTR unsigned char 
  4051 ;; Registers used:
  4052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4058 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  4059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  4060 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  4061 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  4062 ;;Total ram usage:        7 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    2
  4065 ;; This function calls:
  4066 ;;		Nothing
  4067 ;; This function is called by:
  4068 ;;		_strcspn
  4069 ;;		_strspn
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           
  4074                           ;psect for function _strchr
  4075  12A8                     _strchr:	
  4076  12A8                     l1140:	
  4077                           ;incstack = 0
  4078                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  4079                           
  4080  12A8  0020               	movlb	0	; select bank0
  4081  12A9  0820               	movf	strchr@ptr,w
  4082  12AA  0084               	movwf	4
  4083  12AB  0821               	movf	strchr@ptr+1,w
  4084  12AC  0085               	movwf	5
  4085  12AD  0800               	movf	0,w	;code access
  4086  12AE  0622               	xorwf	strchr@chr,w
  4087  12AF  1903               	btfsc	3,2
  4088  12B0  0008               	return
  4089  12B1  0821               	movf	strchr@ptr+1,w
  4090  12B2  00A5               	movwf	??_strchr+1
  4091  12B3  0820               	movf	strchr@ptr,w
  4092  12B4  00A4               	movwf	??_strchr
  4093  12B5  0AA0               	incf	strchr@ptr,f
  4094  12B6  1903               	skipnz
  4095  12B7  0AA1               	incf	strchr@ptr+1,f
  4096  12B8  0824               	movf	??_strchr,w
  4097  12B9  0084               	movwf	4
  4098  12BA  0825               	movf	??_strchr+1,w
  4099  12BB  0085               	movwf	5
  4100  12BC  0012               	moviw fsr0++
  4101  12BD  1D03               	btfss	3,2
  4102  12BE  2AA8               	goto	l1140
  4103  12BF  01A0               	clrf	?_strchr
  4104  12C0  01A1               	clrf	?_strchr+1
  4105  12C1  0008               	return
  4106  12C2                     __end_of_strchr:	
  4107                           
  4108                           	psect	text5
  4109  1461                     __ptext5:	
  4110 ;; *************** function _strcmp *****************
  4111 ;; Defined at:
  4112 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  s1              1    wreg     PTR const unsigned char 
  4115 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4116 ;;  s2              2    0[BANK0 ] PTR const unsigned char 
  4117 ;;		 -> STR_17(4), 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  s1              1    4[BANK0 ] PTR const unsigned char 
  4120 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4121 ;;  r               1    3[BANK0 ] char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  2    0[BANK0 ] int 
  4124 ;; Registers used:
  4125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4133 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  4134 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  4135 ;;Total ram usage:        5 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    2
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_main
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           
  4146                           ;psect for function _strcmp
  4147  1461                     _strcmp:	
  4148                           
  4149                           ;incstack = 0
  4150                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  4151                           ;strcmp@s1 stored from wreg
  4152  1461  0020               	movlb	0	; select bank0
  4153  1462  00A4               	movwf	strcmp@s1
  4154  1463  2C6C               	goto	l5667
  4155  1464                     l5665:	
  4156  1464  3001               	movlw	1
  4157  1465  00A2               	movwf	??_strcmp
  4158  1466  0822               	movf	??_strcmp,w
  4159  1467  07A4               	addwf	strcmp@s1,f
  4160  1468  3001               	movlw	1
  4161  1469  07A0               	addwf	strcmp@s2,f
  4162  146A  3000               	movlw	0
  4163  146B  3DA1               	addwfc	strcmp@s2+1,f
  4164  146C                     l5667:	
  4165  146C  0824               	movf	strcmp@s1,w
  4166  146D  0086               	movwf	6
  4167  146E  3002               	movlw	2	; select bank4/5
  4168  146F  0087               	movwf	7
  4169  1470  0820               	movf	strcmp@s2,w
  4170  1471  0084               	movwf	4
  4171  1472  0821               	movf	strcmp@s2+1,w
  4172  1473  0085               	movwf	5
  4173  1474  0800               	movf	0,w	;code access
  4174  1475  3AFF               	xorlw	255
  4175  1476  3E01               	addlw	1
  4176  1477  0701               	addwf	1,w
  4177  1478  00A2               	movwf	??_strcmp
  4178  1479  0822               	movf	??_strcmp,w
  4179  147A  00A3               	movwf	strcmp@r
  4180  147B  0823               	movf	strcmp@r,w
  4181  147C  1D03               	btfss	3,2
  4182  147D  2C85               	goto	l5671
  4183  147E  0824               	movf	strcmp@s1,w
  4184  147F  0086               	movwf	6
  4185  1480  3002               	movlw	2	; select bank4/5
  4186  1481  0087               	movwf	7
  4187  1482  0801               	movf	1,w
  4188  1483  1D03               	btfss	3,2
  4189  1484  2C64               	goto	l5665
  4190  1485                     l5671:	
  4191  1485  0823               	movf	strcmp@r,w
  4192  1486  00A0               	movwf	?_strcmp
  4193  1487  01A1               	clrf	?_strcmp+1
  4194  1488  1BA0               	btfsc	?_strcmp,7
  4195  1489  03A1               	decf	?_strcmp+1,f
  4196  148A  0008               	return
  4197  148B                     __end_of_strcmp:	
  4198                           
  4199                           	psect	text6
  4200  1315                     __ptext6:	
  4201 ;; *************** function _errorsMain *****************
  4202 ;; Defined at:
  4203 ;;		line 1209 in file "main.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  errNum          2    0[BANK0 ] PTR const unsigned char 
  4206 ;;		 -> STR_19(5), 
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;  Tx_count        2    2[BANK0 ] int 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4218 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  4219 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  4221 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  4222 ;;Total ram usage:        4 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    2
  4225 ;; This function calls:
  4226 ;;		Nothing
  4227 ;; This function is called by:
  4228 ;;		_main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _errorsMain
  4234  1315                     _errorsMain:	
  4235                           
  4236                           ;main.c: 1210: int Tx_count=0;
  4237                           
  4238                           ;incstack = 0
  4239                           ; Regs used in _errorsMain: [wreg-fsr0h+status,2+status,0+pclath]
  4240  1315  0020               	movlb	0	; select bank0
  4241  1316  01A2               	clrf	errorsMain@Tx_count
  4242  1317  01A3               	clrf	errorsMain@Tx_count+1
  4243  1318                     l5683:	
  4244                           ;main.c: 1211: while(Tx_count!=4)
  4245                           
  4246  1318  3004               	movlw	4
  4247  1319  0622               	xorwf	errorsMain@Tx_count,w
  4248  131A  0423               	iorwf	errorsMain@Tx_count+1,w
  4249  131B  1903               	btfsc	3,2
  4250  131C  0008               	return
  4251  131D                     l594:	
  4252                           ;main.c: 1212: {
  4253                           ;main.c: 1213: while (!TX1STAbits.TRMT);
  4254                           
  4255  131D  0023               	movlb	3	; select bank3
  4256  131E  1C9E               	btfss	30,1	;volatile
  4257  131F  2B1D               	goto	l594
  4258                           
  4259                           ;main.c: 1214: TX1REG = *errNum;
  4260  1320  0020               	movlb	0	; select bank0
  4261  1321  0820               	movf	errorsMain@errNum,w
  4262  1322  0084               	movwf	4
  4263  1323  0821               	movf	errorsMain@errNum+1,w
  4264  1324  0085               	movwf	5
  4265  1325  0800               	movf	0,w	;code access
  4266  1326  0023               	movlb	3	; select bank3
  4267  1327  009A               	movwf	26	;volatile
  4268                           
  4269                           ;main.c: 1215: *errNum++;
  4270  1328  3001               	movlw	1
  4271  1329  0020               	movlb	0	; select bank0
  4272  132A  07A0               	addwf	errorsMain@errNum,f
  4273  132B  3000               	movlw	0
  4274  132C  3DA1               	addwfc	errorsMain@errNum+1,f
  4275                           
  4276                           ;main.c: 1216: Tx_count++;
  4277  132D  3001               	movlw	1
  4278  132E  07A2               	addwf	errorsMain@Tx_count,f
  4279  132F  3000               	movlw	0
  4280  1330  3DA3               	addwfc	errorsMain@Tx_count+1,f
  4281  1331  2B18               	goto	l5683
  4282  1332                     __end_of_errorsMain:	
  4283                           
  4284                           	psect	text7
  4285  1549                     __ptext7:	
  4286 ;; *************** function _copyReceivedDataBuffer *****************
  4287 ;; Defined at:
  4288 ;;		line 1293 in file "main.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  dataBufferCo    2    1[BANK0 ] int 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  4303 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  4304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  4305 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
  4306 ;;Total ram usage:        3 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    2
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_main
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           
  4317                           ;psect for function _copyReceivedDataBuffer
  4318  1549                     _copyReceivedDataBuffer:	
  4319                           
  4320                           ;main.c: 1294: int dataBufferCounter=2;
  4321                           
  4322                           ;incstack = 0
  4323                           ; Regs used in _copyReceivedDataBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  4324  1549  3002               	movlw	2
  4325  154A  0020               	movlb	0	; select bank0
  4326  154B  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  4327  154C  3000               	movlw	0
  4328  154D  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  4329                           
  4330                           ;main.c: 1295: for(dataBufferCounter=2;dataBufferCounter<9;dataBufferCounter++){
  4331  154E  3002               	movlw	2
  4332  154F  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  4333  1550  3000               	movlw	0
  4334  1551  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  4335  1552                     L1:	
  4336  1552  0822               	movf	copyReceivedDataBuffer@dataBufferCounter+1,w
  4337  1553  3A80               	xorlw	128
  4338  1554  00A0               	movwf	??_copyReceivedDataBuffer
  4339  1555  3080               	movlw	128
  4340  1556  0220               	subwf	??_copyReceivedDataBuffer,w
  4341  1557  1D03               	skipz
  4342  1558  2D5B               	goto	u5545
  4343  1559  3009               	movlw	9
  4344  155A  0221               	subwf	copyReceivedDataBuffer@dataBufferCounter,w
  4345  155B                     u5545:	
  4346  155B  1803               	btfsc	3,0
  4347  155C  0008               	return
  4348                           
  4349                           ;main.c: 1296: tempReceivedDataBuffer[dataBufferCounter-2]=copymainReceivedDataBuffer[da
      +                          taBufferCounter];
  4350  155D  0020               	movlb	0	; select bank0
  4351  155E  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4352  155F  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
  4353  1560  0086               	movwf	6
  4354  1561  3002               	movlw	2	; select bank4/5
  4355  1562  0087               	movwf	7
  4356  1563  0801               	movf	1,w
  4357  1564  00A0               	movwf	??_copyReceivedDataBuffer
  4358  1565  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4359  1566  3EFE               	addlw	254
  4360  1567  3EA0               	addlw	(low (_tempReceivedDataBuffer| (0+256)))& (0+255)
  4361  1568  0086               	movwf	6
  4362  1569  3001               	movlw	1	; select bank3/4
  4363  156A  0087               	movwf	7
  4364  156B  0820               	movf	??_copyReceivedDataBuffer,w
  4365  156C  0081               	movwf	1
  4366                           
  4367                           ;main.c: 1297: copymainReceivedDataBuffer[dataBufferCounter]='#';
  4368  156D  3023               	movlw	35
  4369  156E  00A0               	movwf	??_copyReceivedDataBuffer
  4370  156F  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  4371  1570  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
  4372  1571  0086               	movwf	6
  4373  1572  3002               	movlw	2	; select bank4/5
  4374  1573  0087               	movwf	7
  4375  1574  0820               	movf	??_copyReceivedDataBuffer,w
  4376  1575  0081               	movwf	1
  4377  1576  3001               	movlw	1
  4378  1577  07A1               	addwf	copyReceivedDataBuffer@dataBufferCounter,f
  4379  1578  3000               	movlw	0
  4380  1579  3DA2               	addwfc	copyReceivedDataBuffer@dataBufferCounter+1,f
  4381  157A  2D52               	goto	L1
  4382  157B                     __end_of_copyReceivedDataBuffer:	
  4383                           
  4384                           	psect	text8
  4385  017D                     __ptext8:	
  4386 ;; *************** function _applicationControlRGB *****************
  4387 ;; Defined at:
  4388 ;;		line 1 in file "applicationcontrolRGB.h"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  ModuleNamest    1    wreg     PTR unsigned char 
  4391 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4392 ;;  SwitchNumber    1   44[BANK0 ] PTR unsigned char 
  4393 ;;		 -> switchNumberBuffer(3), NULL(0), 
  4394 ;;  SwitchStatus    1   45[BANK0 ] PTR unsigned char 
  4395 ;;		 -> switchstatusbuffer(2), NULL(0), 
  4396 ;;  RedColorInte    1   46[BANK0 ] PTR unsigned char 
  4397 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4398 ;;  GreenColorIn    1   47[BANK0 ] PTR unsigned char 
  4399 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4400 ;;  BlueColorInt    1   48[BANK0 ] PTR unsigned char 
  4401 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4402 ;;  ChildLockstr    1   49[BANK0 ] PTR unsigned char 
  4403 ;;		 -> ChildLockbuffer(2), NULL(0), 
  4404 ;;  Allcolorstr     1   50[BANK0 ] PTR unsigned char 
  4405 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;  ModuleNamest    1   30[BANK1 ] PTR unsigned char 
  4408 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  4409 ;;  HexlevelBuff    5   49[BANK1 ] unsigned char [5]
  4410 ;;  CompleteCloc    4   54[BANK1 ] unsigned long 
  4411 ;;  NeedBluePuls    4   26[BANK1 ] unsigned long 
  4412 ;;  NeedGreenPul    4   22[BANK1 ] unsigned long 
  4413 ;;  NeedRedPulse    4   18[BANK1 ] unsigned long 
  4414 ;;  BluePulse       4   14[BANK1 ] unsigned long 
  4415 ;;  GreenPulse      4   10[BANK1 ] unsigned long 
  4416 ;;  RedPulse        4    6[BANK1 ] unsigned long 
  4417 ;;  strBlueL        3   46[BANK1 ] unsigned char [3]
  4418 ;;  strBlueH        3   43[BANK1 ] unsigned char [3]
  4419 ;;  strGreenL       3   40[BANK1 ] unsigned char [3]
  4420 ;;  strGreenH       3   37[BANK1 ] unsigned char [3]
  4421 ;;  strRedL         3   34[BANK1 ] unsigned char [3]
  4422 ;;  strRedH         3   31[BANK1 ] unsigned char [3]
  4423 ;;  ConvertIntTo    3   72[BANK1 ] unsigned char [3]
  4424 ;;  ConvertIntTo    3   69[BANK1 ] unsigned char [3]
  4425 ;;  ConvertIntTo    3   66[BANK1 ] unsigned char [3]
  4426 ;;  clockPerCycl    3   61[BANK1 ] float 
  4427 ;;  Convert255Ra    3   58[BANK1 ] float 
  4428 ;;  ConvertIntoT    2   64[BANK1 ] int 
  4429 ;;  end             2    4[BANK1 ] int 
  4430 ;;  start           2    2[BANK1 ] int 
  4431 ;;  remainder       2    0[BANK1 ] int 
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      void 
  4434 ;; Registers used:
  4435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4441 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0
  4442 ;;      Locals:         0       0      75       0       0       0       0       0       0       0       0
  4443 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  4444 ;;      Totals:         0       9      75       0       0       0       0       0       0       0       0
  4445 ;;Total ram usage:       84 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    4
  4448 ;; This function calls:
  4449 ;;		___awtoft
  4450 ;;		___ftdiv
  4451 ;;		___ftmul
  4452 ;;		___fttol
  4453 ;;		___lwtoft
  4454 ;;		_abs
  4455 ;;		_atoi
  4456 ;;		_hexadecimalToDecimal
  4457 ;;		_memset
  4458 ;;		_sendAcknowledgmentRGB
  4459 ;;		_sprintf
  4460 ;;		_strcat
  4461 ;;		_strcpy
  4462 ;;		_strlen
  4463 ;;		_strncpy
  4464 ;; This function is called by:
  4465 ;;		_main
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           
  4470                           ;psect for function _applicationControlRGB
  4471  017D                     _applicationControlRGB:	
  4472                           
  4473                           ;incstack = 0
  4474                           ; Regs used in _applicationControlRGB: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4475                           ;applicationControlRGB@ModuleNamestr stored from wreg
  4476  017D  0021               	movlb	1	; select bank1
  4477  017E  00BE               	movwf	applicationControlRGB@ModuleNamestr^(0+128)
  4478                           
  4479                           ;applicationcontrolRGB.h: 7: IntegerSwitchNumber = atoi(SwitchNumberstr);
  4480  017F  0020               	movlb	0	; select bank0
  4481  0180  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4482  0181  00A6               	movwf	atoi@s
  4483  0182  39FF               	andlw	255
  4484  0183  1D03               	skipz
  4485  0184  3001               	movlw	1
  4486  0185  00A7               	movwf	atoi@s+1
  4487  0186  3187  278E  3181   	fcall	_atoi
  4488  0189  0020               	movlb	0	; select bank0
  4489  018A  0827               	movf	?_atoi+1,w
  4490  018B  0022               	movlb	2	; select bank2
  4491  018C  00B5               	movwf	(_IntegerSwitchNumber+1)^(0+256)
  4492  018D  0020               	movlb	0	; select bank0
  4493  018E  0826               	movf	?_atoi,w
  4494  018F  0022               	movlb	2	; select bank2
  4495  0190  00B4               	movwf	_IntegerSwitchNumber^(0+256)
  4496                           
  4497                           ;applicationcontrolRGB.h: 8: IntergerSwitchStatus = atoi(SwitchStatusstr);
  4498  0191  0020               	movlb	0	; select bank0
  4499  0192  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4500  0193  00A6               	movwf	atoi@s
  4501  0194  39FF               	andlw	255
  4502  0195  1D03               	skipz
  4503  0196  3001               	movlw	1
  4504  0197  00A7               	movwf	atoi@s+1
  4505  0198  3187  278E  3181   	fcall	_atoi
  4506  019B  0020               	movlb	0	; select bank0
  4507  019C  0827               	movf	?_atoi+1,w
  4508  019D  0022               	movlb	2	; select bank2
  4509  019E  00B3               	movwf	(_IntergerSwitchStatus+1)^(0+256)
  4510  019F  0020               	movlb	0	; select bank0
  4511  01A0  0826               	movf	?_atoi,w
  4512  01A1  0022               	movlb	2	; select bank2
  4513  01A2  00B2               	movwf	_IntergerSwitchStatus^(0+256)
  4514                           
  4515                           ;applicationcontrolRGB.h: 9: IntergerRedColorIntensity = atoi(RedColorIntensitystr);
  4516  01A3  0020               	movlb	0	; select bank0
  4517  01A4  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4518  01A5  00A6               	movwf	atoi@s
  4519  01A6  39FF               	andlw	255
  4520  01A7  1D03               	skipz
  4521  01A8  3002               	movlw	2
  4522  01A9  00A7               	movwf	atoi@s+1
  4523  01AA  3187  278E  3181   	fcall	_atoi
  4524  01AD  0020               	movlb	0	; select bank0
  4525  01AE  0827               	movf	?_atoi+1,w
  4526  01AF  0021               	movlb	1	; select bank1
  4527  01B0  00EE               	movwf	(_IntergerRedColorIntensity+1)^(0+128)
  4528  01B1  0020               	movlb	0	; select bank0
  4529  01B2  0826               	movf	?_atoi,w
  4530  01B3  0021               	movlb	1	; select bank1
  4531  01B4  00ED               	movwf	_IntergerRedColorIntensity^(0+128)
  4532                           
  4533                           ;applicationcontrolRGB.h: 10: IntegerBlueColorIntensity = atoi(BlueColorIntensitystr);
  4534  01B5  0020               	movlb	0	; select bank0
  4535  01B6  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4536  01B7  00A6               	movwf	atoi@s
  4537  01B8  39FF               	andlw	255
  4538  01B9  1D03               	skipz
  4539  01BA  3002               	movlw	2
  4540  01BB  00A7               	movwf	atoi@s+1
  4541  01BC  3187  278E  3181   	fcall	_atoi
  4542  01BF  0020               	movlb	0	; select bank0
  4543  01C0  0827               	movf	?_atoi+1,w
  4544  01C1  00F1               	movwf	_IntegerBlueColorIntensity+1
  4545  01C2  0826               	movf	?_atoi,w
  4546  01C3  00F0               	movwf	_IntegerBlueColorIntensity
  4547                           
  4548                           ;applicationcontrolRGB.h: 11: IntegerGreenColorIntensity = atoi(GreenColorIntensitystr);
  4549  01C4  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4550  01C5  00A6               	movwf	atoi@s
  4551  01C6  39FF               	andlw	255
  4552  01C7  1D03               	skipz
  4553  01C8  3002               	movlw	2
  4554  01C9  00A7               	movwf	atoi@s+1
  4555  01CA  3187  278E  3181   	fcall	_atoi
  4556  01CD  0020               	movlb	0	; select bank0
  4557  01CE  0827               	movf	?_atoi+1,w
  4558  01CF  0021               	movlb	1	; select bank1
  4559  01D0  00EC               	movwf	(_IntegerGreenColorIntensity+1)^(0+128)
  4560  01D1  0020               	movlb	0	; select bank0
  4561  01D2  0826               	movf	?_atoi,w
  4562  01D3  0021               	movlb	1	; select bank1
  4563  01D4  00EB               	movwf	_IntegerGreenColorIntensity^(0+128)
  4564                           
  4565                           ;applicationcontrolRGB.h: 12: IntegerAllColorIntensity = atoi(Allcolorstr);
  4566  01D5  0020               	movlb	0	; select bank0
  4567  01D6  0852               	movf	applicationControlRGB@Allcolorstr,w
  4568  01D7  00A6               	movwf	atoi@s
  4569  01D8  39FF               	andlw	255
  4570  01D9  1D03               	skipz
  4571  01DA  3002               	movlw	2
  4572  01DB  00A7               	movwf	atoi@s+1
  4573  01DC  3187  278E  3181   	fcall	_atoi
  4574  01DF  0020               	movlb	0	; select bank0
  4575  01E0  0827               	movf	?_atoi+1,w
  4576  01E1  0023               	movlb	3	; select bank3
  4577  01E2  00D5               	movwf	(_IntegerAllColorIntensity+1)^(0+384)
  4578  01E3  0020               	movlb	0	; select bank0
  4579  01E4  0826               	movf	?_atoi,w
  4580  01E5  0023               	movlb	3	; select bank3
  4581  01E6  00D4               	movwf	_IntegerAllColorIntensity^(0+384)
  4582                           
  4583                           ;applicationcontrolRGB.h: 13: IntegerChildLock = atoi(ChildLockstr);
  4584  01E7  0020               	movlb	0	; select bank0
  4585  01E8  0851               	movf	applicationControlRGB@ChildLockstr,w
  4586  01E9  00A6               	movwf	atoi@s
  4587  01EA  39FF               	andlw	255
  4588  01EB  1D03               	skipz
  4589  01EC  3001               	movlw	1
  4590  01ED  00A7               	movwf	atoi@s+1
  4591  01EE  3187  278E  3181   	fcall	_atoi
  4592  01F1  0020               	movlb	0	; select bank0
  4593  01F2  0827               	movf	?_atoi+1,w
  4594  01F3  0022               	movlb	2	; select bank2
  4595  01F4  00B1               	movwf	(_IntegerChildLock+1)^(0+256)
  4596  01F5  0020               	movlb	0	; select bank0
  4597  01F6  0826               	movf	?_atoi,w
  4598  01F7  0022               	movlb	2	; select bank2
  4599  01F8  00B0               	movwf	_IntegerChildLock^(0+256)
  4600                           
  4601                           ;applicationcontrolRGB.h: 16: charchildLock = IntegerChildLock + '0';
  4602  01F9  0830               	movf	_IntegerChildLock^(0+256),w
  4603  01FA  3E30               	addlw	48
  4604  01FB  0020               	movlb	0	; select bank0
  4605  01FC  00D3               	movwf	??_applicationControlRGB
  4606  01FD  0853               	movf	??_applicationControlRGB,w
  4607  01FE  00E7               	movwf	_charchildLock
  4608                           
  4609                           ;applicationcontrolRGB.h: 17: charSwitchState = IntergerSwitchStatus + '0';
  4610  01FF  0022               	movlb	2	; select bank2
  4611  0200  0832               	movf	_IntergerSwitchStatus^(0+256),w
  4612  0201  3E30               	addlw	48
  4613  0202  0020               	movlb	0	; select bank0
  4614  0203  00D3               	movwf	??_applicationControlRGB
  4615  0204  0853               	movf	??_applicationControlRGB,w
  4616  0205  0022               	movlb	2	; select bank2
  4617  0206  00E8               	movwf	_charSwitchState^(0+256)
  4618                           
  4619                           ;applicationcontrolRGB.h: 20: strcpy(sendFinalBufferToGAteway,ModuleNamestr);
  4620  0207  0021               	movlb	1	; select bank1
  4621  0208  083E               	movf	applicationControlRGB@ModuleNamestr^(0+128),w
  4622  0209  0020               	movlb	0	; select bank0
  4623  020A  00D3               	movwf	??_applicationControlRGB
  4624  020B  0853               	movf	??_applicationControlRGB,w
  4625  020C  00A0               	movwf	strcpy@from
  4626  020D  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4627  020E  3192  22F9  3181   	fcall	_strcpy
  4628                           
  4629                           ;applicationcontrolRGB.h: 21: strcat(sendFinalBufferToGAteway,".");
  4630  0211  303B               	movlw	low (STR_1| (0+32768))
  4631  0212  0020               	movlb	0	; select bank0
  4632  0213  00A0               	movwf	strcat@from
  4633  0214  3098               	movlw	high (STR_1| (0+32768))
  4634  0215  00A1               	movwf	strcat@from+1
  4635  0216  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4636  0217  3194  240F  3181   	fcall	_strcat
  4637                           
  4638                           ;applicationcontrolRGB.h: 22: strcat(sendFinalBufferToGAteway,SwitchNumberstr);
  4639  021A  0020               	movlb	0	; select bank0
  4640  021B  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4641  021C  00A0               	movwf	strcat@from
  4642  021D  39FF               	andlw	255
  4643  021E  1D03               	skipz
  4644  021F  3001               	movlw	1
  4645  0220  00A1               	movwf	strcat@from+1
  4646  0221  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4647  0222  3194  240F  3181   	fcall	_strcat
  4648                           
  4649                           ;applicationcontrolRGB.h: 23: strcat(sendFinalBufferToGAteway,".");
  4650  0225  303B               	movlw	low (STR_1| (0+32768))
  4651  0226  0020               	movlb	0	; select bank0
  4652  0227  00A0               	movwf	strcat@from
  4653  0228  3098               	movlw	high (STR_1| (0+32768))
  4654  0229  00A1               	movwf	strcat@from+1
  4655  022A  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4656  022B  3194  240F  3181   	fcall	_strcat
  4657                           
  4658                           ;applicationcontrolRGB.h: 24: strcat(sendFinalBufferToGAteway,"ACTACK");
  4659  022E  3019               	movlw	low (STR_3| (0+32768))
  4660  022F  0020               	movlb	0	; select bank0
  4661  0230  00A0               	movwf	strcat@from
  4662  0231  3098               	movlw	high (STR_3| (0+32768))
  4663  0232  00A1               	movwf	strcat@from+1
  4664  0233  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4665  0234  3194  240F  3181   	fcall	_strcat
  4666                           
  4667                           ;applicationcontrolRGB.h: 25: strcat(sendFinalBufferToGAteway,".");
  4668  0237  303B               	movlw	low (STR_1| (0+32768))
  4669  0238  0020               	movlb	0	; select bank0
  4670  0239  00A0               	movwf	strcat@from
  4671  023A  3098               	movlw	high (STR_1| (0+32768))
  4672  023B  00A1               	movwf	strcat@from+1
  4673  023C  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4674  023D  3194  240F  3181   	fcall	_strcat
  4675                           
  4676                           ;applicationcontrolRGB.h: 26: strcat(sendFinalBufferToGAteway,SwitchStatusstr);
  4677  0240  0020               	movlb	0	; select bank0
  4678  0241  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4679  0242  00A0               	movwf	strcat@from
  4680  0243  39FF               	andlw	255
  4681  0244  1D03               	skipz
  4682  0245  3001               	movlw	1
  4683  0246  00A1               	movwf	strcat@from+1
  4684  0247  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4685  0248  3194  240F  3181   	fcall	_strcat
  4686                           
  4687                           ;applicationcontrolRGB.h: 27: strcat(sendFinalBufferToGAteway,".");
  4688  024B  303B               	movlw	low (STR_1| (0+32768))
  4689  024C  0020               	movlb	0	; select bank0
  4690  024D  00A0               	movwf	strcat@from
  4691  024E  3098               	movlw	high (STR_1| (0+32768))
  4692  024F  00A1               	movwf	strcat@from+1
  4693  0250  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4694  0251  3194  240F  3181   	fcall	_strcat
  4695                           
  4696                           ;applicationcontrolRGB.h: 28: strcat(sendFinalBufferToGAteway,RedColorIntensitystr);
  4697  0254  0020               	movlb	0	; select bank0
  4698  0255  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4699  0256  00A0               	movwf	strcat@from
  4700  0257  39FF               	andlw	255
  4701  0258  1D03               	skipz
  4702  0259  3002               	movlw	2
  4703  025A  00A1               	movwf	strcat@from+1
  4704  025B  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4705  025C  3194  240F  3181   	fcall	_strcat
  4706                           
  4707                           ;applicationcontrolRGB.h: 29: strcat(sendFinalBufferToGAteway,".");
  4708  025F  303B               	movlw	low (STR_1| (0+32768))
  4709  0260  0020               	movlb	0	; select bank0
  4710  0261  00A0               	movwf	strcat@from
  4711  0262  3098               	movlw	high (STR_1| (0+32768))
  4712  0263  00A1               	movwf	strcat@from+1
  4713  0264  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4714  0265  3194  240F  3181   	fcall	_strcat
  4715                           
  4716                           ;applicationcontrolRGB.h: 30: strcat(sendFinalBufferToGAteway,GreenColorIntensitystr);
  4717  0268  0020               	movlb	0	; select bank0
  4718  0269  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4719  026A  00A0               	movwf	strcat@from
  4720  026B  39FF               	andlw	255
  4721  026C  1D03               	skipz
  4722  026D  3002               	movlw	2
  4723  026E  00A1               	movwf	strcat@from+1
  4724  026F  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4725  0270  3194  240F  3181   	fcall	_strcat
  4726                           
  4727                           ;applicationcontrolRGB.h: 31: strcat(sendFinalBufferToGAteway,".");
  4728  0273  303B               	movlw	low (STR_1| (0+32768))
  4729  0274  0020               	movlb	0	; select bank0
  4730  0275  00A0               	movwf	strcat@from
  4731  0276  3098               	movlw	high (STR_1| (0+32768))
  4732  0277  00A1               	movwf	strcat@from+1
  4733  0278  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4734  0279  3194  240F  3181   	fcall	_strcat
  4735                           
  4736                           ;applicationcontrolRGB.h: 32: strcat(sendFinalBufferToGAteway,BlueColorIntensitystr);
  4737  027C  0020               	movlb	0	; select bank0
  4738  027D  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4739  027E  00A0               	movwf	strcat@from
  4740  027F  39FF               	andlw	255
  4741  0280  1D03               	skipz
  4742  0281  3002               	movlw	2
  4743  0282  00A1               	movwf	strcat@from+1
  4744  0283  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4745  0284  3194  240F  3181   	fcall	_strcat
  4746                           
  4747                           ;applicationcontrolRGB.h: 33: strcat(sendFinalBufferToGAteway,".");
  4748  0287  303B               	movlw	low (STR_1| (0+32768))
  4749  0288  0020               	movlb	0	; select bank0
  4750  0289  00A0               	movwf	strcat@from
  4751  028A  3098               	movlw	high (STR_1| (0+32768))
  4752  028B  00A1               	movwf	strcat@from+1
  4753  028C  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4754  028D  3194  240F  3181   	fcall	_strcat
  4755                           
  4756                           ;applicationcontrolRGB.h: 34: strcat(sendFinalBufferToGAteway,ChildLockstr);
  4757  0290  0020               	movlb	0	; select bank0
  4758  0291  0851               	movf	applicationControlRGB@ChildLockstr,w
  4759  0292  00A0               	movwf	strcat@from
  4760  0293  39FF               	andlw	255
  4761  0294  1D03               	skipz
  4762  0295  3001               	movlw	1
  4763  0296  00A1               	movwf	strcat@from+1
  4764  0297  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4765  0298  3194  240F  3181   	fcall	_strcat
  4766                           
  4767                           ;applicationcontrolRGB.h: 35: strcat(sendFinalBufferToGAteway,".");
  4768  029B  303B               	movlw	low (STR_1| (0+32768))
  4769  029C  0020               	movlb	0	; select bank0
  4770  029D  00A0               	movwf	strcat@from
  4771  029E  3098               	movlw	high (STR_1| (0+32768))
  4772  029F  00A1               	movwf	strcat@from+1
  4773  02A0  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4774  02A1  3194  240F  3181   	fcall	_strcat
  4775                           
  4776                           ;applicationcontrolRGB.h: 36: strcat(sendFinalBufferToGAteway,"100|");
  4777  02A4  302F               	movlw	low (STR_10| (0+32768))
  4778  02A5  0020               	movlb	0	; select bank0
  4779  02A6  00A0               	movwf	strcat@from
  4780  02A7  3098               	movlw	high (STR_10| (0+32768))
  4781  02A8  00A1               	movwf	strcat@from+1
  4782  02A9  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4783  02AA  3194  240F  3181   	fcall	_strcat
  4784                           
  4785                           ;applicationcontrolRGB.h: 37: sendAcknowledgmentRGB(sendFinalBufferToGAteway);
  4786  02AD  3020               	movlw	(low (_sendFinalBufferToGAteway| (0+512)))& (0+255)
  4787  02AE  3193  238D  3181   	fcall	_sendAcknowledgmentRGB
  4788                           
  4789                           ;applicationcontrolRGB.h: 39: parentalLockBuffer[IntegerSwitchNumber] = charchildLock;
  4790  02B1  0020               	movlb	0	; select bank0
  4791  02B2  0867               	movf	_charchildLock,w
  4792  02B3  00D3               	movwf	??_applicationControlRGB
  4793  02B4  0022               	movlb	2	; select bank2
  4794  02B5  0834               	movf	_IntegerSwitchNumber^(0+256),w
  4795  02B6  3EC0               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  4796  02B7  0086               	movwf	6
  4797  02B8  3002               	movlw	2	; select bank5/6
  4798  02B9  0087               	movwf	7
  4799  02BA  0020               	movlb	0	; select bank0
  4800  02BB  0853               	movf	??_applicationControlRGB,w
  4801  02BC  0081               	movwf	1
  4802                           
  4803                           ;applicationcontrolRGB.h: 41: double ConvertIntToTimeInMicrosecRed;
  4804                           ;applicationcontrolRGB.h: 42: double ConvertIntToTimeInMicrosecGreen;
  4805                           ;applicationcontrolRGB.h: 43: double ConvertIntToTimeInMicrosecBlue;
  4806                           ;applicationcontrolRGB.h: 44: unsigned long long int RedPulse=0,GreenPulse=0,BluePulse=0
      +                          ,NeedRedPulse=0,NeedGreenPulse=0,NeedBluePulse=0,CompleteClock = 65535;
  4807  02BD  3000               	movlw	0
  4808  02BE  0021               	movlb	1	; select bank1
  4809  02BF  00A9               	movwf	(applicationControlRGB@RedPulse+3)^(0+128)
  4810  02C0  3000               	movlw	0
  4811  02C1  00A8               	movwf	(applicationControlRGB@RedPulse+2)^(0+128)
  4812  02C2  3000               	movlw	0
  4813  02C3  00A7               	movwf	(applicationControlRGB@RedPulse+1)^(0+128)
  4814  02C4  3000               	movlw	0
  4815  02C5  00A6               	movwf	applicationControlRGB@RedPulse^(0+128)
  4816  02C6  3000               	movlw	0
  4817  02C7  00AD               	movwf	(applicationControlRGB@GreenPulse+3)^(0+128)
  4818  02C8  3000               	movlw	0
  4819  02C9  00AC               	movwf	(applicationControlRGB@GreenPulse+2)^(0+128)
  4820  02CA  3000               	movlw	0
  4821  02CB  00AB               	movwf	(applicationControlRGB@GreenPulse+1)^(0+128)
  4822  02CC  3000               	movlw	0
  4823  02CD  00AA               	movwf	applicationControlRGB@GreenPulse^(0+128)
  4824  02CE  3000               	movlw	0
  4825  02CF  00B1               	movwf	(applicationControlRGB@BluePulse+3)^(0+128)
  4826  02D0  3000               	movlw	0
  4827  02D1  00B0               	movwf	(applicationControlRGB@BluePulse+2)^(0+128)
  4828  02D2  3000               	movlw	0
  4829  02D3  00AF               	movwf	(applicationControlRGB@BluePulse+1)^(0+128)
  4830  02D4  3000               	movlw	0
  4831  02D5  00AE               	movwf	applicationControlRGB@BluePulse^(0+128)
  4832  02D6  3000               	movlw	0
  4833  02D7  00B5               	movwf	(applicationControlRGB@NeedRedPulse+3)^(0+128)
  4834  02D8  3000               	movlw	0
  4835  02D9  00B4               	movwf	(applicationControlRGB@NeedRedPulse+2)^(0+128)
  4836  02DA  3000               	movlw	0
  4837  02DB  00B3               	movwf	(applicationControlRGB@NeedRedPulse+1)^(0+128)
  4838  02DC  3000               	movlw	0
  4839  02DD  00B2               	movwf	applicationControlRGB@NeedRedPulse^(0+128)
  4840  02DE  3000               	movlw	0
  4841  02DF  00B9               	movwf	(applicationControlRGB@NeedGreenPulse+3)^(0+128)
  4842  02E0  3000               	movlw	0
  4843  02E1  00B8               	movwf	(applicationControlRGB@NeedGreenPulse+2)^(0+128)
  4844  02E2  3000               	movlw	0
  4845  02E3  00B7               	movwf	(applicationControlRGB@NeedGreenPulse+1)^(0+128)
  4846  02E4  3000               	movlw	0
  4847  02E5  00B6               	movwf	applicationControlRGB@NeedGreenPulse^(0+128)
  4848  02E6  3000               	movlw	0
  4849  02E7  00BD               	movwf	(applicationControlRGB@NeedBluePulse+3)^(0+128)
  4850  02E8  3000               	movlw	0
  4851  02E9  00BC               	movwf	(applicationControlRGB@NeedBluePulse+2)^(0+128)
  4852  02EA  3000               	movlw	0
  4853  02EB  00BB               	movwf	(applicationControlRGB@NeedBluePulse+1)^(0+128)
  4854  02EC  3000               	movlw	0
  4855  02ED  00BA               	movwf	applicationControlRGB@NeedBluePulse^(0+128)
  4856  02EE  3000               	movlw	0
  4857  02EF  00D9               	movwf	(applicationControlRGB@CompleteClock+3)^(0+128)
  4858  02F0  3000               	movlw	0
  4859  02F1  00D8               	movwf	(applicationControlRGB@CompleteClock+2)^(0+128)
  4860  02F2  30FF               	movlw	255
  4861  02F3  00D7               	movwf	(applicationControlRGB@CompleteClock+1)^(0+128)
  4862  02F4  30FF               	movlw	255
  4863  02F5  00D6               	movwf	applicationControlRGB@CompleteClock^(0+128)
  4864                           
  4865                           ;applicationcontrolRGB.h: 45: float Convert255RangeintoHundred = 2.57;
  4866  02F6  307B               	movlw	123
  4867  02F7  00DA               	movwf	applicationControlRGB@Convert255RangeintoHundred^(0+128)
  4868  02F8  3024               	movlw	36
  4869  02F9  00DB               	movwf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128)
  4870  02FA  3040               	movlw	64
  4871  02FB  00DC               	movwf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128)
  4872                           
  4873                           ;applicationcontrolRGB.h: 46: int ConvertIntoTenMsRangeFactor = 10;
  4874  02FC  300A               	movlw	10
  4875  02FD  00E0               	movwf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128)
  4876  02FE  3000               	movlw	0
  4877  02FF  00E1               	movwf	(applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128)+1)
  4878                           
  4879                           ;applicationcontrolRGB.h: 47: float clockPerCycle=0.25;
  4880  0300  3000               	movlw	0
  4881  0301  00DD               	movwf	applicationControlRGB@clockPerCycle^(0+128)
  4882  0302  3080               	movlw	128
  4883  0303  00DE               	movwf	(applicationControlRGB@clockPerCycle+1)^(0+128)
  4884  0304  303E               	movlw	62
  4885  0305  00DF               	movwf	(applicationControlRGB@clockPerCycle+2)^(0+128)
  4886                           
  4887                           ;applicationcontrolRGB.h: 48: int remainder=0;
  4888  0306  01A0               	clrf	applicationControlRGB@remainder^(0+128)
  4889  0307  01A1               	clrf	(applicationControlRGB@remainder+1)^(0+128)
  4890                           
  4891                           ;applicationcontrolRGB.h: 49: char HexlevelBuffer[5];
  4892                           ;applicationcontrolRGB.h: 50: int start=0;
  4893  0308  01A2               	clrf	applicationControlRGB@start^(0+128)
  4894  0309  01A3               	clrf	(applicationControlRGB@start+1)^(0+128)
  4895                           
  4896                           ;applicationcontrolRGB.h: 51: int end = strlen(HexlevelBuffer)-1;
  4897  030A  30D1               	movlw	low applicationControlRGB@HexlevelBuffer
  4898  030B  0020               	movlb	0	; select bank0
  4899  030C  00A0               	movwf	strlen@s
  4900  030D  3000               	movlw	high applicationControlRGB@HexlevelBuffer
  4901  030E  00A1               	movwf	strlen@s+1
  4902  030F  3193  236E  3181   	fcall	_strlen
  4903  0312  0020               	movlb	0	; select bank0
  4904  0313  0820               	movf	?_strlen,w
  4905  0314  3EFF               	addlw	255
  4906  0315  0021               	movlb	1	; select bank1
  4907  0316  00A4               	movwf	applicationControlRGB@end^(0+128)
  4908  0317  30FF               	movlw	255
  4909  0318  0020               	movlb	0	; select bank0
  4910  0319  3D21               	addwfc	?_strlen+1,w
  4911  031A  0021               	movlb	1	; select bank1
  4912  031B  00A5               	movwf	(applicationControlRGB@end+1)^(0+128)
  4913                           
  4914                           ;applicationcontrolRGB.h: 52: char strRedH[3],strRedL[3];
  4915                           ;applicationcontrolRGB.h: 53: char strGreenH[3],strGreenL[3];
  4916                           ;applicationcontrolRGB.h: 54: char strBlueH[3],strBlueL[3];
  4917                           ;applicationcontrolRGB.h: 56: IntegerSwitchNumber = atoi(SwitchNumberstr);
  4918  031C  0020               	movlb	0	; select bank0
  4919  031D  084C               	movf	applicationControlRGB@SwitchNumberstr,w
  4920  031E  00A6               	movwf	atoi@s
  4921  031F  39FF               	andlw	255
  4922  0320  1D03               	skipz
  4923  0321  3001               	movlw	1
  4924  0322  00A7               	movwf	atoi@s+1
  4925  0323  3187  278E  3181   	fcall	_atoi
  4926  0326  0020               	movlb	0	; select bank0
  4927  0327  0827               	movf	?_atoi+1,w
  4928  0328  0022               	movlb	2	; select bank2
  4929  0329  00B5               	movwf	(_IntegerSwitchNumber+1)^(0+256)
  4930  032A  0020               	movlb	0	; select bank0
  4931  032B  0826               	movf	?_atoi,w
  4932  032C  0022               	movlb	2	; select bank2
  4933  032D  00B4               	movwf	_IntegerSwitchNumber^(0+256)
  4934                           
  4935                           ;applicationcontrolRGB.h: 57: IntergerSwitchStatus = atoi(SwitchStatusstr);
  4936  032E  0020               	movlb	0	; select bank0
  4937  032F  084D               	movf	applicationControlRGB@SwitchStatusstr,w
  4938  0330  00A6               	movwf	atoi@s
  4939  0331  39FF               	andlw	255
  4940  0332  1D03               	skipz
  4941  0333  3001               	movlw	1
  4942  0334  00A7               	movwf	atoi@s+1
  4943  0335  3187  278E  3181   	fcall	_atoi
  4944  0338  0020               	movlb	0	; select bank0
  4945  0339  0827               	movf	?_atoi+1,w
  4946  033A  0022               	movlb	2	; select bank2
  4947  033B  00B3               	movwf	(_IntergerSwitchStatus+1)^(0+256)
  4948  033C  0020               	movlb	0	; select bank0
  4949  033D  0826               	movf	?_atoi,w
  4950  033E  0022               	movlb	2	; select bank2
  4951  033F  00B2               	movwf	_IntergerSwitchStatus^(0+256)
  4952                           
  4953                           ;applicationcontrolRGB.h: 58: IntergerRedColorIntensity = atoi(RedColorIntensitystr);
  4954  0340  0020               	movlb	0	; select bank0
  4955  0341  084E               	movf	applicationControlRGB@RedColorIntensitystr,w
  4956  0342  00A6               	movwf	atoi@s
  4957  0343  39FF               	andlw	255
  4958  0344  1D03               	skipz
  4959  0345  3002               	movlw	2
  4960  0346  00A7               	movwf	atoi@s+1
  4961  0347  3187  278E  3181   	fcall	_atoi
  4962  034A  0020               	movlb	0	; select bank0
  4963  034B  0827               	movf	?_atoi+1,w
  4964  034C  0021               	movlb	1	; select bank1
  4965  034D  00EE               	movwf	(_IntergerRedColorIntensity+1)^(0+128)
  4966  034E  0020               	movlb	0	; select bank0
  4967  034F  0826               	movf	?_atoi,w
  4968  0350  0021               	movlb	1	; select bank1
  4969  0351  00ED               	movwf	_IntergerRedColorIntensity^(0+128)
  4970                           
  4971                           ;applicationcontrolRGB.h: 59: IntegerBlueColorIntensity = atoi(BlueColorIntensitystr);
  4972  0352  0020               	movlb	0	; select bank0
  4973  0353  0850               	movf	applicationControlRGB@BlueColorIntensitystr,w
  4974  0354  00A6               	movwf	atoi@s
  4975  0355  39FF               	andlw	255
  4976  0356  1D03               	skipz
  4977  0357  3002               	movlw	2
  4978  0358  00A7               	movwf	atoi@s+1
  4979  0359  3187  278E  3181   	fcall	_atoi
  4980  035C  0020               	movlb	0	; select bank0
  4981  035D  0827               	movf	?_atoi+1,w
  4982  035E  00F1               	movwf	_IntegerBlueColorIntensity+1
  4983  035F  0826               	movf	?_atoi,w
  4984  0360  00F0               	movwf	_IntegerBlueColorIntensity
  4985                           
  4986                           ;applicationcontrolRGB.h: 60: IntegerGreenColorIntensity = atoi(GreenColorIntensitystr);
  4987  0361  084F               	movf	applicationControlRGB@GreenColorIntensitystr,w
  4988  0362  00A6               	movwf	atoi@s
  4989  0363  39FF               	andlw	255
  4990  0364  1D03               	skipz
  4991  0365  3002               	movlw	2
  4992  0366  00A7               	movwf	atoi@s+1
  4993  0367  3187  278E  3181   	fcall	_atoi
  4994  036A  0020               	movlb	0	; select bank0
  4995  036B  0827               	movf	?_atoi+1,w
  4996  036C  0021               	movlb	1	; select bank1
  4997  036D  00EC               	movwf	(_IntegerGreenColorIntensity+1)^(0+128)
  4998  036E  0020               	movlb	0	; select bank0
  4999  036F  0826               	movf	?_atoi,w
  5000  0370  0021               	movlb	1	; select bank1
  5001  0371  00EB               	movwf	_IntegerGreenColorIntensity^(0+128)
  5002                           
  5003                           ;applicationcontrolRGB.h: 61: IntegerAllColorIntensity = atoi(Allcolorstr);
  5004  0372  0020               	movlb	0	; select bank0
  5005  0373  0852               	movf	applicationControlRGB@Allcolorstr,w
  5006  0374  00A6               	movwf	atoi@s
  5007  0375  39FF               	andlw	255
  5008  0376  1D03               	skipz
  5009  0377  3002               	movlw	2
  5010  0378  00A7               	movwf	atoi@s+1
  5011  0379  3187  278E  3181   	fcall	_atoi
  5012  037C  0020               	movlb	0	; select bank0
  5013  037D  0827               	movf	?_atoi+1,w
  5014  037E  0023               	movlb	3	; select bank3
  5015  037F  00D5               	movwf	(_IntegerAllColorIntensity+1)^(0+384)
  5016  0380  0020               	movlb	0	; select bank0
  5017  0381  0826               	movf	?_atoi,w
  5018  0382  0023               	movlb	3	; select bank3
  5019  0383  00D4               	movwf	_IntegerAllColorIntensity^(0+384)
  5020                           
  5021                           ;applicationcontrolRGB.h: 62: IntegerChildLock = atoi(ChildLockstr);
  5022  0384  0020               	movlb	0	; select bank0
  5023  0385  0851               	movf	applicationControlRGB@ChildLockstr,w
  5024  0386  00A6               	movwf	atoi@s
  5025  0387  39FF               	andlw	255
  5026  0388  1D03               	skipz
  5027  0389  3001               	movlw	1
  5028  038A  00A7               	movwf	atoi@s+1
  5029  038B  3187  278E  3181   	fcall	_atoi
  5030  038E  0020               	movlb	0	; select bank0
  5031  038F  0827               	movf	?_atoi+1,w
  5032  0390  0022               	movlb	2	; select bank2
  5033  0391  00B1               	movwf	(_IntegerChildLock+1)^(0+256)
  5034  0392  0020               	movlb	0	; select bank0
  5035  0393  0826               	movf	?_atoi,w
  5036  0394  0022               	movlb	2	; select bank2
  5037  0395  00B0               	movwf	_IntegerChildLock^(0+256)
  5038                           
  5039                           ;applicationcontrolRGB.h: 66: ConvertIntToTimeInMicrosecRed = (IntergerRedColorIntensity
      +                          /Convert255RangeintoHundred);
  5040  0396  0021               	movlb	1	; select bank1
  5041  0397  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5042  0398  0020               	movlb	0	; select bank0
  5043  0399  00AE               	movwf	___ftdiv@f2
  5044  039A  0021               	movlb	1	; select bank1
  5045  039B  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5046  039C  0020               	movlb	0	; select bank0
  5047  039D  00AF               	movwf	___ftdiv@f2+1
  5048  039E  0021               	movlb	1	; select bank1
  5049  039F  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5050  03A0  0020               	movlb	0	; select bank0
  5051  03A1  00B0               	movwf	___ftdiv@f2+2
  5052  03A2  0021               	movlb	1	; select bank1
  5053  03A3  086E               	movf	(_IntergerRedColorIntensity+1)^(0+128),w
  5054  03A4  0020               	movlb	0	; select bank0
  5055  03A5  00A9               	movwf	___lwtoft@c+1
  5056  03A6  0021               	movlb	1	; select bank1
  5057  03A7  086D               	movf	_IntergerRedColorIntensity^(0+128),w
  5058  03A8  0020               	movlb	0	; select bank0
  5059  03A9  00A8               	movwf	___lwtoft@c
  5060  03AA  3192  2264  3181   	fcall	___lwtoft
  5061  03AD  0020               	movlb	0	; select bank0
  5062  03AE  0828               	movf	?___lwtoft,w
  5063  03AF  00B1               	movwf	___ftdiv@f1
  5064  03B0  0829               	movf	?___lwtoft+1,w
  5065  03B1  00B2               	movwf	___ftdiv@f1+1
  5066  03B2  082A               	movf	?___lwtoft+2,w
  5067  03B3  00B3               	movwf	___ftdiv@f1+2
  5068  03B4  3188  204F  3181   	fcall	___ftdiv
  5069  03B7  0020               	movlb	0	; select bank0
  5070  03B8  082E               	movf	?___ftdiv,w
  5071  03B9  0021               	movlb	1	; select bank1
  5072  03BA  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5073  03BB  0020               	movlb	0	; select bank0
  5074  03BC  082F               	movf	?___ftdiv+1,w
  5075  03BD  0021               	movlb	1	; select bank1
  5076  03BE  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5077  03BF  0020               	movlb	0	; select bank0
  5078  03C0  0830               	movf	?___ftdiv+2,w
  5079  03C1  0021               	movlb	1	; select bank1
  5080  03C2  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5081                           
  5082                           ;applicationcontrolRGB.h: 67: ConvertIntToTimeInMicrosecRed = (ConvertIntToTimeInMicrose
      +                          cRed/ConvertIntoTenMsRangeFactor);
  5083  03C3  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5084  03C4  0020               	movlb	0	; select bank0
  5085  03C5  00A9               	movwf	___awtoft@c+1
  5086  03C6  0021               	movlb	1	; select bank1
  5087  03C7  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5088  03C8  0020               	movlb	0	; select bank0
  5089  03C9  00A8               	movwf	___awtoft@c
  5090  03CA  3193  23ED  3181   	fcall	___awtoft
  5091  03CD  0020               	movlb	0	; select bank0
  5092  03CE  0828               	movf	?___awtoft,w
  5093  03CF  00AE               	movwf	___ftdiv@f2
  5094  03D0  0829               	movf	?___awtoft+1,w
  5095  03D1  00AF               	movwf	___ftdiv@f2+1
  5096  03D2  082A               	movf	?___awtoft+2,w
  5097  03D3  00B0               	movwf	___ftdiv@f2+2
  5098  03D4  0021               	movlb	1	; select bank1
  5099  03D5  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5100  03D6  0020               	movlb	0	; select bank0
  5101  03D7  00B1               	movwf	___ftdiv@f1
  5102  03D8  0021               	movlb	1	; select bank1
  5103  03D9  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5104  03DA  0020               	movlb	0	; select bank0
  5105  03DB  00B2               	movwf	___ftdiv@f1+1
  5106  03DC  0021               	movlb	1	; select bank1
  5107  03DD  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5108  03DE  0020               	movlb	0	; select bank0
  5109  03DF  00B3               	movwf	___ftdiv@f1+2
  5110  03E0  3188  204F  3181   	fcall	___ftdiv
  5111  03E3  0020               	movlb	0	; select bank0
  5112  03E4  082E               	movf	?___ftdiv,w
  5113  03E5  0021               	movlb	1	; select bank1
  5114  03E6  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5115  03E7  0020               	movlb	0	; select bank0
  5116  03E8  082F               	movf	?___ftdiv+1,w
  5117  03E9  0021               	movlb	1	; select bank1
  5118  03EA  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5119  03EB  0020               	movlb	0	; select bank0
  5120  03EC  0830               	movf	?___ftdiv+2,w
  5121  03ED  0021               	movlb	1	; select bank1
  5122  03EE  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5123                           
  5124                           ;applicationcontrolRGB.h: 68: ConvertIntToTimeInMicrosecRed = (ConvertIntToTimeInMicrose
      +                          cRed*1000);
  5125  03EF  3000               	movlw	0
  5126  03F0  0020               	movlb	0	; select bank0
  5127  03F1  00A8               	movwf	___ftmul@f1
  5128  03F2  307A               	movlw	122
  5129  03F3  00A9               	movwf	___ftmul@f1+1
  5130  03F4  3044               	movlw	68
  5131  03F5  00AA               	movwf	___ftmul@f1+2
  5132  03F6  0021               	movlb	1	; select bank1
  5133  03F7  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5134  03F8  0020               	movlb	0	; select bank0
  5135  03F9  00AB               	movwf	___ftmul@f2
  5136  03FA  0021               	movlb	1	; select bank1
  5137  03FB  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5138  03FC  0020               	movlb	0	; select bank0
  5139  03FD  00AC               	movwf	___ftmul@f2+1
  5140  03FE  0021               	movlb	1	; select bank1
  5141  03FF  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5142  0400  0020               	movlb	0	; select bank0
  5143  0401  00AD               	movwf	___ftmul@f2+2
  5144  0402  3189  21AB  3181   	fcall	___ftmul
  5145  0405  0020               	movlb	0	; select bank0
  5146  0406  0828               	movf	?___ftmul,w
  5147  0407  0021               	movlb	1	; select bank1
  5148  0408  00E2               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128)
  5149  0409  0020               	movlb	0	; select bank0
  5150  040A  0829               	movf	?___ftmul+1,w
  5151  040B  0021               	movlb	1	; select bank1
  5152  040C  00E3               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128)
  5153  040D  0020               	movlb	0	; select bank0
  5154  040E  082A               	movf	?___ftmul+2,w
  5155  040F  0021               	movlb	1	; select bank1
  5156  0410  00E4               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128)
  5157                           
  5158                           ;applicationcontrolRGB.h: 69: RedPulse = (int)(ConvertIntToTimeInMicrosecRed/clockPerCyc
      +                          le);
  5159  0411  0862               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecRed^(0+128),w
  5160  0412  0020               	movlb	0	; select bank0
  5161  0413  00B1               	movwf	___ftdiv@f1
  5162  0414  0021               	movlb	1	; select bank1
  5163  0415  0863               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+1)^(0+128),w
  5164  0416  0020               	movlb	0	; select bank0
  5165  0417  00B2               	movwf	___ftdiv@f1+1
  5166  0418  0021               	movlb	1	; select bank1
  5167  0419  0864               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecRed+2)^(0+128),w
  5168  041A  0020               	movlb	0	; select bank0
  5169  041B  00B3               	movwf	___ftdiv@f1+2
  5170  041C  0021               	movlb	1	; select bank1
  5171  041D  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5172  041E  0020               	movlb	0	; select bank0
  5173  041F  00AE               	movwf	___ftdiv@f2
  5174  0420  0021               	movlb	1	; select bank1
  5175  0421  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5176  0422  0020               	movlb	0	; select bank0
  5177  0423  00AF               	movwf	___ftdiv@f2+1
  5178  0424  0021               	movlb	1	; select bank1
  5179  0425  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5180  0426  0020               	movlb	0	; select bank0
  5181  0427  00B0               	movwf	___ftdiv@f2+2
  5182  0428  3188  204F  3181   	fcall	___ftdiv
  5183  042B  0020               	movlb	0	; select bank0
  5184  042C  082E               	movf	?___ftdiv,w
  5185  042D  00BE               	movwf	___fttol@f1
  5186  042E  082F               	movf	?___ftdiv+1,w
  5187  042F  00BF               	movwf	___fttol@f1+1
  5188  0430  0830               	movf	?___ftdiv+2,w
  5189  0431  00C0               	movwf	___fttol@f1+2
  5190  0432  3197  2779  3181   	fcall	___fttol
  5191  0435  0020               	movlb	0	; select bank0
  5192  0436  083E               	movf	?___fttol,w
  5193  0437  0021               	movlb	1	; select bank1
  5194  0438  00A6               	movwf	applicationControlRGB@RedPulse^(0+128)
  5195  0439  0020               	movlb	0	; select bank0
  5196  043A  083F               	movf	?___fttol+1,w
  5197  043B  0021               	movlb	1	; select bank1
  5198  043C  00A7               	movwf	(applicationControlRGB@RedPulse+1)^(0+128)
  5199  043D  0D89               	rlf	9,f
  5200  043E  3B89               	subwfb	9,f
  5201  043F  0989               	comf	9,f
  5202  0440  00A8               	movwf	(applicationControlRGB@RedPulse+2)^(0+128)
  5203  0441  00A9               	movwf	(applicationControlRGB@RedPulse+3)^(0+128)
  5204                           
  5205                           ;applicationcontrolRGB.h: 70: NeedRedPulse = abs(CompleteClock - RedPulse);
  5206  0442  0926               	comf	applicationControlRGB@RedPulse^(0+128),w
  5207  0443  0020               	movlb	0	; select bank0
  5208  0444  00D3               	movwf	??_applicationControlRGB
  5209  0445  0021               	movlb	1	; select bank1
  5210  0446  0927               	comf	(applicationControlRGB@RedPulse+1)^(0+128),w
  5211  0447  0020               	movlb	0	; select bank0
  5212  0448  00D4               	movwf	??_applicationControlRGB+1
  5213  0449  0AD3               	incf	??_applicationControlRGB,f
  5214  044A  1903               	skipnz
  5215  044B  0AD4               	incf	??_applicationControlRGB+1,f
  5216  044C  0021               	movlb	1	; select bank1
  5217  044D  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5218  044E  0020               	movlb	0	; select bank0
  5219  044F  0753               	addwf	??_applicationControlRGB,w
  5220  0450  00A0               	movwf	abs@a
  5221  0451  0021               	movlb	1	; select bank1
  5222  0452  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5223  0453  0020               	movlb	0	; select bank0
  5224  0454  3D54               	addwfc	??_applicationControlRGB+1,w
  5225  0455  00A1               	movwf	abs@a+1
  5226  0456  3192  220C  3181   	fcall	_abs
  5227  0459  0020               	movlb	0	; select bank0
  5228  045A  0820               	movf	?_abs,w
  5229  045B  0021               	movlb	1	; select bank1
  5230  045C  00B2               	movwf	applicationControlRGB@NeedRedPulse^(0+128)
  5231  045D  0020               	movlb	0	; select bank0
  5232  045E  0821               	movf	?_abs+1,w
  5233  045F  0021               	movlb	1	; select bank1
  5234  0460  00B3               	movwf	(applicationControlRGB@NeedRedPulse+1)^(0+128)
  5235  0461  0D89               	rlf	9,f
  5236  0462  3B89               	subwfb	9,f
  5237  0463  0989               	comf	9,f
  5238  0464  00B4               	movwf	(applicationControlRGB@NeedRedPulse+2)^(0+128)
  5239  0465  00B5               	movwf	(applicationControlRGB@NeedRedPulse+3)^(0+128)
  5240                           
  5241                           ;applicationcontrolRGB.h: 74: ConvertIntToTimeInMicrosecGreen = (IntegerGreenColorIntens
      +                          ity/Convert255RangeintoHundred);
  5242  0466  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5243  0467  0020               	movlb	0	; select bank0
  5244  0468  00AE               	movwf	___ftdiv@f2
  5245  0469  0021               	movlb	1	; select bank1
  5246  046A  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5247  046B  0020               	movlb	0	; select bank0
  5248  046C  00AF               	movwf	___ftdiv@f2+1
  5249  046D  0021               	movlb	1	; select bank1
  5250  046E  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5251  046F  0020               	movlb	0	; select bank0
  5252  0470  00B0               	movwf	___ftdiv@f2+2
  5253  0471  0021               	movlb	1	; select bank1
  5254  0472  086C               	movf	(_IntegerGreenColorIntensity+1)^(0+128),w
  5255  0473  0020               	movlb	0	; select bank0
  5256  0474  00A9               	movwf	___lwtoft@c+1
  5257  0475  0021               	movlb	1	; select bank1
  5258  0476  086B               	movf	_IntegerGreenColorIntensity^(0+128),w
  5259  0477  0020               	movlb	0	; select bank0
  5260  0478  00A8               	movwf	___lwtoft@c
  5261  0479  3192  2264  3181   	fcall	___lwtoft
  5262  047C  0020               	movlb	0	; select bank0
  5263  047D  0828               	movf	?___lwtoft,w
  5264  047E  00B1               	movwf	___ftdiv@f1
  5265  047F  0829               	movf	?___lwtoft+1,w
  5266  0480  00B2               	movwf	___ftdiv@f1+1
  5267  0481  082A               	movf	?___lwtoft+2,w
  5268  0482  00B3               	movwf	___ftdiv@f1+2
  5269  0483  3188  204F  3181   	fcall	___ftdiv
  5270  0486  0020               	movlb	0	; select bank0
  5271  0487  082E               	movf	?___ftdiv,w
  5272  0488  0021               	movlb	1	; select bank1
  5273  0489  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5274  048A  0020               	movlb	0	; select bank0
  5275  048B  082F               	movf	?___ftdiv+1,w
  5276  048C  0021               	movlb	1	; select bank1
  5277  048D  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5278  048E  0020               	movlb	0	; select bank0
  5279  048F  0830               	movf	?___ftdiv+2,w
  5280  0490  0021               	movlb	1	; select bank1
  5281  0491  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5282                           
  5283                           ;applicationcontrolRGB.h: 75: ConvertIntToTimeInMicrosecGreen = (ConvertIntToTimeInMicro
      +                          secGreen/ConvertIntoTenMsRangeFactor);
  5284  0492  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5285  0493  0020               	movlb	0	; select bank0
  5286  0494  00A9               	movwf	___awtoft@c+1
  5287  0495  0021               	movlb	1	; select bank1
  5288  0496  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5289  0497  0020               	movlb	0	; select bank0
  5290  0498  00A8               	movwf	___awtoft@c
  5291  0499  3193  23ED  3181   	fcall	___awtoft
  5292  049C  0020               	movlb	0	; select bank0
  5293  049D  0828               	movf	?___awtoft,w
  5294  049E  00AE               	movwf	___ftdiv@f2
  5295  049F  0829               	movf	?___awtoft+1,w
  5296  04A0  00AF               	movwf	___ftdiv@f2+1
  5297  04A1  082A               	movf	?___awtoft+2,w
  5298  04A2  00B0               	movwf	___ftdiv@f2+2
  5299  04A3  0021               	movlb	1	; select bank1
  5300  04A4  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5301  04A5  0020               	movlb	0	; select bank0
  5302  04A6  00B1               	movwf	___ftdiv@f1
  5303  04A7  0021               	movlb	1	; select bank1
  5304  04A8  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5305  04A9  0020               	movlb	0	; select bank0
  5306  04AA  00B2               	movwf	___ftdiv@f1+1
  5307  04AB  0021               	movlb	1	; select bank1
  5308  04AC  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5309  04AD  0020               	movlb	0	; select bank0
  5310  04AE  00B3               	movwf	___ftdiv@f1+2
  5311  04AF  3188  204F  3181   	fcall	___ftdiv
  5312  04B2  0020               	movlb	0	; select bank0
  5313  04B3  082E               	movf	?___ftdiv,w
  5314  04B4  0021               	movlb	1	; select bank1
  5315  04B5  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5316  04B6  0020               	movlb	0	; select bank0
  5317  04B7  082F               	movf	?___ftdiv+1,w
  5318  04B8  0021               	movlb	1	; select bank1
  5319  04B9  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5320  04BA  0020               	movlb	0	; select bank0
  5321  04BB  0830               	movf	?___ftdiv+2,w
  5322  04BC  0021               	movlb	1	; select bank1
  5323  04BD  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5324                           
  5325                           ;applicationcontrolRGB.h: 76: ConvertIntToTimeInMicrosecGreen = (ConvertIntToTimeInMicro
      +                          secGreen*1000);
  5326  04BE  3000               	movlw	0
  5327  04BF  0020               	movlb	0	; select bank0
  5328  04C0  00A8               	movwf	___ftmul@f1
  5329  04C1  307A               	movlw	122
  5330  04C2  00A9               	movwf	___ftmul@f1+1
  5331  04C3  3044               	movlw	68
  5332  04C4  00AA               	movwf	___ftmul@f1+2
  5333  04C5  0021               	movlb	1	; select bank1
  5334  04C6  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5335  04C7  0020               	movlb	0	; select bank0
  5336  04C8  00AB               	movwf	___ftmul@f2
  5337  04C9  0021               	movlb	1	; select bank1
  5338  04CA  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5339  04CB  0020               	movlb	0	; select bank0
  5340  04CC  00AC               	movwf	___ftmul@f2+1
  5341  04CD  0021               	movlb	1	; select bank1
  5342  04CE  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5343  04CF  0020               	movlb	0	; select bank0
  5344  04D0  00AD               	movwf	___ftmul@f2+2
  5345  04D1  3189  21AB  3181   	fcall	___ftmul
  5346  04D4  0020               	movlb	0	; select bank0
  5347  04D5  0828               	movf	?___ftmul,w
  5348  04D6  0021               	movlb	1	; select bank1
  5349  04D7  00E5               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128)
  5350  04D8  0020               	movlb	0	; select bank0
  5351  04D9  0829               	movf	?___ftmul+1,w
  5352  04DA  0021               	movlb	1	; select bank1
  5353  04DB  00E6               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128)
  5354  04DC  0020               	movlb	0	; select bank0
  5355  04DD  082A               	movf	?___ftmul+2,w
  5356  04DE  0021               	movlb	1	; select bank1
  5357  04DF  00E7               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128)
  5358                           
  5359                           ;applicationcontrolRGB.h: 77: GreenPulse = (int)(ConvertIntToTimeInMicrosecGreen/clockPe
      +                          rCycle);
  5360  04E0  0865               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecGreen^(0+128),w
  5361  04E1  0020               	movlb	0	; select bank0
  5362  04E2  00B1               	movwf	___ftdiv@f1
  5363  04E3  0021               	movlb	1	; select bank1
  5364  04E4  0866               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+1)^(0+128),w
  5365  04E5  0020               	movlb	0	; select bank0
  5366  04E6  00B2               	movwf	___ftdiv@f1+1
  5367  04E7  0021               	movlb	1	; select bank1
  5368  04E8  0867               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecGreen+2)^(0+128),w
  5369  04E9  0020               	movlb	0	; select bank0
  5370  04EA  00B3               	movwf	___ftdiv@f1+2
  5371  04EB  0021               	movlb	1	; select bank1
  5372  04EC  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5373  04ED  0020               	movlb	0	; select bank0
  5374  04EE  00AE               	movwf	___ftdiv@f2
  5375  04EF  0021               	movlb	1	; select bank1
  5376  04F0  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5377  04F1  0020               	movlb	0	; select bank0
  5378  04F2  00AF               	movwf	___ftdiv@f2+1
  5379  04F3  0021               	movlb	1	; select bank1
  5380  04F4  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5381  04F5  0020               	movlb	0	; select bank0
  5382  04F6  00B0               	movwf	___ftdiv@f2+2
  5383  04F7  3188  204F  3181   	fcall	___ftdiv
  5384  04FA  0020               	movlb	0	; select bank0
  5385  04FB  082E               	movf	?___ftdiv,w
  5386  04FC  00BE               	movwf	___fttol@f1
  5387  04FD  082F               	movf	?___ftdiv+1,w
  5388  04FE  00BF               	movwf	___fttol@f1+1
  5389  04FF  0830               	movf	?___ftdiv+2,w
  5390  0500  00C0               	movwf	___fttol@f1+2
  5391  0501  3197  2779  3181   	fcall	___fttol
  5392  0504  0020               	movlb	0	; select bank0
  5393  0505  083E               	movf	?___fttol,w
  5394  0506  0021               	movlb	1	; select bank1
  5395  0507  00AA               	movwf	applicationControlRGB@GreenPulse^(0+128)
  5396  0508  0020               	movlb	0	; select bank0
  5397  0509  083F               	movf	?___fttol+1,w
  5398  050A  0021               	movlb	1	; select bank1
  5399  050B  00AB               	movwf	(applicationControlRGB@GreenPulse+1)^(0+128)
  5400  050C  0D89               	rlf	9,f
  5401  050D  3B89               	subwfb	9,f
  5402  050E  0989               	comf	9,f
  5403  050F  00AC               	movwf	(applicationControlRGB@GreenPulse+2)^(0+128)
  5404  0510  00AD               	movwf	(applicationControlRGB@GreenPulse+3)^(0+128)
  5405                           
  5406                           ;applicationcontrolRGB.h: 78: NeedGreenPulse = abs(CompleteClock - GreenPulse);
  5407  0511  092A               	comf	applicationControlRGB@GreenPulse^(0+128),w
  5408  0512  0020               	movlb	0	; select bank0
  5409  0513  00D3               	movwf	??_applicationControlRGB
  5410  0514  0021               	movlb	1	; select bank1
  5411  0515  092B               	comf	(applicationControlRGB@GreenPulse+1)^(0+128),w
  5412  0516  0020               	movlb	0	; select bank0
  5413  0517  00D4               	movwf	??_applicationControlRGB+1
  5414  0518  0AD3               	incf	??_applicationControlRGB,f
  5415  0519  1903               	skipnz
  5416  051A  0AD4               	incf	??_applicationControlRGB+1,f
  5417  051B  0021               	movlb	1	; select bank1
  5418  051C  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5419  051D  0020               	movlb	0	; select bank0
  5420  051E  0753               	addwf	??_applicationControlRGB,w
  5421  051F  00A0               	movwf	abs@a
  5422  0520  0021               	movlb	1	; select bank1
  5423  0521  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5424  0522  0020               	movlb	0	; select bank0
  5425  0523  3D54               	addwfc	??_applicationControlRGB+1,w
  5426  0524  00A1               	movwf	abs@a+1
  5427  0525  3192  220C  3181   	fcall	_abs
  5428  0528  0020               	movlb	0	; select bank0
  5429  0529  0820               	movf	?_abs,w
  5430  052A  0021               	movlb	1	; select bank1
  5431  052B  00B6               	movwf	applicationControlRGB@NeedGreenPulse^(0+128)
  5432  052C  0020               	movlb	0	; select bank0
  5433  052D  0821               	movf	?_abs+1,w
  5434  052E  0021               	movlb	1	; select bank1
  5435  052F  00B7               	movwf	(applicationControlRGB@NeedGreenPulse+1)^(0+128)
  5436  0530  0D89               	rlf	9,f
  5437  0531  3B89               	subwfb	9,f
  5438  0532  0989               	comf	9,f
  5439  0533  00B8               	movwf	(applicationControlRGB@NeedGreenPulse+2)^(0+128)
  5440  0534  00B9               	movwf	(applicationControlRGB@NeedGreenPulse+3)^(0+128)
  5441                           
  5442                           ;applicationcontrolRGB.h: 82: ConvertIntToTimeInMicrosecBlue = (IntegerBlueColorIntensit
      +                          y/Convert255RangeintoHundred);
  5443  0535  085A               	movf	applicationControlRGB@Convert255RangeintoHundred^(0+128),w
  5444  0536  0020               	movlb	0	; select bank0
  5445  0537  00AE               	movwf	___ftdiv@f2
  5446  0538  0021               	movlb	1	; select bank1
  5447  0539  085B               	movf	(applicationControlRGB@Convert255RangeintoHundred+1)^(0+128),w
  5448  053A  0020               	movlb	0	; select bank0
  5449  053B  00AF               	movwf	___ftdiv@f2+1
  5450  053C  0021               	movlb	1	; select bank1
  5451  053D  085C               	movf	(applicationControlRGB@Convert255RangeintoHundred+2)^(0+128),w
  5452  053E  0020               	movlb	0	; select bank0
  5453  053F  00B0               	movwf	___ftdiv@f2+2
  5454  0540  0871               	movf	_IntegerBlueColorIntensity+1,w
  5455  0541  00A9               	movwf	___lwtoft@c+1
  5456  0542  0870               	movf	_IntegerBlueColorIntensity,w
  5457  0543  00A8               	movwf	___lwtoft@c
  5458  0544  3192  2264  3181   	fcall	___lwtoft
  5459  0547  0020               	movlb	0	; select bank0
  5460  0548  0828               	movf	?___lwtoft,w
  5461  0549  00B1               	movwf	___ftdiv@f1
  5462  054A  0829               	movf	?___lwtoft+1,w
  5463  054B  00B2               	movwf	___ftdiv@f1+1
  5464  054C  082A               	movf	?___lwtoft+2,w
  5465  054D  00B3               	movwf	___ftdiv@f1+2
  5466  054E  3188  204F  3181   	fcall	___ftdiv
  5467  0551  0020               	movlb	0	; select bank0
  5468  0552  082E               	movf	?___ftdiv,w
  5469  0553  0021               	movlb	1	; select bank1
  5470  0554  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5471  0555  0020               	movlb	0	; select bank0
  5472  0556  082F               	movf	?___ftdiv+1,w
  5473  0557  0021               	movlb	1	; select bank1
  5474  0558  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5475  0559  0020               	movlb	0	; select bank0
  5476  055A  0830               	movf	?___ftdiv+2,w
  5477  055B  0021               	movlb	1	; select bank1
  5478  055C  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5479                           
  5480                           ;applicationcontrolRGB.h: 83: ConvertIntToTimeInMicrosecBlue = (ConvertIntToTimeInMicros
      +                          ecBlue/ConvertIntoTenMsRangeFactor);
  5481  055D  0861               	movf	(applicationControlRGB@ConvertIntoTenMsRangeFactor+1)^(0+128),w
  5482  055E  0020               	movlb	0	; select bank0
  5483  055F  00A9               	movwf	___awtoft@c+1
  5484  0560  0021               	movlb	1	; select bank1
  5485  0561  0860               	movf	applicationControlRGB@ConvertIntoTenMsRangeFactor^(0+128),w
  5486  0562  0020               	movlb	0	; select bank0
  5487  0563  00A8               	movwf	___awtoft@c
  5488  0564  3193  23ED  3181   	fcall	___awtoft
  5489  0567  0020               	movlb	0	; select bank0
  5490  0568  0828               	movf	?___awtoft,w
  5491  0569  00AE               	movwf	___ftdiv@f2
  5492  056A  0829               	movf	?___awtoft+1,w
  5493  056B  00AF               	movwf	___ftdiv@f2+1
  5494  056C  082A               	movf	?___awtoft+2,w
  5495  056D  00B0               	movwf	___ftdiv@f2+2
  5496  056E  0021               	movlb	1	; select bank1
  5497  056F  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5498  0570  0020               	movlb	0	; select bank0
  5499  0571  00B1               	movwf	___ftdiv@f1
  5500  0572  0021               	movlb	1	; select bank1
  5501  0573  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5502  0574  0020               	movlb	0	; select bank0
  5503  0575  00B2               	movwf	___ftdiv@f1+1
  5504  0576  0021               	movlb	1	; select bank1
  5505  0577  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5506  0578  0020               	movlb	0	; select bank0
  5507  0579  00B3               	movwf	___ftdiv@f1+2
  5508  057A  3188  204F  3181   	fcall	___ftdiv
  5509  057D  0020               	movlb	0	; select bank0
  5510  057E  082E               	movf	?___ftdiv,w
  5511  057F  0021               	movlb	1	; select bank1
  5512  0580  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5513  0581  0020               	movlb	0	; select bank0
  5514  0582  082F               	movf	?___ftdiv+1,w
  5515  0583  0021               	movlb	1	; select bank1
  5516  0584  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5517  0585  0020               	movlb	0	; select bank0
  5518  0586  0830               	movf	?___ftdiv+2,w
  5519  0587  0021               	movlb	1	; select bank1
  5520  0588  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5521                           
  5522                           ;applicationcontrolRGB.h: 84: ConvertIntToTimeInMicrosecBlue = (ConvertIntToTimeInMicros
      +                          ecBlue*1000);
  5523  0589  3000               	movlw	0
  5524  058A  0020               	movlb	0	; select bank0
  5525  058B  00A8               	movwf	___ftmul@f1
  5526  058C  307A               	movlw	122
  5527  058D  00A9               	movwf	___ftmul@f1+1
  5528  058E  3044               	movlw	68
  5529  058F  00AA               	movwf	___ftmul@f1+2
  5530  0590  0021               	movlb	1	; select bank1
  5531  0591  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5532  0592  0020               	movlb	0	; select bank0
  5533  0593  00AB               	movwf	___ftmul@f2
  5534  0594  0021               	movlb	1	; select bank1
  5535  0595  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5536  0596  0020               	movlb	0	; select bank0
  5537  0597  00AC               	movwf	___ftmul@f2+1
  5538  0598  0021               	movlb	1	; select bank1
  5539  0599  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5540  059A  0020               	movlb	0	; select bank0
  5541  059B  00AD               	movwf	___ftmul@f2+2
  5542  059C  3189  21AB  3181   	fcall	___ftmul
  5543  059F  0020               	movlb	0	; select bank0
  5544  05A0  0828               	movf	?___ftmul,w
  5545  05A1  0021               	movlb	1	; select bank1
  5546  05A2  00E8               	movwf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128)
  5547  05A3  0020               	movlb	0	; select bank0
  5548  05A4  0829               	movf	?___ftmul+1,w
  5549  05A5  0021               	movlb	1	; select bank1
  5550  05A6  00E9               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128)
  5551  05A7  0020               	movlb	0	; select bank0
  5552  05A8  082A               	movf	?___ftmul+2,w
  5553  05A9  0021               	movlb	1	; select bank1
  5554  05AA  00EA               	movwf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128)
  5555                           
  5556                           ;applicationcontrolRGB.h: 85: BluePulse = (int)(ConvertIntToTimeInMicrosecBlue/clockPerC
      +                          ycle);
  5557  05AB  0868               	movf	applicationControlRGB@ConvertIntToTimeInMicrosecBlue^(0+128),w
  5558  05AC  0020               	movlb	0	; select bank0
  5559  05AD  00B1               	movwf	___ftdiv@f1
  5560  05AE  0021               	movlb	1	; select bank1
  5561  05AF  0869               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+1)^(0+128),w
  5562  05B0  0020               	movlb	0	; select bank0
  5563  05B1  00B2               	movwf	___ftdiv@f1+1
  5564  05B2  0021               	movlb	1	; select bank1
  5565  05B3  086A               	movf	(applicationControlRGB@ConvertIntToTimeInMicrosecBlue+2)^(0+128),w
  5566  05B4  0020               	movlb	0	; select bank0
  5567  05B5  00B3               	movwf	___ftdiv@f1+2
  5568  05B6  0021               	movlb	1	; select bank1
  5569  05B7  085D               	movf	applicationControlRGB@clockPerCycle^(0+128),w
  5570  05B8  0020               	movlb	0	; select bank0
  5571  05B9  00AE               	movwf	___ftdiv@f2
  5572  05BA  0021               	movlb	1	; select bank1
  5573  05BB  085E               	movf	(applicationControlRGB@clockPerCycle+1)^(0+128),w
  5574  05BC  0020               	movlb	0	; select bank0
  5575  05BD  00AF               	movwf	___ftdiv@f2+1
  5576  05BE  0021               	movlb	1	; select bank1
  5577  05BF  085F               	movf	(applicationControlRGB@clockPerCycle+2)^(0+128),w
  5578  05C0  0020               	movlb	0	; select bank0
  5579  05C1  00B0               	movwf	___ftdiv@f2+2
  5580  05C2  3188  204F  3181   	fcall	___ftdiv
  5581  05C5  0020               	movlb	0	; select bank0
  5582  05C6  082E               	movf	?___ftdiv,w
  5583  05C7  00BE               	movwf	___fttol@f1
  5584  05C8  082F               	movf	?___ftdiv+1,w
  5585  05C9  00BF               	movwf	___fttol@f1+1
  5586  05CA  0830               	movf	?___ftdiv+2,w
  5587  05CB  00C0               	movwf	___fttol@f1+2
  5588  05CC  3197  2779  3181   	fcall	___fttol
  5589  05CF  0020               	movlb	0	; select bank0
  5590  05D0  083E               	movf	?___fttol,w
  5591  05D1  0021               	movlb	1	; select bank1
  5592  05D2  00AE               	movwf	applicationControlRGB@BluePulse^(0+128)
  5593  05D3  0020               	movlb	0	; select bank0
  5594  05D4  083F               	movf	?___fttol+1,w
  5595  05D5  0021               	movlb	1	; select bank1
  5596  05D6  00AF               	movwf	(applicationControlRGB@BluePulse+1)^(0+128)
  5597  05D7  0D89               	rlf	9,f
  5598  05D8  3B89               	subwfb	9,f
  5599  05D9  0989               	comf	9,f
  5600  05DA  00B0               	movwf	(applicationControlRGB@BluePulse+2)^(0+128)
  5601  05DB  00B1               	movwf	(applicationControlRGB@BluePulse+3)^(0+128)
  5602                           
  5603                           ;applicationcontrolRGB.h: 86: NeedBluePulse = abs(CompleteClock - BluePulse);
  5604  05DC  092E               	comf	applicationControlRGB@BluePulse^(0+128),w
  5605  05DD  0020               	movlb	0	; select bank0
  5606  05DE  00D3               	movwf	??_applicationControlRGB
  5607  05DF  0021               	movlb	1	; select bank1
  5608  05E0  092F               	comf	(applicationControlRGB@BluePulse+1)^(0+128),w
  5609  05E1  0020               	movlb	0	; select bank0
  5610  05E2  00D4               	movwf	??_applicationControlRGB+1
  5611  05E3  0AD3               	incf	??_applicationControlRGB,f
  5612  05E4  1903               	skipnz
  5613  05E5  0AD4               	incf	??_applicationControlRGB+1,f
  5614  05E6  0021               	movlb	1	; select bank1
  5615  05E7  0856               	movf	applicationControlRGB@CompleteClock^(0+128),w
  5616  05E8  0020               	movlb	0	; select bank0
  5617  05E9  0753               	addwf	??_applicationControlRGB,w
  5618  05EA  00A0               	movwf	abs@a
  5619  05EB  0021               	movlb	1	; select bank1
  5620  05EC  0857               	movf	(applicationControlRGB@CompleteClock+1)^(0+128),w
  5621  05ED  0020               	movlb	0	; select bank0
  5622  05EE  3D54               	addwfc	??_applicationControlRGB+1,w
  5623  05EF  00A1               	movwf	abs@a+1
  5624  05F0  3192  220C  3181   	fcall	_abs
  5625  05F3  0020               	movlb	0	; select bank0
  5626  05F4  0820               	movf	?_abs,w
  5627  05F5  0021               	movlb	1	; select bank1
  5628  05F6  00BA               	movwf	applicationControlRGB@NeedBluePulse^(0+128)
  5629  05F7  0020               	movlb	0	; select bank0
  5630  05F8  0821               	movf	?_abs+1,w
  5631  05F9  0021               	movlb	1	; select bank1
  5632  05FA  00BB               	movwf	(applicationControlRGB@NeedBluePulse+1)^(0+128)
  5633  05FB  0D89               	rlf	9,f
  5634  05FC  3B89               	subwfb	9,f
  5635  05FD  0989               	comf	9,f
  5636  05FE  00BC               	movwf	(applicationControlRGB@NeedBluePulse+2)^(0+128)
  5637  05FF  00BD               	movwf	(applicationControlRGB@NeedBluePulse+3)^(0+128)
  5638                           
  5639                           ;applicationcontrolRGB.h: 90: sprintf(HexlevelBuffer,"%X",NeedRedPulse);
  5640  0600  3038               	movlw	low (STR_11| (0+32768))
  5641  0601  0020               	movlb	0	; select bank0
  5642  0602  00A8               	movwf	sprintf@f
  5643  0603  3098               	movlw	high (STR_11| (0+32768))
  5644  0604  00A9               	movwf	sprintf@f+1
  5645  0605  0021               	movlb	1	; select bank1
  5646  0606  0835               	movf	(applicationControlRGB@NeedRedPulse+3)^(0+128),w
  5647  0607  0020               	movlb	0	; select bank0
  5648  0608  00AD               	movwf	?_sprintf+5
  5649  0609  0021               	movlb	1	; select bank1
  5650  060A  0834               	movf	(applicationControlRGB@NeedRedPulse+2)^(0+128),w
  5651  060B  0020               	movlb	0	; select bank0
  5652  060C  00AC               	movwf	?_sprintf+4
  5653  060D  0021               	movlb	1	; select bank1
  5654  060E  0833               	movf	(applicationControlRGB@NeedRedPulse+1)^(0+128),w
  5655  060F  0020               	movlb	0	; select bank0
  5656  0610  00AB               	movwf	?_sprintf+3
  5657  0611  0021               	movlb	1	; select bank1
  5658  0612  0832               	movf	applicationControlRGB@NeedRedPulse^(0+128),w
  5659  0613  0020               	movlb	0	; select bank0
  5660  0614  00AA               	movwf	?_sprintf+2
  5661  0615  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5662  0616  3188  20F8  3181   	fcall	_sprintf
  5663                           
  5664                           ;applicationcontrolRGB.h: 91: strncpy(strRedH,HexlevelBuffer,2);
  5665  0619  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5666  061A  0020               	movlb	0	; select bank0
  5667  061B  00D3               	movwf	??_applicationControlRGB
  5668  061C  0853               	movf	??_applicationControlRGB,w
  5669  061D  00A0               	movwf	strncpy@from
  5670  061E  3002               	movlw	2
  5671  061F  00A1               	movwf	strncpy@size
  5672  0620  3000               	movlw	0
  5673  0621  00A2               	movwf	strncpy@size+1
  5674  0622  30BF               	movlw	(low (applicationControlRGB@strRedH| 0))& (0+255)
  5675  0623  3194  248B  3181   	fcall	_strncpy
  5676                           
  5677                           ;applicationcontrolRGB.h: 92: strRedH[2]='\0';
  5678  0626  0021               	movlb	1	; select bank1
  5679  0627  01C1               	clrf	(applicationControlRGB@strRedH^(0+128)+2)
  5680                           
  5681                           ;applicationcontrolRGB.h: 93: strncpy(strRedL,HexlevelBuffer+2,2);
  5682  0628  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5683  0629  0020               	movlb	0	; select bank0
  5684  062A  00D3               	movwf	??_applicationControlRGB
  5685  062B  0853               	movf	??_applicationControlRGB,w
  5686  062C  00A0               	movwf	strncpy@from
  5687  062D  3002               	movlw	2
  5688  062E  00A1               	movwf	strncpy@size
  5689  062F  3000               	movlw	0
  5690  0630  00A2               	movwf	strncpy@size+1
  5691  0631  30C2               	movlw	(low (applicationControlRGB@strRedL| 0))& (0+255)
  5692  0632  3194  248B  3181   	fcall	_strncpy
  5693                           
  5694                           ;applicationcontrolRGB.h: 94: strRedL[2]='\0';
  5695  0635  0021               	movlb	1	; select bank1
  5696  0636  01C4               	clrf	(applicationControlRGB@strRedL^(0+128)+2)
  5697                           
  5698                           ;applicationcontrolRGB.h: 95: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5699  0637  3030               	movlw	48
  5700  0638  0020               	movlb	0	; select bank0
  5701  0639  00A0               	movwf	memset@c
  5702  063A  3000               	movlw	0
  5703  063B  00A1               	movwf	memset@c+1
  5704  063C  3005               	movlw	5
  5705  063D  00A2               	movwf	memset@n
  5706  063E  3000               	movlw	0
  5707  063F  00A3               	movwf	memset@n+1
  5708  0640  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5709  0641  3192  22C2  3181   	fcall	_memset
  5710                           
  5711                           ;applicationcontrolRGB.h: 97: sprintf(HexlevelBuffer,"%X",NeedGreenPulse);
  5712  0644  3038               	movlw	low (STR_11| (0+32768))
  5713  0645  0020               	movlb	0	; select bank0
  5714  0646  00A8               	movwf	sprintf@f
  5715  0647  3098               	movlw	high (STR_11| (0+32768))
  5716  0648  00A9               	movwf	sprintf@f+1
  5717  0649  0021               	movlb	1	; select bank1
  5718  064A  0839               	movf	(applicationControlRGB@NeedGreenPulse+3)^(0+128),w
  5719  064B  0020               	movlb	0	; select bank0
  5720  064C  00AD               	movwf	?_sprintf+5
  5721  064D  0021               	movlb	1	; select bank1
  5722  064E  0838               	movf	(applicationControlRGB@NeedGreenPulse+2)^(0+128),w
  5723  064F  0020               	movlb	0	; select bank0
  5724  0650  00AC               	movwf	?_sprintf+4
  5725  0651  0021               	movlb	1	; select bank1
  5726  0652  0837               	movf	(applicationControlRGB@NeedGreenPulse+1)^(0+128),w
  5727  0653  0020               	movlb	0	; select bank0
  5728  0654  00AB               	movwf	?_sprintf+3
  5729  0655  0021               	movlb	1	; select bank1
  5730  0656  0836               	movf	applicationControlRGB@NeedGreenPulse^(0+128),w
  5731  0657  0020               	movlb	0	; select bank0
  5732  0658  00AA               	movwf	?_sprintf+2
  5733  0659  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5734  065A  3188  20F8  3181   	fcall	_sprintf
  5735                           
  5736                           ;applicationcontrolRGB.h: 98: strncpy(strGreenH,HexlevelBuffer,2);
  5737  065D  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5738  065E  0020               	movlb	0	; select bank0
  5739  065F  00D3               	movwf	??_applicationControlRGB
  5740  0660  0853               	movf	??_applicationControlRGB,w
  5741  0661  00A0               	movwf	strncpy@from
  5742  0662  3002               	movlw	2
  5743  0663  00A1               	movwf	strncpy@size
  5744  0664  3000               	movlw	0
  5745  0665  00A2               	movwf	strncpy@size+1
  5746  0666  30C5               	movlw	(low (applicationControlRGB@strGreenH| 0))& (0+255)
  5747  0667  3194  248B  3181   	fcall	_strncpy
  5748                           
  5749                           ;applicationcontrolRGB.h: 99: strGreenH[2]='\0';
  5750  066A  0021               	movlb	1	; select bank1
  5751  066B  01C7               	clrf	(applicationControlRGB@strGreenH^(0+128)+2)
  5752                           
  5753                           ;applicationcontrolRGB.h: 100: strncpy(strGreenL,HexlevelBuffer+2,2);
  5754  066C  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5755  066D  0020               	movlb	0	; select bank0
  5756  066E  00D3               	movwf	??_applicationControlRGB
  5757  066F  0853               	movf	??_applicationControlRGB,w
  5758  0670  00A0               	movwf	strncpy@from
  5759  0671  3002               	movlw	2
  5760  0672  00A1               	movwf	strncpy@size
  5761  0673  3000               	movlw	0
  5762  0674  00A2               	movwf	strncpy@size+1
  5763  0675  30C8               	movlw	(low (applicationControlRGB@strGreenL| 0))& (0+255)
  5764  0676  3194  248B  3181   	fcall	_strncpy
  5765                           
  5766                           ;applicationcontrolRGB.h: 101: strGreenL[2]='\0';
  5767  0679  0021               	movlb	1	; select bank1
  5768  067A  01CA               	clrf	(applicationControlRGB@strGreenL^(0+128)+2)
  5769                           
  5770                           ;applicationcontrolRGB.h: 102: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5771  067B  3030               	movlw	48
  5772  067C  0020               	movlb	0	; select bank0
  5773  067D  00A0               	movwf	memset@c
  5774  067E  3000               	movlw	0
  5775  067F  00A1               	movwf	memset@c+1
  5776  0680  3005               	movlw	5
  5777  0681  00A2               	movwf	memset@n
  5778  0682  3000               	movlw	0
  5779  0683  00A3               	movwf	memset@n+1
  5780  0684  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5781  0685  3192  22C2  3181   	fcall	_memset
  5782                           
  5783                           ;applicationcontrolRGB.h: 105: sprintf(HexlevelBuffer,"%X",NeedBluePulse);
  5784  0688  3038               	movlw	low (STR_11| (0+32768))
  5785  0689  0020               	movlb	0	; select bank0
  5786  068A  00A8               	movwf	sprintf@f
  5787  068B  3098               	movlw	high (STR_11| (0+32768))
  5788  068C  00A9               	movwf	sprintf@f+1
  5789  068D  0021               	movlb	1	; select bank1
  5790  068E  083D               	movf	(applicationControlRGB@NeedBluePulse+3)^(0+128),w
  5791  068F  0020               	movlb	0	; select bank0
  5792  0690  00AD               	movwf	?_sprintf+5
  5793  0691  0021               	movlb	1	; select bank1
  5794  0692  083C               	movf	(applicationControlRGB@NeedBluePulse+2)^(0+128),w
  5795  0693  0020               	movlb	0	; select bank0
  5796  0694  00AC               	movwf	?_sprintf+4
  5797  0695  0021               	movlb	1	; select bank1
  5798  0696  083B               	movf	(applicationControlRGB@NeedBluePulse+1)^(0+128),w
  5799  0697  0020               	movlb	0	; select bank0
  5800  0698  00AB               	movwf	?_sprintf+3
  5801  0699  0021               	movlb	1	; select bank1
  5802  069A  083A               	movf	applicationControlRGB@NeedBluePulse^(0+128),w
  5803  069B  0020               	movlb	0	; select bank0
  5804  069C  00AA               	movwf	?_sprintf+2
  5805  069D  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5806  069E  3188  20F8  3181   	fcall	_sprintf
  5807                           
  5808                           ;applicationcontrolRGB.h: 106: strncpy(strBlueH,HexlevelBuffer,2);
  5809  06A1  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5810  06A2  0020               	movlb	0	; select bank0
  5811  06A3  00D3               	movwf	??_applicationControlRGB
  5812  06A4  0853               	movf	??_applicationControlRGB,w
  5813  06A5  00A0               	movwf	strncpy@from
  5814  06A6  3002               	movlw	2
  5815  06A7  00A1               	movwf	strncpy@size
  5816  06A8  3000               	movlw	0
  5817  06A9  00A2               	movwf	strncpy@size+1
  5818  06AA  30CB               	movlw	(low (applicationControlRGB@strBlueH| 0))& (0+255)
  5819  06AB  3194  248B  3181   	fcall	_strncpy
  5820                           
  5821                           ;applicationcontrolRGB.h: 107: strBlueH[2]='\0';
  5822  06AE  0021               	movlb	1	; select bank1
  5823  06AF  01CD               	clrf	(applicationControlRGB@strBlueH^(0+128)+2)
  5824                           
  5825                           ;applicationcontrolRGB.h: 108: strncpy(strBlueL,HexlevelBuffer+2,2);
  5826  06B0  30D3               	movlw	(low ((applicationControlRGB@HexlevelBuffer| 0+2)))& (0+255)
  5827  06B1  0020               	movlb	0	; select bank0
  5828  06B2  00D3               	movwf	??_applicationControlRGB
  5829  06B3  0853               	movf	??_applicationControlRGB,w
  5830  06B4  00A0               	movwf	strncpy@from
  5831  06B5  3002               	movlw	2
  5832  06B6  00A1               	movwf	strncpy@size
  5833  06B7  3000               	movlw	0
  5834  06B8  00A2               	movwf	strncpy@size+1
  5835  06B9  30CE               	movlw	(low (applicationControlRGB@strBlueL| 0))& (0+255)
  5836  06BA  3194  248B  3181   	fcall	_strncpy
  5837                           
  5838                           ;applicationcontrolRGB.h: 109: strBlueL[2]='\0';
  5839  06BD  0021               	movlb	1	; select bank1
  5840  06BE  01D0               	clrf	(applicationControlRGB@strBlueL^(0+128)+2)
  5841                           
  5842                           ;applicationcontrolRGB.h: 110: memset(HexlevelBuffer,'0',sizeof(HexlevelBuffer));
  5843  06BF  3030               	movlw	48
  5844  06C0  0020               	movlb	0	; select bank0
  5845  06C1  00A0               	movwf	memset@c
  5846  06C2  3000               	movlw	0
  5847  06C3  00A1               	movwf	memset@c+1
  5848  06C4  3005               	movlw	5
  5849  06C5  00A2               	movwf	memset@n
  5850  06C6  3000               	movlw	0
  5851  06C7  00A3               	movwf	memset@n+1
  5852  06C8  30D1               	movlw	(low (applicationControlRGB@HexlevelBuffer| 0))& (0+255)
  5853  06C9  3192  22C2  3181   	fcall	_memset
  5854                           
  5855                           ;applicationcontrolRGB.h: 114: switch(IntegerSwitchNumber)
  5856  06CC  2F82               	goto	l5463
  5857  06CD                     l5401:	
  5858                           ;applicationcontrolRGB.h: 118: case 0:
  5859                           
  5860                           ;applicationcontrolRGB.h: 117: switch(IntergerSwitchStatus){
  5861                           
  5862                           ;applicationcontrolRGB.h: 115: {
  5863                           ;applicationcontrolRGB.h: 116: case 9 :{
  5864                           
  5865                           
  5866                           ;applicationcontrolRGB.h: 119: start_PWM_Generation_For_BlueLed = start_PWM_Generation_F
      +                          or_GreenLed = start_PWM_Generation_For_RedLed = 0;
  5867  06CD  0022               	movlb	2	; select bank2
  5868  06CE  01CC               	clrf	_start_PWM_Generation_For_RedLed^(0+256)
  5869  06CF  01CD               	clrf	(_start_PWM_Generation_For_RedLed+1)^(0+256)
  5870  06D0  01CA               	clrf	_start_PWM_Generation_For_GreenLed^(0+256)
  5871  06D1  01CB               	clrf	(_start_PWM_Generation_For_GreenLed+1)^(0+256)
  5872  06D2  01C8               	clrf	_start_PWM_Generation_For_BlueLed^(0+256)
  5873  06D3  01C9               	clrf	(_start_PWM_Generation_For_BlueLed+1)^(0+256)
  5874                           
  5875                           ;applicationcontrolRGB.h: 120: PORTDbits.RD4 = 0;
  5876  06D4  0020               	movlb	0	; select bank0
  5877  06D5  120F               	bcf	15,4	;volatile
  5878                           
  5879                           ;applicationcontrolRGB.h: 121: PORTDbits.RD3 = 0;
  5880  06D6  118F               	bcf	15,3	;volatile
  5881                           
  5882                           ;applicationcontrolRGB.h: 122: PORTDbits.RD2 = 0;
  5883  06D7  110F               	bcf	15,2	;volatile
  5884                           
  5885                           ;applicationcontrolRGB.h: 123: break;
  5886  06D8  0008               	return
  5887  06D9                     l5409:	
  5888                           ;applicationcontrolRGB.h: 124: case 1:
  5889                           
  5890                           
  5891                           ;applicationcontrolRGB.h: 125: if(IntergerRedColorIntensity == 255)
  5892  06D9  0021               	movlb	1	; select bank1
  5893  06DA  0A6D               	incf	_IntergerRedColorIntensity^(0+128),w
  5894  06DB  046E               	iorwf	(_IntergerRedColorIntensity+1)^(0+128),w
  5895  06DC  1D03               	btfss	3,2
  5896  06DD  2EE1               	goto	l5413
  5897                           
  5898                           ;applicationcontrolRGB.h: 126: PORTDbits.RD4=1;
  5899  06DE  0020               	movlb	0	; select bank0
  5900  06DF  160F               	bsf	15,4	;volatile
  5901  06E0  2F0D               	goto	l5425
  5902  06E1                     l5413:	
  5903                           
  5904                           ;applicationcontrolRGB.h: 128: else if(IntergerRedColorIntensity == 0)
  5905  06E1  0021               	movlb	1	; select bank1
  5906  06E2  086D               	movf	_IntergerRedColorIntensity^(0+128),w
  5907  06E3  046E               	iorwf	(_IntergerRedColorIntensity+1)^(0+128),w
  5908  06E4  1D03               	btfss	3,2
  5909  06E5  2EE9               	goto	l5417
  5910                           
  5911                           ;applicationcontrolRGB.h: 129: PORTDbits.RD4=0;
  5912  06E6  0020               	movlb	0	; select bank0
  5913  06E7  120F               	bcf	15,4	;volatile
  5914  06E8  2F0D               	goto	l5425
  5915  06E9                     l5417:	
  5916                           
  5917                           ;applicationcontrolRGB.h: 130: else
  5918                           ;applicationcontrolRGB.h: 131: {
  5919                           ;applicationcontrolRGB.h: 132: TX1REG = 'R';
  5920  06E9  3052               	movlw	82
  5921  06EA  0023               	movlb	3	; select bank3
  5922  06EB  009A               	movwf	26	;volatile
  5923                           
  5924                           ;applicationcontrolRGB.h: 133: start_PWM_Generation_For_RedLed = 1;
  5925  06EC  3001               	movlw	1
  5926  06ED  0022               	movlb	2	; select bank2
  5927  06EE  00CC               	movwf	_start_PWM_Generation_For_RedLed^(0+256)
  5928  06EF  3000               	movlw	0
  5929  06F0  00CD               	movwf	(_start_PWM_Generation_For_RedLed^(0+256)+1)
  5930                           
  5931                           ;applicationcontrolRGB.h: 134: Timer1H = hexadecimalToDecimal(strRedH);
  5932  06F1  30BF               	movlw	(low (applicationControlRGB@strRedH| 0))& (0+255)
  5933  06F2  3196  26F7  3181   	fcall	_hexadecimalToDecimal
  5934  06F5  0020               	movlb	0	; select bank0
  5935  06F6  0827               	movf	?_hexadecimalToDecimal+1,w
  5936  06F7  0022               	movlb	2	; select bank2
  5937  06F8  00C7               	movwf	(_Timer1H+1)^(0+256)
  5938  06F9  0020               	movlb	0	; select bank0
  5939  06FA  0826               	movf	?_hexadecimalToDecimal,w
  5940  06FB  0022               	movlb	2	; select bank2
  5941  06FC  00C6               	movwf	_Timer1H^(0+256)
  5942                           
  5943                           ;applicationcontrolRGB.h: 135: Timer1L = hexadecimalToDecimal(strRedL);
  5944  06FD  30C2               	movlw	(low (applicationControlRGB@strRedL| 0))& (0+255)
  5945  06FE  3196  26F7  3181   	fcall	_hexadecimalToDecimal
  5946  0701  0020               	movlb	0	; select bank0
  5947  0702  0827               	movf	?_hexadecimalToDecimal+1,w
  5948  0703  0022               	movlb	2	; select bank2
  5949  0704  00C5               	movwf	(_Timer1L+1)^(0+256)
  5950  0705  0020               	movlb	0	; select bank0
  5951  0706  0826               	movf	?_hexadecimalToDecimal,w
  5952  0707  0022               	movlb	2	; select bank2
  5953  0708  00C4               	movwf	_Timer1L^(0+256)
  5954                           
  5955                           ;applicationcontrolRGB.h: 136: PR2=0xF0;
  5956  0709  30F0               	movlw	240
  5957  070A  0020               	movlb	0	; select bank0
  5958  070B  009B               	movwf	27	;volatile
  5959                           
  5960                           ;applicationcontrolRGB.h: 137: T2CONbits.TMR2ON=1;
  5961  070C  151C               	bsf	28,2	;volatile
  5962  070D                     l5425:	
  5963                           
  5964                           ;applicationcontrolRGB.h: 139: }
  5965                           ;applicationcontrolRGB.h: 140: if(IntegerGreenColorIntensity == 255)
  5966  070D  0021               	movlb	1	; select bank1
  5967  070E  0A6B               	incf	_IntegerGreenColorIntensity^(0+128),w
  5968  070F  046C               	iorwf	(_IntegerGreenColorIntensity+1)^(0+128),w
  5969  0710  1D03               	btfss	3,2
  5970  0711  2F15               	goto	l5429
  5971                           
  5972                           ;applicationcontrolRGB.h: 141: PORTDbits.RD3=1;
  5973  0712  0020               	movlb	0	; select bank0
  5974  0713  158F               	bsf	15,3	;volatile
  5975  0714  2F41               	goto	l5441
  5976  0715                     l5429:	
  5977                           
  5978                           ;applicationcontrolRGB.h: 142: else if(IntegerGreenColorIntensity == 0)
  5979  0715  0021               	movlb	1	; select bank1
  5980  0716  086B               	movf	_IntegerGreenColorIntensity^(0+128),w
  5981  0717  046C               	iorwf	(_IntegerGreenColorIntensity+1)^(0+128),w
  5982  0718  1D03               	btfss	3,2
  5983  0719  2F1D               	goto	l5433
  5984                           
  5985                           ;applicationcontrolRGB.h: 143: PORTDbits.RD3=0;
  5986  071A  0020               	movlb	0	; select bank0
  5987  071B  118F               	bcf	15,3	;volatile
  5988  071C  2F41               	goto	l5441
  5989  071D                     l5433:	
  5990                           
  5991                           ;applicationcontrolRGB.h: 144: else
  5992                           ;applicationcontrolRGB.h: 145: {
  5993                           ;applicationcontrolRGB.h: 146: TX1REG = 'G';
  5994  071D  3047               	movlw	71
  5995  071E  0023               	movlb	3	; select bank3
  5996  071F  009A               	movwf	26	;volatile
  5997                           
  5998                           ;applicationcontrolRGB.h: 148: start_PWM_Generation_For_GreenLed = 1;
  5999  0720  3001               	movlw	1
  6000  0721  0022               	movlb	2	; select bank2
  6001  0722  00CA               	movwf	_start_PWM_Generation_For_GreenLed^(0+256)
  6002  0723  3000               	movlw	0
  6003  0724  00CB               	movwf	(_start_PWM_Generation_For_GreenLed^(0+256)+1)
  6004                           
  6005                           ;applicationcontrolRGB.h: 149: Timer3H = hexadecimalToDecimal(strGreenH);
  6006  0725  30C5               	movlw	(low (applicationControlRGB@strGreenH| 0))& (0+255)
  6007  0726  3196  26F7  3181   	fcall	_hexadecimalToDecimal
  6008  0729  0020               	movlb	0	; select bank0
  6009  072A  0827               	movf	?_hexadecimalToDecimal+1,w
  6010  072B  0022               	movlb	2	; select bank2
  6011  072C  00C3               	movwf	(_Timer3H+1)^(0+256)
  6012  072D  0020               	movlb	0	; select bank0
  6013  072E  0826               	movf	?_hexadecimalToDecimal,w
  6014  072F  0022               	movlb	2	; select bank2
  6015  0730  00C2               	movwf	_Timer3H^(0+256)
  6016                           
  6017                           ;applicationcontrolRGB.h: 150: Timer3L = hexadecimalToDecimal(strGreenL);
  6018  0731  30C8               	movlw	(low (applicationControlRGB@strGreenL| 0))& (0+255)
  6019  0732  3196  26F7  3181   	fcall	_hexadecimalToDecimal
  6020  0735  0020               	movlb	0	; select bank0
  6021  0736  0827               	movf	?_hexadecimalToDecimal+1,w
  6022  0737  0022               	movlb	2	; select bank2
  6023  0738  00C1               	movwf	(_Timer3L+1)^(0+256)
  6024  0739  0020               	movlb	0	; select bank0
  6025  073A  0826               	movf	?_hexadecimalToDecimal,w
  6026  073B  0022               	movlb	2	; select bank2
  6027  073C  00C0               	movwf	_Timer3L^(0+256)
  6028                           
  6029                           ;applicationcontrolRGB.h: 151: PR4=0xF0;
  6030  073D  30F0               	movlw	240
  6031  073E  0028               	movlb	8	; select bank8
  6032  073F  0096               	movwf	22	;volatile
  6033                           
  6034                           ;applicationcontrolRGB.h: 152: T4CONbits.TMR4ON=1;
  6035  0740  1517               	bsf	23,2	;volatile
  6036  0741                     l5441:	
  6037                           
  6038                           ;applicationcontrolRGB.h: 153: }
  6039                           ;applicationcontrolRGB.h: 154: if(IntegerBlueColorIntensity == 255)
  6040  0741  0A70               	incf	_IntegerBlueColorIntensity,w
  6041  0742  0471               	iorwf	_IntegerBlueColorIntensity+1,w
  6042  0743  1D03               	btfss	3,2
  6043  0744  2F48               	goto	l5445
  6044                           
  6045                           ;applicationcontrolRGB.h: 155: PORTDbits.RD2=1;
  6046  0745  0020               	movlb	0	; select bank0
  6047  0746  150F               	bsf	15,2	;volatile
  6048  0747  0008               	return
  6049  0748                     l5445:	
  6050                           
  6051                           ;applicationcontrolRGB.h: 156: else if(IntegerBlueColorIntensity == 0)
  6052  0748  0870               	movf	_IntegerBlueColorIntensity,w
  6053  0749  0471               	iorwf	_IntegerBlueColorIntensity+1,w
  6054  074A  1D03               	btfss	3,2
  6055  074B  2F4F               	goto	l5449
  6056                           
  6057                           ;applicationcontrolRGB.h: 157: PORTDbits.RD2=0;
  6058  074C  0020               	movlb	0	; select bank0
  6059  074D  110F               	bcf	15,2	;volatile
  6060  074E  0008               	return
  6061  074F                     l5449:	
  6062                           
  6063                           ;applicationcontrolRGB.h: 158: else{
  6064                           ;applicationcontrolRGB.h: 159: TX1REG = 'B';
  6065  074F  3042               	movlw	66
  6066  0750  0023               	movlb	3	; select bank3
  6067  0751  009A               	movwf	26	;volatile
  6068                           
  6069                           ;applicationcontrolRGB.h: 160: start_PWM_Generation_For_BlueLed = 1;
  6070  0752  3001               	movlw	1
  6071  0753  0022               	movlb	2	; select bank2
  6072  0754  00C8               	movwf	_start_PWM_Generation_For_BlueLed^(0+256)
  6073  0755  3000               	movlw	0
  6074  0756  00C9               	movwf	(_start_PWM_Generation_For_BlueLed^(0+256)+1)
  6075                           
  6076                           ;applicationcontrolRGB.h: 161: Timer5H = hexadecimalToDecimal(strBlueH);
  6077  0757  30CB               	movlw	(low (applicationControlRGB@strBlueH| 0))& (0+255)
  6078  0758  3196  26F7  3181   	fcall	_hexadecimalToDecimal
  6079  075B  0020               	movlb	0	; select bank0
  6080  075C  0827               	movf	?_hexadecimalToDecimal+1,w
  6081  075D  0022               	movlb	2	; select bank2
  6082  075E  00BF               	movwf	(_Timer5H+1)^(0+256)
  6083  075F  0020               	movlb	0	; select bank0
  6084  0760  0826               	movf	?_hexadecimalToDecimal,w
  6085  0761  0022               	movlb	2	; select bank2
  6086  0762  00BE               	movwf	_Timer5H^(0+256)
  6087                           
  6088                           ;applicationcontrolRGB.h: 162: Timer5L = hexadecimalToDecimal(strBlueL);
  6089  0763  30CE               	movlw	(low (applicationControlRGB@strBlueL| 0))& (0+255)
  6090  0764  3196  26F7         	fcall	_hexadecimalToDecimal
  6091  0766  0020               	movlb	0	; select bank0
  6092  0767  0827               	movf	?_hexadecimalToDecimal+1,w
  6093  0768  0022               	movlb	2	; select bank2
  6094  0769  00BD               	movwf	(_Timer5L+1)^(0+256)
  6095  076A  0020               	movlb	0	; select bank0
  6096  076B  0826               	movf	?_hexadecimalToDecimal,w
  6097  076C  0022               	movlb	2	; select bank2
  6098  076D  00BC               	movwf	_Timer5L^(0+256)
  6099                           
  6100                           ;applicationcontrolRGB.h: 163: PR6=0xF0;
  6101  076E  30F0               	movlw	240
  6102  076F  0028               	movlb	8	; select bank8
  6103  0770  009D               	movwf	29	;volatile
  6104                           
  6105                           ;applicationcontrolRGB.h: 164: T6CONbits.TMR6ON=1;
  6106  0771  151E               	bsf	30,2	;volatile
  6107                           
  6108                           ;applicationcontrolRGB.h: 169: }
  6109                           
  6110                           ;applicationcontrolRGB.h: 168: break;
  6111                           
  6112                           ;applicationcontrolRGB.h: 167: default:
  6113                           
  6114                           ;applicationcontrolRGB.h: 165: }
  6115                           ;applicationcontrolRGB.h: 166: break;
  6116  0772  0008               	return
  6117  0773                     l5459:	
  6118                           
  6119                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6120                           ; Switch size 1, requested type "space"
  6121                           ; Number of cases is 1, Range of values is 0 to 0
  6122                           ; switch strategies available:
  6123                           ; Name         Instructions Cycles
  6124                           ; simple_byte            4     3 (average)
  6125                           ; direct_byte            8     6 (fixed)
  6126                           ; jumptable            260     6 (fixed)
  6127                           ;	Chosen strategy is simple_byte
  6128  0773  0022               	movlb	2	; select bank2
  6129  0774  0833               	movf	(_IntergerSwitchStatus+1)^(0+256),w
  6130  0775  3A00               	xorlw	0	; case 0
  6131  0776  1903               	skipnz
  6132  0777  2F79               	goto	l6251
  6133  0778  2F8D               	goto	l416
  6134  0779                     l6251:	
  6135                           
  6136                           ; Switch size 1, requested type "space"
  6137                           ; Number of cases is 2, Range of values is 0 to 1
  6138                           ; switch strategies available:
  6139                           ; Name         Instructions Cycles
  6140                           ; simple_byte            7     4 (average)
  6141                           ; direct_byte           10     6 (fixed)
  6142                           ; jumptable            260     6 (fixed)
  6143                           ;	Chosen strategy is simple_byte
  6144  0779  0832               	movf	_IntergerSwitchStatus^(0+256),w
  6145  077A  3A00               	xorlw	0	; case 0
  6146  077B  1903               	skipnz
  6147  077C  2ECD               	goto	l5401
  6148  077D  3A01               	xorlw	1	; case 1
  6149  077E  1903               	skipnz
  6150  077F  2ED9               	goto	l5409
  6151  0780  2F8D               	goto	l416
  6152                           
  6153                           ;applicationcontrolRGB.h: 173: }
  6154                           ;applicationcontrolRGB.h: 180: }
  6155                           
  6156                           ;applicationcontrolRGB.h: 172: break;
  6157                           
  6158                           ;applicationcontrolRGB.h: 171: default:
  6159                           
  6160                           ;applicationcontrolRGB.h: 170: break;
  6161  0781  0008               	return
  6162  0782                     l5463:	
  6163                           
  6164                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6165                           ; Switch size 1, requested type "space"
  6166                           ; Number of cases is 1, Range of values is 0 to 0
  6167                           ; switch strategies available:
  6168                           ; Name         Instructions Cycles
  6169                           ; simple_byte            4     3 (average)
  6170                           ; direct_byte            8     6 (fixed)
  6171                           ; jumptable            260     6 (fixed)
  6172                           ;	Chosen strategy is simple_byte
  6173  0782  0022               	movlb	2	; select bank2
  6174  0783  0835               	movf	(_IntegerSwitchNumber+1)^(0+256),w
  6175  0784  3A00               	xorlw	0	; case 0
  6176  0785  1903               	skipnz
  6177  0786  2F88               	goto	l6253
  6178  0787  2F8D               	goto	l416
  6179  0788                     l6253:	
  6180                           
  6181                           ; Switch size 1, requested type "space"
  6182                           ; Number of cases is 1, Range of values is 9 to 9
  6183                           ; switch strategies available:
  6184                           ; Name         Instructions Cycles
  6185                           ; simple_byte            4     3 (average)
  6186                           ; direct_byte           11     9 (fixed)
  6187                           ; jumptable            263     9 (fixed)
  6188                           ;	Chosen strategy is simple_byte
  6189  0788  0834               	movf	_IntegerSwitchNumber^(0+256),w
  6190  0789  3A09               	xorlw	9	; case 9
  6191  078A  1903               	skipnz
  6192  078B  2F73               	goto	l5459
  6193  078C  2F8D               	goto	l416
  6194  078D                     l416:	
  6195  078D  0008               	return
  6196  078E                     __end_of_applicationControlRGB:	
  6197                           
  6198                           	psect	text9
  6199  148B                     __ptext9:	
  6200 ;; *************** function _strncpy *****************
  6201 ;; Defined at:
  6202 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncpy.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  to              1    wreg     PTR unsigned char 
  6205 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6206 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6207 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  6208 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6209 ;;  size            2    1[BANK0 ] unsigned int 
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;  to              1    5[BANK0 ] PTR unsigned char 
  6212 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6213 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6214 ;;  cp              1    4[BANK0 ] PTR unsigned char 
  6215 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  6216 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  6217 ;; Return value:  Size  Location     Type
  6218 ;;                  1    wreg      PTR unsigned char 
  6219 ;; Registers used:
  6220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6221 ;; Tracked objects:
  6222 ;;		On entry : 0/0
  6223 ;;		On exit  : 0/0
  6224 ;;		Unchanged: 0/0
  6225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6226 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  6227 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6229 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  6230 ;;Total ram usage:        6 bytes
  6231 ;; Hardware stack levels used:    1
  6232 ;; Hardware stack levels required when called:    2
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_applicationControlRGB
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           
  6241                           ;psect for function _strncpy
  6242  148B                     _strncpy:	
  6243                           
  6244                           ;incstack = 0
  6245                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
  6246                           ;strncpy@to stored from wreg
  6247  148B  0020               	movlb	0	; select bank0
  6248  148C  00A5               	movwf	strncpy@to
  6249  148D  0825               	movf	strncpy@to,w
  6250  148E  00A3               	movwf	??_strncpy
  6251  148F  0823               	movf	??_strncpy,w
  6252  1490  00A4               	movwf	strncpy@cp
  6253  1491                     l4901:	
  6254  1491  0821               	movf	strncpy@size,w
  6255  1492  0422               	iorwf	strncpy@size+1,w
  6256  1493  1903               	btfsc	3,2
  6257  1494  2CAF               	goto	l4907
  6258  1495  3001               	movlw	1
  6259  1496  02A1               	subwf	strncpy@size,f
  6260  1497  3000               	movlw	0
  6261  1498  3BA2               	subwfb	strncpy@size+1,f
  6262  1499  0824               	movf	strncpy@cp,w
  6263  149A  0086               	movwf	6
  6264  149B  0187               	clrf	7
  6265  149C  0AA4               	incf	strncpy@cp,f
  6266  149D  0820               	movf	strncpy@from,w
  6267  149E  0084               	movwf	4
  6268  149F  0185               	clrf	5
  6269  14A0  0AA0               	incf	strncpy@from,f
  6270  14A1  0800               	movf	0,w
  6271  14A2  3FC0               	movwi [0]fsr1
  6272  14A3  0889               	movf	9,f
  6273  14A4  1903               	btfsc	3,2
  6274  14A5  2CAF               	goto	l4907
  6275  14A6  2C91               	goto	l4901
  6276  14A7                     l4903:	
  6277  14A7  0824               	movf	strncpy@cp,w
  6278  14A8  0086               	movwf	6
  6279  14A9  0187               	clrf	7
  6280  14AA  0181               	clrf	1
  6281  14AB  3001               	movlw	1
  6282  14AC  00A3               	movwf	??_strncpy
  6283  14AD  0823               	movf	??_strncpy,w
  6284  14AE  07A4               	addwf	strncpy@cp,f
  6285  14AF                     l4907:	
  6286  14AF  3001               	movlw	1
  6287  14B0  02A1               	subwf	strncpy@size,f
  6288  14B1  3000               	movlw	0
  6289  14B2  3BA2               	subwfb	strncpy@size+1,f
  6290  14B3  0A21               	incf	strncpy@size,w
  6291  14B4  1D03               	skipz
  6292  14B5  2CA7               	goto	l4903
  6293  14B6  0A22               	incf	strncpy@size+1,w
  6294  14B7  1903               	btfsc	3,2
  6295  14B8  0008               	return
  6296  14B9  2CA7               	goto	l4903
  6297  14BA                     __end_of_strncpy:	
  6298                           ;	Return value of _strncpy is never used
  6299                           
  6300                           
  6301                           	psect	text10
  6302  12F9                     __ptext10:	
  6303 ;; *************** function _strcpy *****************
  6304 ;; Defined at:
  6305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  to              1    wreg     PTR unsigned char 
  6308 ;;		 -> sendFinalBufferToGAteway(46), 
  6309 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  6310 ;;		 -> copymainReceivedDataBuffer(32), NULL(0), 
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;  to              1    2[BANK0 ] PTR unsigned char 
  6313 ;;		 -> sendFinalBufferToGAteway(46), 
  6314 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  6315 ;;		 -> sendFinalBufferToGAteway(46), 
  6316 ;; Return value:  Size  Location     Type
  6317 ;;                  1    wreg      PTR unsigned char 
  6318 ;; Registers used:
  6319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6325 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0
  6326 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6328 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  6329 ;;Total ram usage:        4 bytes
  6330 ;; Hardware stack levels used:    1
  6331 ;; Hardware stack levels required when called:    2
  6332 ;; This function calls:
  6333 ;;		Nothing
  6334 ;; This function is called by:
  6335 ;;		_applicationControlRGB
  6336 ;; This function uses a non-reentrant model
  6337 ;;
  6338                           
  6339                           
  6340                           ;psect for function _strcpy
  6341  12F9                     _strcpy:	
  6342                           
  6343                           ;incstack = 0
  6344                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  6345                           ;strcpy@to stored from wreg
  6346  12F9  0020               	movlb	0	; select bank0
  6347  12FA  00A2               	movwf	strcpy@to
  6348  12FB  0822               	movf	strcpy@to,w
  6349  12FC  00A1               	movwf	??_strcpy
  6350  12FD  0821               	movf	??_strcpy,w
  6351  12FE  00A3               	movwf	strcpy@cp
  6352  12FF                     l4817:	
  6353  12FF  0823               	movf	strcpy@cp,w
  6354  1300  0086               	movwf	6
  6355  1301  3002               	movlw	2	; select bank4/5
  6356  1302  0087               	movwf	7
  6357  1303  0820               	movf	strcpy@from,w
  6358  1304  0084               	movwf	4
  6359  1305  3002               	movlw	2	; select bank4/5
  6360  1306  0085               	movwf	5
  6361  1307  0800               	movf	0,w
  6362  1308  3FC0               	movwi [0]fsr1
  6363  1309  0889               	movf	9,f
  6364  130A  1903               	btfsc	3,2
  6365  130B  0008               	return
  6366  130C  3001               	movlw	1
  6367  130D  00A1               	movwf	??_strcpy
  6368  130E  0821               	movf	??_strcpy,w
  6369  130F  07A3               	addwf	strcpy@cp,f
  6370  1310  3001               	movlw	1
  6371  1311  00A1               	movwf	??_strcpy
  6372  1312  0821               	movf	??_strcpy,w
  6373  1313  07A0               	addwf	strcpy@from,f
  6374  1314  2AFF               	goto	l4817
  6375  1315                     __end_of_strcpy:	
  6376                           ;	Return value of _strcpy is never used
  6377                           
  6378                           
  6379                           	psect	text11
  6380  140F                     __ptext11:	
  6381 ;; *************** function _strcat *****************
  6382 ;; Defined at:
  6383 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  to              1    wreg     PTR unsigned char 
  6386 ;;		 -> sendFinalBufferToGAteway(46), 
  6387 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  6388 ;;		 -> ChildLockbuffer(2), switchstatusbuffer(2), switchNumberBuffer(3), copymainReceivedDataBuffer(32), 
  6389 ;;		 -> STR_10(5), STR_9(2), STR_8(2), STR_7(2), 
  6390 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(7), 
  6391 ;;		 -> STR_2(2), STR_1(2), NULL(0), 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;  to              1    4[BANK0 ] PTR unsigned char 
  6394 ;;		 -> sendFinalBufferToGAteway(46), 
  6395 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  6396 ;;		 -> sendFinalBufferToGAteway(46), 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  1    wreg      PTR unsigned char 
  6399 ;; Registers used:
  6400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6406 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  6407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  6408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6409 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  6410 ;;Total ram usage:        5 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    2
  6413 ;; This function calls:
  6414 ;;		Nothing
  6415 ;; This function is called by:
  6416 ;;		_applicationControlRGB
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           
  6421                           ;psect for function _strcat
  6422  140F                     _strcat:	
  6423                           
  6424                           ;incstack = 0
  6425                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  6426                           ;strcat@to stored from wreg
  6427  140F  0020               	movlb	0	; select bank0
  6428  1410  00A4               	movwf	strcat@to
  6429  1411  0824               	movf	strcat@to,w
  6430  1412  00A2               	movwf	??_strcat
  6431  1413  0822               	movf	??_strcat,w
  6432  1414  00A3               	movwf	strcat@cp
  6433  1415                     l4823:	
  6434  1415  0823               	movf	strcat@cp,w
  6435  1416  0086               	movwf	6
  6436  1417  3002               	movlw	2	; select bank4/5
  6437  1418  0087               	movwf	7
  6438  1419  0801               	movf	1,w
  6439  141A  1903               	btfsc	3,2
  6440  141B  2C29               	goto	l4829
  6441  141C  3001               	movlw	1
  6442  141D  00A2               	movwf	??_strcat
  6443  141E  0822               	movf	??_strcat,w
  6444  141F  07A3               	addwf	strcat@cp,f
  6445  1420  2C15               	goto	l4823
  6446  1421                     l4825:	
  6447  1421  3001               	movlw	1
  6448  1422  00A2               	movwf	??_strcat
  6449  1423  0822               	movf	??_strcat,w
  6450  1424  07A3               	addwf	strcat@cp,f
  6451  1425  3001               	movlw	1
  6452  1426  07A0               	addwf	strcat@from,f
  6453  1427  3000               	movlw	0
  6454  1428  3DA1               	addwfc	strcat@from+1,f
  6455  1429                     l4829:	
  6456  1429  0823               	movf	strcat@cp,w
  6457  142A  0086               	movwf	6
  6458  142B  3002               	movlw	2	; select bank4/5
  6459  142C  0087               	movwf	7
  6460  142D  0820               	movf	strcat@from,w
  6461  142E  0084               	movwf	4
  6462  142F  0821               	movf	strcat@from+1,w
  6463  1430  0085               	movwf	5
  6464  1431  0800               	movf	0,w	;code access
  6465  1432  3FC0               	movwi [0]fsr1
  6466  1433  0889               	movf	9,f
  6467  1434  1903               	btfsc	3,2
  6468  1435  0008               	return
  6469  1436  2C21               	goto	l4825
  6470  1437                     __end_of_strcat:	
  6471                           ;	Return value of _strcat is never used
  6472                           
  6473                           
  6474                           	psect	text12
  6475  08F8                     __ptext12:	
  6476 ;; *************** function _sprintf *****************
  6477 ;; Defined at:
  6478 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;  sp              1    wreg     PTR unsigned char 
  6481 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6482 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  6483 ;;		 -> STR_13(3), STR_12(3), STR_11(3), 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  sp              1   24[BANK0 ] PTR unsigned char 
  6486 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  6487 ;;  idx             1   19[BANK0 ] unsigned char 
  6488 ;;  tmpval          4    0        struct .
  6489 ;;  val             2   21[BANK0 ] unsigned int 
  6490 ;;  cp              2    0        PTR const unsigned char 
  6491 ;;  len             2    0        unsigned int 
  6492 ;;  c               1   25[BANK0 ] char 
  6493 ;;  prec            1   23[BANK0 ] char 
  6494 ;;  ap              1   20[BANK0 ] PTR void [1]
  6495 ;;		 -> ?_sprintf(2), 
  6496 ;;  flag            1   18[BANK0 ] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  2    8[BANK0 ] int 
  6499 ;; Registers used:
  6500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6506 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  6507 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0
  6508 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  6509 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0
  6510 ;;Total ram usage:       18 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    3
  6513 ;; This function calls:
  6514 ;;		___lwdiv
  6515 ;; This function is called by:
  6516 ;;		_applicationControlRGB
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           
  6521                           ;psect for function _sprintf
  6522  08F8                     _sprintf:	
  6523                           
  6524                           ;incstack = 0
  6525                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6526                           ;sprintf@sp stored from wreg
  6527  08F8  0020               	movlb	0	; select bank0
  6528  08F9  00B8               	movwf	sprintf@sp
  6529                           
  6530                           ;doprnt.c: 494: va_list ap;
  6531                           ;doprnt.c: 499: signed char c;
  6532                           ;doprnt.c: 506: signed char prec;
  6533                           ;doprnt.c: 508: unsigned char flag;
  6534                           ;doprnt.c: 523: union {
  6535                           ;doprnt.c: 524: unsigned long vd;
  6536                           ;doprnt.c: 525: double integ;
  6537                           ;doprnt.c: 526: } tmpval;
  6538                           ;doprnt.c: 528: unsigned int val;
  6539                           ;doprnt.c: 529: unsigned len;
  6540                           ;doprnt.c: 530: const char * cp;
  6541                           ;doprnt.c: 533: *ap = __va_start();
  6542  08FA  302A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6543  08FB  00AE               	movwf	??_sprintf
  6544  08FC  082E               	movf	??_sprintf,w
  6545  08FD  00B4               	movwf	sprintf@ap
  6546  08FE                     l4887:	
  6547                           ;doprnt.c: 536: while(c = *f++) {
  6548                           
  6549  08FE  0829               	movf	sprintf@f+1,w
  6550  08FF  00AF               	movwf	??_sprintf+1
  6551  0900  0828               	movf	sprintf@f,w
  6552  0901  00AE               	movwf	??_sprintf
  6553  0902  0AA8               	incf	sprintf@f,f
  6554  0903  1903               	skipnz
  6555  0904  0AA9               	incf	sprintf@f+1,f
  6556  0905  082E               	movf	??_sprintf,w
  6557  0906  0084               	movwf	4
  6558  0907  082F               	movf	??_sprintf+1,w
  6559  0908  0085               	movwf	5
  6560  0909  0800               	movf	0,w	;code access
  6561  090A  00B0               	movwf	??_sprintf+2
  6562  090B  0830               	movf	??_sprintf+2,w
  6563  090C  00B9               	movwf	sprintf@c
  6564  090D  0839               	movf	sprintf@c,w
  6565  090E  1903               	btfsc	3,2
  6566  090F  29A6               	goto	l4889
  6567                           
  6568                           ;doprnt.c: 538: if(c != '%')
  6569  0910  3025               	movlw	37
  6570  0911  0639               	xorwf	sprintf@c,w
  6571  0912  1903               	btfsc	3,2
  6572  0913  2920               	goto	l4853
  6573                           
  6574                           ;doprnt.c: 540: {
  6575                           ;doprnt.c: 541: ((*sp++ = (c)));
  6576  0914  0839               	movf	sprintf@c,w
  6577  0915  00AE               	movwf	??_sprintf
  6578  0916  0838               	movf	sprintf@sp,w
  6579  0917  0086               	movwf	6
  6580  0918  0187               	clrf	7
  6581  0919  082E               	movf	??_sprintf,w
  6582  091A  0081               	movwf	1
  6583  091B  3001               	movlw	1
  6584  091C  00AE               	movwf	??_sprintf
  6585  091D  082E               	movf	??_sprintf,w
  6586  091E  07B8               	addwf	sprintf@sp,f
  6587                           
  6588                           ;doprnt.c: 542: continue;
  6589  091F  28FE               	goto	l4887
  6590  0920                     l4853:	
  6591                           
  6592                           ;doprnt.c: 543: }
  6593                           ;doprnt.c: 548: flag = 0;
  6594  0920  01B2               	clrf	sprintf@flag
  6595                           
  6596                           ;doprnt.c: 822: }
  6597                           
  6598                           ;doprnt.c: 813: continue;
  6599                           
  6600                           ;doprnt.c: 802: default:
  6601                           
  6602                           ;doprnt.c: 718: case 'x':
  6603                           ;doprnt.c: 723: break;
  6604                           
  6605                           ;doprnt.c: 712: case 'X':
  6606                           
  6607                           ;doprnt.c: 638: goto alldone;
  6608                           
  6609                           ;doprnt.c: 637: case 0:
  6610                           
  6611                           ;doprnt.c: 635: switch(c = *f++) {
  6612  0921  0829               	movf	sprintf@f+1,w
  6613  0922  00AF               	movwf	??_sprintf+1
  6614  0923  0828               	movf	sprintf@f,w
  6615  0924  00AE               	movwf	??_sprintf
  6616  0925  0AA8               	incf	sprintf@f,f
  6617  0926  1903               	skipnz
  6618  0927  0AA9               	incf	sprintf@f+1,f
  6619  0928  082E               	movf	??_sprintf,w
  6620  0929  0084               	movwf	4
  6621  092A  082F               	movf	??_sprintf+1,w
  6622  092B  0085               	movwf	5
  6623  092C  0800               	movf	0,w	;code access
  6624  092D  00B9               	movwf	sprintf@c
  6625                           
  6626                           ; Switch size 1, requested type "space"
  6627                           ; Number of cases is 3, Range of values is 0 to 120
  6628                           ; switch strategies available:
  6629                           ; Name         Instructions Cycles
  6630                           ; simple_byte           10     6 (average)
  6631                           ; direct_byte          248     6 (fixed)
  6632                           ; jumptable            260     6 (fixed)
  6633                           ;	Chosen strategy is simple_byte
  6634  092E  3A00               	xorlw	0	; case 0
  6635  092F  1903               	skipnz
  6636  0930  29A6               	goto	l4889
  6637  0931  3A58               	xorlw	88	; case 88
  6638  0932  1903               	skipnz
  6639  0933  2938               	goto	l4859
  6640  0934  3A20               	xorlw	32	; case 120
  6641  0935  1903               	skipnz
  6642  0936  2938               	goto	l4859
  6643  0937  28FE               	goto	l4887
  6644  0938                     l4859:	
  6645                           
  6646                           ;doprnt.c: 1273: {
  6647                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6648  0938  0834               	movf	sprintf@ap,w
  6649  0939  0086               	movwf	6
  6650  093A  0187               	clrf	7
  6651  093B  3F40               	moviw [0]fsr1
  6652  093C  00B5               	movwf	sprintf@val
  6653  093D  3F41               	moviw [1]fsr1
  6654  093E  00B6               	movwf	sprintf@val+1
  6655  093F  3002               	movlw	2
  6656  0940  00AE               	movwf	??_sprintf
  6657  0941  082E               	movf	??_sprintf,w
  6658  0942  07B4               	addwf	sprintf@ap,f
  6659                           
  6660                           ;doprnt.c: 1287: }
  6661                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6662  0943  01B9               	clrf	sprintf@c
  6663  0944  0AB9               	incf	sprintf@c,f
  6664  0945  3004               	movlw	4
  6665  0946  0639               	xorwf	sprintf@c,w
  6666  0947  1903               	btfsc	3,2
  6667  0948  2968               	goto	l4875
  6668  0949                     l4869:	
  6669                           
  6670                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6671  0949  0839               	movf	sprintf@c,w
  6672  094A  00AE               	movwf	??_sprintf
  6673  094B  01AF               	clrf	??_sprintf+1
  6674  094C  35AE               	lslf	??_sprintf,f
  6675  094D  0DAF               	rlf	??_sprintf+1,f
  6676  094E  3000               	movlw	low (_hexpowers| (0+32768))
  6677  094F  072E               	addwf	??_sprintf,w
  6678  0950  0084               	movwf	4
  6679  0951  3098               	movlw	high (_hexpowers| (0+32768))
  6680  0952  3D2F               	addwfc	??_sprintf+1,w
  6681  0953  0085               	movwf	5
  6682  0954  3F00               	moviw [0]fsr0
  6683  0955  00B0               	movwf	??_sprintf+2
  6684  0956  3F01               	moviw [1]fsr0
  6685  0957  00B1               	movwf	??_sprintf+3
  6686  0958  0831               	movf	??_sprintf+3,w
  6687  0959  0236               	subwf	sprintf@val+1,w
  6688  095A  1D03               	skipz
  6689  095B  295E               	goto	u4965
  6690  095C  0830               	movf	??_sprintf+2,w
  6691  095D  0235               	subwf	sprintf@val,w
  6692  095E                     u4965:	
  6693  095E  1C03               	btfss	3,0
  6694  095F  2968               	goto	l4875
  6695                           
  6696                           ;doprnt.c: 1318: break;
  6697  0960  3001               	movlw	1
  6698  0961  00AE               	movwf	??_sprintf
  6699  0962  082E               	movf	??_sprintf,w
  6700  0963  07B9               	addwf	sprintf@c,f
  6701  0964  3004               	movlw	4
  6702  0965  0639               	xorwf	sprintf@c,w
  6703  0966  1D03               	btfss	3,2
  6704  0967  2949               	goto	l4869
  6705  0968                     l4875:	
  6706                           
  6707                           ;doprnt.c: 1422: {
  6708                           ;doprnt.c: 1469: }
  6709                           ;doprnt.c: 1472: prec = c;
  6710  0968  0839               	movf	sprintf@c,w
  6711  0969  00AE               	movwf	??_sprintf
  6712  096A  082E               	movf	??_sprintf,w
  6713  096B  00B7               	movwf	sprintf@prec
  6714  096C                     l4885:	
  6715                           ;doprnt.c: 1474: while(prec--) {
  6716                           
  6717  096C  30FF               	movlw	255
  6718  096D  00AE               	movwf	??_sprintf
  6719  096E  082E               	movf	??_sprintf,w
  6720  096F  07B7               	addwf	sprintf@prec,f
  6721  0970  0A37               	incf	sprintf@prec,w
  6722  0971  1903               	btfsc	3,2
  6723  0972  28FE               	goto	l4887
  6724                           
  6725                           ;doprnt.c: 1478: {
  6726                           ;doprnt.c: 1499: {
  6727                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6728  0973  0837               	movf	sprintf@prec,w
  6729  0974  00AE               	movwf	??_sprintf
  6730  0975  01AF               	clrf	??_sprintf+1
  6731  0976  35AE               	lslf	??_sprintf,f
  6732  0977  0DAF               	rlf	??_sprintf+1,f
  6733  0978  3000               	movlw	low (_hexpowers| (0+32768))
  6734  0979  072E               	addwf	??_sprintf,w
  6735  097A  0084               	movwf	4
  6736  097B  3098               	movlw	high (_hexpowers| (0+32768))
  6737  097C  3D2F               	addwfc	??_sprintf+1,w
  6738  097D  0085               	movwf	5
  6739  097E  3F00               	moviw [0]fsr0
  6740  097F  00A0               	movwf	___lwdiv@divisor
  6741  0980  3F01               	moviw [1]fsr0
  6742  0981  00A1               	movwf	___lwdiv@divisor+1
  6743  0982  0836               	movf	sprintf@val+1,w
  6744  0983  00A3               	movwf	___lwdiv@dividend+1
  6745  0984  0835               	movf	sprintf@val,w
  6746  0985  00A2               	movwf	___lwdiv@dividend
  6747  0986  3196  2613  3188   	fcall	___lwdiv
  6748  0989  0020               	movlb	0	; select bank0
  6749  098A  0820               	movf	?___lwdiv,w
  6750  098B  390F               	andlw	15
  6751  098C  00B0               	movwf	??_sprintf+2
  6752  098D  0830               	movf	??_sprintf+2,w
  6753  098E  00B3               	movwf	sprintf@idx
  6754                           
  6755                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  6756  098F  0833               	movf	sprintf@idx,w
  6757  0990  3E08               	addlw	low (STR_20| (0+32768))
  6758  0991  0084               	movwf	4
  6759  0992  3098               	movlw	high (STR_20| (0+32768))
  6760  0993  1803               	skipnc
  6761  0994  3E01               	addlw	1
  6762  0995  0085               	movwf	5
  6763  0996  0800               	movf	0,w	;code access
  6764  0997  00AE               	movwf	??_sprintf
  6765  0998  082E               	movf	??_sprintf,w
  6766  0999  00B9               	movwf	sprintf@c
  6767                           
  6768                           ;doprnt.c: 1508: }
  6769                           ;doprnt.c: 1523: }
  6770                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6771  099A  0839               	movf	sprintf@c,w
  6772  099B  00AE               	movwf	??_sprintf
  6773  099C  0838               	movf	sprintf@sp,w
  6774  099D  0086               	movwf	6
  6775  099E  0187               	clrf	7
  6776  099F  082E               	movf	??_sprintf,w
  6777  09A0  0081               	movwf	1
  6778  09A1  3001               	movlw	1
  6779  09A2  00AE               	movwf	??_sprintf
  6780  09A3  082E               	movf	??_sprintf,w
  6781  09A4  07B8               	addwf	sprintf@sp,f
  6782  09A5  296C               	goto	l4885
  6783  09A6                     l4889:	
  6784                           ;doprnt.c: 1525: }
  6785                           ;doprnt.c: 1533: }
  6786                           ;doprnt.c: 1535: alldone:
  6787                           
  6788                           
  6789                           ;doprnt.c: 1538: *sp = 0;
  6790  09A6  0838               	movf	sprintf@sp,w
  6791  09A7  0086               	movwf	6
  6792  09A8  0187               	clrf	7
  6793  09A9  0181               	clrf	1
  6794  09AA  0008               	return
  6795  09AB                     __end_of_sprintf:	
  6796                           ;doprnt.c: 1540: return 0;
  6797                           ;	Return value of _sprintf is never used
  6798                           
  6799                           
  6800                           	psect	text13
  6801  1613                     __ptext13:	
  6802 ;; *************** function ___lwdiv *****************
  6803 ;; Defined at:
  6804 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;  divisor         2    0[BANK0 ] unsigned int 
  6807 ;;  dividend        2    2[BANK0 ] unsigned int 
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;  quotient        2    6[BANK0 ] unsigned int 
  6810 ;;  counter         1    5[BANK0 ] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  2    0[BANK0 ] unsigned int 
  6813 ;; Registers used:
  6814 ;;		wreg, status,2, status,0
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6820 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  6821 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  6822 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6823 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  6824 ;;Total ram usage:        8 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    2
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_sprintf
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function ___lwdiv
  6836  1613                     ___lwdiv:	
  6837                           
  6838                           ;incstack = 0
  6839                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6840  1613  0020               	movlb	0	; select bank0
  6841  1614  01A6               	clrf	___lwdiv@quotient
  6842  1615  01A7               	clrf	___lwdiv@quotient+1
  6843  1616  0820               	movf	___lwdiv@divisor,w
  6844  1617  0421               	iorwf	___lwdiv@divisor+1,w
  6845  1618  1903               	btfsc	3,2
  6846  1619  2E43               	goto	l4763
  6847  161A  01A5               	clrf	___lwdiv@counter
  6848  161B  0AA5               	incf	___lwdiv@counter,f
  6849  161C                     l4751:	
  6850  161C  1BA1               	btfsc	___lwdiv@divisor+1,7
  6851  161D  2E28               	goto	l4753
  6852  161E  3001               	movlw	1
  6853  161F                     u4745:	
  6854  161F  35A0               	lslf	___lwdiv@divisor,f
  6855  1620  0DA1               	rlf	___lwdiv@divisor+1,f
  6856  1621  0B89               	decfsz	9,f
  6857  1622  2E1F               	goto	u4745
  6858  1623  3001               	movlw	1
  6859  1624  00A4               	movwf	??___lwdiv
  6860  1625  0824               	movf	??___lwdiv,w
  6861  1626  07A5               	addwf	___lwdiv@counter,f
  6862  1627  2E1C               	goto	l4751
  6863  1628                     l4753:	
  6864  1628  3001               	movlw	1
  6865  1629                     u4765:	
  6866  1629  35A6               	lslf	___lwdiv@quotient,f
  6867  162A  0DA7               	rlf	___lwdiv@quotient+1,f
  6868  162B  0B89               	decfsz	9,f
  6869  162C  2E29               	goto	u4765
  6870  162D  0821               	movf	___lwdiv@divisor+1,w
  6871  162E  0223               	subwf	___lwdiv@dividend+1,w
  6872  162F  1D03               	skipz
  6873  1630  2E33               	goto	u4775
  6874  1631  0820               	movf	___lwdiv@divisor,w
  6875  1632  0222               	subwf	___lwdiv@dividend,w
  6876  1633                     u4775:	
  6877  1633  1C03               	skipc
  6878  1634  2E3A               	goto	l4759
  6879  1635  0820               	movf	___lwdiv@divisor,w
  6880  1636  02A2               	subwf	___lwdiv@dividend,f
  6881  1637  0821               	movf	___lwdiv@divisor+1,w
  6882  1638  3BA3               	subwfb	___lwdiv@dividend+1,f
  6883  1639  1426               	bsf	___lwdiv@quotient,0
  6884  163A                     l4759:	
  6885  163A  3001               	movlw	1
  6886  163B                     u4785:	
  6887  163B  36A1               	lsrf	___lwdiv@divisor+1,f
  6888  163C  0CA0               	rrf	___lwdiv@divisor,f
  6889  163D  0B89               	decfsz	9,f
  6890  163E  2E3B               	goto	u4785
  6891  163F  3001               	movlw	1
  6892  1640  02A5               	subwf	___lwdiv@counter,f
  6893  1641  1D03               	btfss	3,2
  6894  1642  2E28               	goto	l4753
  6895  1643                     l4763:	
  6896  1643  0827               	movf	___lwdiv@quotient+1,w
  6897  1644  00A1               	movwf	?___lwdiv+1
  6898  1645  0826               	movf	___lwdiv@quotient,w
  6899  1646  00A0               	movwf	?___lwdiv
  6900  1647  0008               	return
  6901  1648                     __end_of___lwdiv:	
  6902                           
  6903                           	psect	text14
  6904  138D                     __ptext14:	
  6905 ;; *************** function _sendAcknowledgmentRGB *****************
  6906 ;; Defined at:
  6907 ;;		line 1268 in file "main.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;  currentState    1    wreg     PTR unsigned char 
  6910 ;;		 -> sendFinalBufferToGAteway(46), 
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;  currentState    1    3[BANK0 ] PTR unsigned char 
  6913 ;;		 -> sendFinalBufferToGAteway(46), 
  6914 ;;  Tx_count        2    1[BANK0 ] int 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      void 
  6917 ;; Registers used:
  6918 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  6924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  6925 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  6926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  6927 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  6928 ;;Total ram usage:        4 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    2
  6931 ;; This function calls:
  6932 ;;		Nothing
  6933 ;; This function is called by:
  6934 ;;		_applicationControlRGB
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           
  6939                           ;psect for function _sendAcknowledgmentRGB
  6940  138D                     _sendAcknowledgmentRGB:	
  6941                           
  6942                           ;incstack = 0
  6943                           ; Regs used in _sendAcknowledgmentRGB: [wreg+fsr1l+fsr1h+status,2+status,0]
  6944                           ;sendAcknowledgmentRGB@currentStateBufferRGB stored from wreg
  6945  138D  0020               	movlb	0	; select bank0
  6946  138E  00A3               	movwf	sendAcknowledgmentRGB@currentStateBufferRGB
  6947                           
  6948                           ;main.c: 1269: int Tx_count=0;
  6949  138F  01A1               	clrf	sendAcknowledgmentRGB@Tx_count
  6950  1390  01A2               	clrf	sendAcknowledgmentRGB@Tx_count+1
  6951  1391                     l615:	
  6952                           ;main.c: 1270: while(*currentStateBufferRGB != (0))
  6953                           
  6954  1391  0823               	movf	sendAcknowledgmentRGB@currentStateBufferRGB,w
  6955  1392  0086               	movwf	6
  6956  1393  3002               	movlw	2	; select bank4/5
  6957  1394  0087               	movwf	7
  6958  1395  0801               	movf	1,w
  6959  1396  1903               	btfsc	3,2
  6960  1397  0008               	return
  6961  1398                     l617:	
  6962                           ;main.c: 1271: {
  6963                           ;main.c: 1272: while (!TX1STAbits.TRMT);
  6964                           
  6965  1398  0023               	movlb	3	; select bank3
  6966  1399  1C9E               	btfss	30,1	;volatile
  6967  139A  2B98               	goto	l617
  6968                           
  6969                           ;main.c: 1273: TX1REG = *currentStateBufferRGB;
  6970  139B  0020               	movlb	0	; select bank0
  6971  139C  0823               	movf	sendAcknowledgmentRGB@currentStateBufferRGB,w
  6972  139D  0086               	movwf	6
  6973  139E  3002               	movlw	2	; select bank4/5
  6974  139F  0087               	movwf	7
  6975  13A0  0801               	movf	1,w
  6976  13A1  0023               	movlb	3	; select bank3
  6977  13A2  009A               	movwf	26	;volatile
  6978                           
  6979                           ;main.c: 1274: *currentStateBufferRGB++;
  6980  13A3  3001               	movlw	1
  6981  13A4  0020               	movlb	0	; select bank0
  6982  13A5  00A0               	movwf	??_sendAcknowledgmentRGB
  6983  13A6  0820               	movf	??_sendAcknowledgmentRGB,w
  6984  13A7  07A3               	addwf	sendAcknowledgmentRGB@currentStateBufferRGB,f
  6985                           
  6986                           ;main.c: 1275: Tx_count++;
  6987  13A8  3001               	movlw	1
  6988  13A9  07A1               	addwf	sendAcknowledgmentRGB@Tx_count,f
  6989  13AA  3000               	movlw	0
  6990  13AB  3DA2               	addwfc	sendAcknowledgmentRGB@Tx_count+1,f
  6991  13AC  2B91               	goto	l615
  6992  13AD                     __end_of_sendAcknowledgmentRGB:	
  6993                           
  6994                           	psect	text15
  6995  12C2                     __ptext15:	
  6996 ;; *************** function _memset *****************
  6997 ;; Defined at:
  6998 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  p1              1    wreg     PTR void 
  7001 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  7002 ;;  c               2    0[BANK0 ] int 
  7003 ;;  n               2    2[BANK0 ] unsigned int 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  p1              1    6[BANK0 ] PTR void 
  7006 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  7007 ;;  p               1    5[BANK0 ] PTR unsigned char 
  7008 ;;		 -> applicationControlRGB@HexlevelBuffer(5), 
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  1    wreg      PTR void 
  7011 ;; Registers used:
  7012 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7013 ;; Tracked objects:
  7014 ;;		On entry : 0/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7018 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  7019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  7020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  7021 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  7022 ;;Total ram usage:        7 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    2
  7025 ;; This function calls:
  7026 ;;		Nothing
  7027 ;; This function is called by:
  7028 ;;		_applicationControlRGB
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           
  7033                           ;psect for function _memset
  7034  12C2                     _memset:	
  7035                           
  7036                           ;incstack = 0
  7037                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7038                           ;memset@p1 stored from wreg
  7039  12C2  0020               	movlb	0	; select bank0
  7040  12C3  00A6               	movwf	memset@p1
  7041  12C4  0826               	movf	memset@p1,w
  7042  12C5  00A4               	movwf	??_memset
  7043  12C6  0824               	movf	??_memset,w
  7044  12C7  00A5               	movwf	memset@p
  7045  12C8                     l4915:	
  7046  12C8  3001               	movlw	1
  7047  12C9  02A2               	subwf	memset@n,f
  7048  12CA  3000               	movlw	0
  7049  12CB  3BA3               	subwfb	memset@n+1,f
  7050  12CC  0A22               	incf	memset@n,w
  7051  12CD  1903               	btfsc	3,2
  7052  12CE  0A23               	incf	memset@n+1,w
  7053  12CF  1903               	btfsc	3,2
  7054  12D0  0008               	return
  7055  12D1  0820               	movf	memset@c,w
  7056  12D2  00A4               	movwf	??_memset
  7057  12D3  0825               	movf	memset@p,w
  7058  12D4  0086               	movwf	6
  7059  12D5  0187               	clrf	7
  7060  12D6  0824               	movf	??_memset,w
  7061  12D7  0081               	movwf	1
  7062  12D8  3001               	movlw	1
  7063  12D9  00A4               	movwf	??_memset
  7064  12DA  0824               	movf	??_memset,w
  7065  12DB  07A5               	addwf	memset@p,f
  7066  12DC  2AC8               	goto	l4915
  7067  12DD                     __end_of_memset:	
  7068                           ;	Return value of _memset is never used
  7069                           
  7070                           
  7071                           	psect	text16
  7072  16F7                     __ptext16:	
  7073 ;; *************** function _hexadecimalToDecimal *****************
  7074 ;; Defined at:
  7075 ;;		line 1220 in file "main.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;  hexVal          1    wreg     PTR unsigned char 
  7078 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  7079 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;  hexVal          1   18[BANK0 ] PTR unsigned char 
  7082 ;;		 -> applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicationControlRGB@strGreenL(3), applic
      +ationControlRGB@strGreenH(3), 
  7083 ;;		 -> applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), 
  7084 ;;  i               2   16[BANK0 ] int 
  7085 ;;  base            2   14[BANK0 ] int 
  7086 ;;  dec_val         2   12[BANK0 ] int 
  7087 ;;  len             2   10[BANK0 ] int 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  2    6[BANK0 ] int 
  7090 ;; Registers used:
  7091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7097 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7098 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0
  7099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  7100 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0
  7101 ;;Total ram usage:       13 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    3
  7104 ;; This function calls:
  7105 ;;		___wmul
  7106 ;;		_strlen
  7107 ;; This function is called by:
  7108 ;;		_applicationControlRGB
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           
  7113                           ;psect for function _hexadecimalToDecimal
  7114  16F7                     _hexadecimalToDecimal:	
  7115                           
  7116                           ;incstack = 0
  7117                           ; Regs used in _hexadecimalToDecimal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7118                           ;hexadecimalToDecimal@hexVal stored from wreg
  7119  16F7  0020               	movlb	0	; select bank0
  7120  16F8  00B2               	movwf	hexadecimalToDecimal@hexVal
  7121                           
  7122                           ;main.c: 1222: int len = strlen(hexVal);
  7123  16F9  0832               	movf	hexadecimalToDecimal@hexVal,w
  7124  16FA  00A0               	movwf	strlen@s
  7125  16FB  3000               	movlw	0
  7126  16FC  00A1               	movwf	strlen@s+1
  7127  16FD  3193  236E  3196   	fcall	_strlen
  7128  1700  0020               	movlb	0	; select bank0
  7129  1701  0821               	movf	?_strlen+1,w
  7130  1702  00AB               	movwf	hexadecimalToDecimal@len+1
  7131  1703  0820               	movf	?_strlen,w
  7132  1704  00AA               	movwf	hexadecimalToDecimal@len
  7133                           
  7134                           ;main.c: 1225: int base = 1;
  7135  1705  3001               	movlw	1
  7136  1706  00AE               	movwf	hexadecimalToDecimal@base
  7137  1707  3000               	movlw	0
  7138  1708  00AF               	movwf	hexadecimalToDecimal@base+1
  7139                           
  7140                           ;main.c: 1227: int dec_val = 0;
  7141  1709  01AC               	clrf	hexadecimalToDecimal@dec_val
  7142  170A  01AD               	clrf	hexadecimalToDecimal@dec_val+1
  7143                           
  7144                           ;main.c: 1230: for (int i=len-1; i>=0; i--)
  7145  170B  082A               	movf	hexadecimalToDecimal@len,w
  7146  170C  3EFF               	addlw	255
  7147  170D  00B0               	movwf	hexadecimalToDecimal@i
  7148  170E  30FF               	movlw	255
  7149  170F  3D2B               	addwfc	hexadecimalToDecimal@len+1,w
  7150  1710  00B1               	movwf	hexadecimalToDecimal@i+1
  7151  1711  1BB1               	btfsc	hexadecimalToDecimal@i+1,7
  7152  1712  2F74               	goto	l4949
  7153  1713                     l4929:	
  7154                           
  7155                           ;main.c: 1231: {
  7156                           ;main.c: 1235: if (hexVal[i]>='0' && hexVal[i]<='9')
  7157  1713  0830               	movf	hexadecimalToDecimal@i,w
  7158  1714  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7159  1715  00A8               	movwf	??_hexadecimalToDecimal
  7160  1716  0828               	movf	??_hexadecimalToDecimal,w
  7161  1717  0086               	movwf	6
  7162  1718  0187               	clrf	7
  7163  1719  3030               	movlw	48
  7164  171A  0201               	subwf	1,w
  7165  171B  1C03               	skipc
  7166  171C  2F30               	goto	l4937
  7167  171D  0830               	movf	hexadecimalToDecimal@i,w
  7168  171E  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7169  171F  00A8               	movwf	??_hexadecimalToDecimal
  7170  1720  0828               	movf	??_hexadecimalToDecimal,w
  7171  1721  0086               	movwf	6
  7172  1722  0187               	clrf	7
  7173  1723  303A               	movlw	58
  7174  1724  0201               	subwf	1,w
  7175  1725  1803               	skipnc
  7176  1726  2F30               	goto	l4937
  7177                           
  7178                           ;main.c: 1236: {
  7179                           ;main.c: 1237: dec_val += (hexVal[i] - 48)*base;
  7180  1727  0830               	movf	hexadecimalToDecimal@i,w
  7181  1728  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7182  1729  00A8               	movwf	??_hexadecimalToDecimal
  7183  172A  0828               	movf	??_hexadecimalToDecimal,w
  7184  172B  0086               	movwf	6
  7185  172C  0187               	clrf	7
  7186  172D  0801               	movf	1,w
  7187  172E  3ED0               	addlw	208
  7188  172F  2F4C               	goto	L2
  7189  1730                     l4937:	
  7190                           ;main.c: 1241: }
  7191                           
  7192                           ;main.c: 1240: base = base * 16;
  7193                           
  7194                           
  7195                           ;main.c: 1246: else if (hexVal[i]>='A' && hexVal[i]<='F')
  7196  1730  0830               	movf	hexadecimalToDecimal@i,w
  7197  1731  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7198  1732  00A8               	movwf	??_hexadecimalToDecimal
  7199  1733  0828               	movf	??_hexadecimalToDecimal,w
  7200  1734  0086               	movwf	6
  7201  1735  0187               	clrf	7
  7202  1736  3041               	movlw	65
  7203  1737  0201               	subwf	1,w
  7204  1738  1C03               	skipc
  7205  1739  2F6E               	goto	l4945
  7206  173A  0830               	movf	hexadecimalToDecimal@i,w
  7207  173B  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7208  173C  00A8               	movwf	??_hexadecimalToDecimal
  7209  173D  0828               	movf	??_hexadecimalToDecimal,w
  7210  173E  0086               	movwf	6
  7211  173F  0187               	clrf	7
  7212  1740  3047               	movlw	71
  7213  1741  0201               	subwf	1,w
  7214  1742  1803               	skipnc
  7215  1743  2F6E               	goto	l4945
  7216                           
  7217                           ;main.c: 1247: {
  7218                           ;main.c: 1248: dec_val += (hexVal[i] - 55)*base;
  7219  1744  0830               	movf	hexadecimalToDecimal@i,w
  7220  1745  0732               	addwf	hexadecimalToDecimal@hexVal,w
  7221  1746  00A8               	movwf	??_hexadecimalToDecimal
  7222  1747  0828               	movf	??_hexadecimalToDecimal,w
  7223  1748  0086               	movwf	6
  7224  1749  0187               	clrf	7
  7225  174A  0801               	movf	1,w
  7226  174B  3EC9               	addlw	201
  7227  174C                     L2:	
  7228  174C  00A0               	movwf	___wmul@multiplier
  7229  174D  30FF               	movlw	255
  7230  174E  1803               	skipnc
  7231  174F  3000               	movlw	0
  7232  1750  00A1               	movwf	___wmul@multiplier+1
  7233  1751  082F               	movf	hexadecimalToDecimal@base+1,w
  7234  1752  00A3               	movwf	___wmul@multiplicand+1
  7235  1753  082E               	movf	hexadecimalToDecimal@base,w
  7236  1754  00A2               	movwf	___wmul@multiplicand
  7237  1755  3192  22DD  3196   	fcall	___wmul
  7238  1758  0020               	movlb	0	; select bank0
  7239  1759  0820               	movf	?___wmul,w
  7240  175A  07AC               	addwf	hexadecimalToDecimal@dec_val,f
  7241  175B  0821               	movf	?___wmul+1,w
  7242  175C  3DAD               	addwfc	hexadecimalToDecimal@dec_val+1,f
  7243                           
  7244                           ;main.c: 1251: base = base*16;
  7245  175D  082F               	movf	hexadecimalToDecimal@base+1,w
  7246  175E  00A9               	movwf	??_hexadecimalToDecimal+1
  7247  175F  082E               	movf	hexadecimalToDecimal@base,w
  7248  1760  00A8               	movwf	??_hexadecimalToDecimal
  7249  1761  0EA8               	swapf	??_hexadecimalToDecimal,f
  7250  1762  0EA9               	swapf	??_hexadecimalToDecimal+1,f
  7251  1763  30F0               	movlw	240
  7252  1764  05A9               	andwf	??_hexadecimalToDecimal+1,f
  7253  1765  0828               	movf	??_hexadecimalToDecimal,w
  7254  1766  390F               	andlw	15
  7255  1767  04A9               	iorwf	??_hexadecimalToDecimal+1,f
  7256  1768  30F0               	movlw	240
  7257  1769  05A8               	andwf	??_hexadecimalToDecimal,f
  7258  176A  0828               	movf	??_hexadecimalToDecimal,w
  7259  176B  00AE               	movwf	hexadecimalToDecimal@base
  7260  176C  0829               	movf	??_hexadecimalToDecimal+1,w
  7261  176D  00AF               	movwf	hexadecimalToDecimal@base+1
  7262  176E                     l4945:	
  7263  176E  30FF               	movlw	255
  7264  176F  07B0               	addwf	hexadecimalToDecimal@i,f
  7265  1770  30FF               	movlw	255
  7266  1771  3DB1               	addwfc	hexadecimalToDecimal@i+1,f
  7267  1772  1FB1               	btfss	hexadecimalToDecimal@i+1,7
  7268  1773  2F13               	goto	l4929
  7269  1774                     l4949:	
  7270                           
  7271                           ;main.c: 1252: }
  7272                           ;main.c: 1253: }
  7273                           ;main.c: 1255: return dec_val;
  7274  1774  082D               	movf	hexadecimalToDecimal@dec_val+1,w
  7275  1775  00A7               	movwf	?_hexadecimalToDecimal+1
  7276  1776  082C               	movf	hexadecimalToDecimal@dec_val,w
  7277  1777  00A6               	movwf	?_hexadecimalToDecimal
  7278  1778  0008               	return
  7279  1779                     __end_of_hexadecimalToDecimal:	
  7280                           
  7281                           	psect	text17
  7282  136E                     __ptext17:	
  7283 ;; *************** function _strlen *****************
  7284 ;; Defined at:
  7285 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  7288 ;;		 -> copymainReceivedDataBuffer(32), applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicatio
      +nControlRGB@strGreenL(3), 
  7289 ;;		 -> applicationControlRGB@strGreenH(3), applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applicat
      +ionControlRGB@HexlevelBuffer(5), 
  7290 ;;		 -> NULL(0), 
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  7293 ;;		 -> copymainReceivedDataBuffer(32), applicationControlRGB@strBlueL(3), applicationControlRGB@strBlueH(3), applicatio
      +nControlRGB@strGreenL(3), 
  7294 ;;		 -> applicationControlRGB@strGreenH(3), applicationControlRGB@strRedL(3), applicationControlRGB@strRedH(3), applicat
      +ionControlRGB@HexlevelBuffer(5), 
  7295 ;;		 -> NULL(0), 
  7296 ;; Return value:  Size  Location     Type
  7297 ;;                  2    0[BANK0 ] unsigned int 
  7298 ;; Registers used:
  7299 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7300 ;; Tracked objects:
  7301 ;;		On entry : 0/0
  7302 ;;		On exit  : 0/0
  7303 ;;		Unchanged: 0/0
  7304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7305 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7306 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  7307 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  7308 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  7309 ;;Total ram usage:        6 bytes
  7310 ;; Hardware stack levels used:    1
  7311 ;; Hardware stack levels required when called:    2
  7312 ;; This function calls:
  7313 ;;		Nothing
  7314 ;; This function is called by:
  7315 ;;		_applicationControlRGB
  7316 ;;		_main
  7317 ;;		_hexadecimalToDecimal
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           
  7322                           ;psect for function _strlen
  7323  136E                     _strlen:	
  7324                           
  7325                           ;incstack = 0
  7326                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  7327  136E  0020               	movlb	0	; select bank0
  7328  136F  0821               	movf	strlen@s+1,w
  7329  1370  00A5               	movwf	strlen@cp+1
  7330  1371  0820               	movf	strlen@s,w
  7331  1372  00A4               	movwf	strlen@cp
  7332  1373                     l4677:	
  7333  1373  0824               	movf	strlen@cp,w
  7334  1374  0086               	movwf	6
  7335  1375  0825               	movf	strlen@cp+1,w
  7336  1376  0087               	movwf	7
  7337  1377  0801               	movf	1,w
  7338  1378  1903               	btfsc	3,2
  7339  1379  2B7F               	goto	l4679
  7340  137A  3001               	movlw	1
  7341  137B  07A4               	addwf	strlen@cp,f
  7342  137C  3000               	movlw	0
  7343  137D  3DA5               	addwfc	strlen@cp+1,f
  7344  137E  2B73               	goto	l4677
  7345  137F                     l4679:	
  7346  137F  0920               	comf	strlen@s,w
  7347  1380  00A2               	movwf	??_strlen
  7348  1381  0921               	comf	strlen@s+1,w
  7349  1382  00A3               	movwf	??_strlen+1
  7350  1383  0AA2               	incf	??_strlen,f
  7351  1384  1903               	skipnz
  7352  1385  0AA3               	incf	??_strlen+1,f
  7353  1386  0824               	movf	strlen@cp,w
  7354  1387  0722               	addwf	??_strlen,w
  7355  1388  00A0               	movwf	?_strlen
  7356  1389  0825               	movf	strlen@cp+1,w
  7357  138A  3D23               	addwfc	??_strlen+1,w
  7358  138B  00A1               	movwf	?_strlen+1
  7359  138C  0008               	return
  7360  138D                     __end_of_strlen:	
  7361                           
  7362                           	psect	text18
  7363  120C                     __ptext18:	
  7364 ;; *************** function _abs *****************
  7365 ;; Defined at:
  7366 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;  a               2    0[BANK0 ] int 
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;		None
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  2    0[BANK0 ] int 
  7373 ;; Registers used:
  7374 ;;		wreg, status,2, status,0
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7380 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  7381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  7382 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  7383 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  7384 ;;Total ram usage:        4 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    2
  7387 ;; This function calls:
  7388 ;;		Nothing
  7389 ;; This function is called by:
  7390 ;;		_applicationControlRGB
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           
  7395                           ;psect for function _abs
  7396  120C                     _abs:	
  7397                           
  7398                           ;incstack = 0
  7399                           ; Regs used in _abs: [wreg+status,2+status,0]
  7400  120C  0020               	movlb	0	; select bank0
  7401  120D  1FA1               	btfss	abs@a+1,7
  7402  120E  0008               	return
  7403  120F  0920               	comf	abs@a,w
  7404  1210  00A2               	movwf	??_abs
  7405  1211  0921               	comf	abs@a+1,w
  7406  1212  00A3               	movwf	??_abs+1
  7407  1213  0AA2               	incf	??_abs,f
  7408  1214  1903               	skipnz
  7409  1215  0AA3               	incf	??_abs+1,f
  7410  1216  0822               	movf	??_abs,w
  7411  1217  00A0               	movwf	?_abs
  7412  1218  0823               	movf	??_abs+1,w
  7413  1219  00A1               	movwf	?_abs+1
  7414  121A  0008               	return
  7415  121B                     __end_of_abs:	
  7416                           
  7417                           	psect	text19
  7418  1264                     __ptext19:	
  7419 ;; *************** function ___lwtoft *****************
  7420 ;; Defined at:
  7421 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  c               2    8[BANK0 ] unsigned int 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;		None
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  3    8[BANK0 ] float 
  7428 ;; Registers used:
  7429 ;;		wreg, status,2, status,0, pclath, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7435 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  7436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  7437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  7438 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  7439 ;;Total ram usage:        4 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    3
  7442 ;; This function calls:
  7443 ;;		___ftpack
  7444 ;; This function is called by:
  7445 ;;		_applicationControlRGB
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function ___lwtoft
  7451  1264                     ___lwtoft:	
  7452                           
  7453                           ;incstack = 0
  7454                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7455  1264  0020               	movlb	0	; select bank0
  7456  1265  0828               	movf	___lwtoft@c,w
  7457  1266  00A0               	movwf	___ftpack@arg
  7458  1267  0829               	movf	___lwtoft@c+1,w
  7459  1268  00A1               	movwf	___ftpack@arg+1
  7460  1269  01A2               	clrf	___ftpack@arg+2
  7461  126A  308E               	movlw	142
  7462  126B  00AB               	movwf	??___lwtoft
  7463  126C  082B               	movf	??___lwtoft,w
  7464  126D  00A3               	movwf	___ftpack@exp
  7465  126E  01A4               	clrf	___ftpack@sign
  7466  126F  3196  2692         	fcall	___ftpack
  7467  1271  0020               	movlb	0	; select bank0
  7468  1272  0820               	movf	?___ftpack,w
  7469  1273  00A8               	movwf	?___lwtoft
  7470  1274  0821               	movf	?___ftpack+1,w
  7471  1275  00A9               	movwf	?___lwtoft+1
  7472  1276  0822               	movf	?___ftpack+2,w
  7473  1277  00AA               	movwf	?___lwtoft+2
  7474  1278  0008               	return
  7475  1279                     __end_of___lwtoft:	
  7476                           
  7477                           	psect	text20
  7478  1779                     __ptext20:	
  7479 ;; *************** function ___fttol *****************
  7480 ;; Defined at:
  7481 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  f1              3   30[BANK0 ] float 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  lval            4   39[BANK0 ] unsigned long 
  7486 ;;  exp1            1   43[BANK0 ] unsigned char 
  7487 ;;  sign1           1   38[BANK0 ] unsigned char 
  7488 ;; Return value:  Size  Location     Type
  7489 ;;                  4   30[BANK0 ] long 
  7490 ;; Registers used:
  7491 ;;		wreg, status,2, status,0
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7497 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  7498 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  7499 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  7500 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0
  7501 ;;Total ram usage:       14 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    2
  7504 ;; This function calls:
  7505 ;;		Nothing
  7506 ;; This function is called by:
  7507 ;;		_applicationControlRGB
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           
  7512                           ;psect for function ___fttol
  7513  1779                     ___fttol:	
  7514                           
  7515                           ;incstack = 0
  7516                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7517  1779  0020               	movlb	0	; select bank0
  7518  177A  083E               	movf	___fttol@f1,w
  7519  177B  00C2               	movwf	??___fttol
  7520  177C  083F               	movf	___fttol@f1+1,w
  7521  177D  00C3               	movwf	??___fttol+1
  7522  177E  0840               	movf	___fttol@f1+2,w
  7523  177F  00C4               	movwf	??___fttol+2
  7524  1780  1003               	clrc
  7525  1781  0D43               	rlf	??___fttol+1,w
  7526  1782  0D44               	rlf	??___fttol+2,w
  7527  1783  00C5               	movwf	??___fttol+3
  7528  1784  0845               	movf	??___fttol+3,w
  7529  1785  00CB               	movwf	___fttol@exp1
  7530  1786  084B               	movf	___fttol@exp1,w
  7531  1787  1D03               	btfss	3,2
  7532  1788  2F92               	goto	l5187
  7533  1789  3000               	movlw	0
  7534  178A  00C1               	movwf	?___fttol+3
  7535  178B  3000               	movlw	0
  7536  178C  00C0               	movwf	?___fttol+2
  7537  178D  3000               	movlw	0
  7538  178E  00BF               	movwf	?___fttol+1
  7539  178F  3000               	movlw	0
  7540  1790  00BE               	movwf	?___fttol
  7541  1791  0008               	return
  7542  1792                     l5187:	
  7543  1792  083E               	movf	___fttol@f1,w
  7544  1793  00C2               	movwf	??___fttol
  7545  1794  083F               	movf	___fttol@f1+1,w
  7546  1795  00C3               	movwf	??___fttol+1
  7547  1796  0840               	movf	___fttol@f1+2,w
  7548  1797  00C4               	movwf	??___fttol+2
  7549  1798  3017               	movlw	23
  7550  1799                     u5345:	
  7551  1799  36C4               	lsrf	??___fttol+2,f
  7552  179A  0CC3               	rrf	??___fttol+1,f
  7553  179B  0CC2               	rrf	??___fttol,f
  7554  179C  0B89               	decfsz	9,f
  7555  179D  2F99               	goto	u5345
  7556  179E  0842               	movf	??___fttol,w
  7557  179F  00C5               	movwf	??___fttol+3
  7558  17A0  0845               	movf	??___fttol+3,w
  7559  17A1  00C6               	movwf	___fttol@sign1
  7560  17A2  17BF               	bsf	___fttol@f1+1,7
  7561  17A3  30FF               	movlw	255
  7562  17A4  05BE               	andwf	___fttol@f1,f
  7563  17A5  30FF               	movlw	255
  7564  17A6  05BF               	andwf	___fttol@f1+1,f
  7565  17A7  3000               	movlw	0
  7566  17A8  05C0               	andwf	___fttol@f1+2,f
  7567  17A9  083E               	movf	___fttol@f1,w
  7568  17AA  00C7               	movwf	___fttol@lval
  7569  17AB  083F               	movf	___fttol@f1+1,w
  7570  17AC  00C8               	movwf	___fttol@lval+1
  7571  17AD  0840               	movf	___fttol@f1+2,w
  7572  17AE  00C9               	movwf	___fttol@lval+2
  7573  17AF  01CA               	clrf	___fttol@lval+3
  7574  17B0  308E               	movlw	142
  7575  17B1  02CB               	subwf	___fttol@exp1,f
  7576  17B2  1FCB               	btfss	___fttol@exp1,7
  7577  17B3  2FD0               	goto	l5207
  7578  17B4  084B               	movf	___fttol@exp1,w
  7579  17B5  3A80               	xorlw	128
  7580  17B6  3E8F               	addlw	143
  7581  17B7  1803               	skipnc
  7582  17B8  2FC2               	goto	l5205
  7583  17B9  3000               	movlw	0
  7584  17BA  00C1               	movwf	?___fttol+3
  7585  17BB  3000               	movlw	0
  7586  17BC  00C0               	movwf	?___fttol+2
  7587  17BD  3000               	movlw	0
  7588  17BE  00BF               	movwf	?___fttol+1
  7589  17BF  3000               	movlw	0
  7590  17C0  00BE               	movwf	?___fttol
  7591  17C1  0008               	return
  7592  17C2                     l5205:	
  7593  17C2  3001               	movlw	1
  7594  17C3                     u5375:	
  7595  17C3  36CA               	lsrf	___fttol@lval+3,f
  7596  17C4  0CC9               	rrf	___fttol@lval+2,f
  7597  17C5  0CC8               	rrf	___fttol@lval+1,f
  7598  17C6  0CC7               	rrf	___fttol@lval,f
  7599  17C7  0B89               	decfsz	9,f
  7600  17C8  2FC3               	goto	u5375
  7601  17C9  3001               	movlw	1
  7602  17CA  00C2               	movwf	??___fttol
  7603  17CB  0842               	movf	??___fttol,w
  7604  17CC  07CB               	addwf	___fttol@exp1,f
  7605  17CD  1903               	btfsc	3,2
  7606  17CE  2FE9               	goto	l5215
  7607  17CF  2FC2               	goto	l5205
  7608  17D0                     l5207:	
  7609  17D0  3018               	movlw	24
  7610  17D1  024B               	subwf	___fttol@exp1,w
  7611  17D2  1C03               	skipc
  7612  17D3  2FE6               	goto	l951
  7613  17D4  3000               	movlw	0
  7614  17D5  00C1               	movwf	?___fttol+3
  7615  17D6  3000               	movlw	0
  7616  17D7  00C0               	movwf	?___fttol+2
  7617  17D8  3000               	movlw	0
  7618  17D9  00BF               	movwf	?___fttol+1
  7619  17DA  3000               	movlw	0
  7620  17DB  00BE               	movwf	?___fttol
  7621  17DC  0008               	return
  7622  17DD                     l5213:	
  7623  17DD  3001               	movlw	1
  7624  17DE                     u5405:	
  7625  17DE  35C7               	lslf	___fttol@lval,f
  7626  17DF  0DC8               	rlf	___fttol@lval+1,f
  7627  17E0  0DC9               	rlf	___fttol@lval+2,f
  7628  17E1  0DCA               	rlf	___fttol@lval+3,f
  7629  17E2  0B89               	decfsz	9,f
  7630  17E3  2FDE               	goto	u5405
  7631  17E4  3001               	movlw	1
  7632  17E5  02CB               	subwf	___fttol@exp1,f
  7633  17E6                     l951:	
  7634  17E6  084B               	movf	___fttol@exp1,w
  7635  17E7  1D03               	btfss	3,2
  7636  17E8  2FDD               	goto	l5213
  7637  17E9                     l5215:	
  7638  17E9  0846               	movf	___fttol@sign1,w
  7639  17EA  1903               	btfsc	3,2
  7640  17EB  2FF7               	goto	l5219
  7641  17EC  09C7               	comf	___fttol@lval,f
  7642  17ED  09C8               	comf	___fttol@lval+1,f
  7643  17EE  09C9               	comf	___fttol@lval+2,f
  7644  17EF  09CA               	comf	___fttol@lval+3,f
  7645  17F0  0AC7               	incf	___fttol@lval,f
  7646  17F1  1903               	skipnz
  7647  17F2  0AC8               	incf	___fttol@lval+1,f
  7648  17F3  1903               	skipnz
  7649  17F4  0AC9               	incf	___fttol@lval+2,f
  7650  17F5  1903               	skipnz
  7651  17F6  0ACA               	incf	___fttol@lval+3,f
  7652  17F7                     l5219:	
  7653  17F7  084A               	movf	___fttol@lval+3,w
  7654  17F8  00C1               	movwf	?___fttol+3
  7655  17F9  0849               	movf	___fttol@lval+2,w
  7656  17FA  00C0               	movwf	?___fttol+2
  7657  17FB  0848               	movf	___fttol@lval+1,w
  7658  17FC  00BF               	movwf	?___fttol+1
  7659  17FD  0847               	movf	___fttol@lval,w
  7660  17FE  00BE               	movwf	?___fttol
  7661  17FF  0008               	return
  7662  1800                     __end_of___fttol:	
  7663                           
  7664                           	psect	text21
  7665  09AB                     __ptext21:	
  7666 ;; *************** function ___ftmul *****************
  7667 ;; Defined at:
  7668 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;  f1              3    8[BANK0 ] float 
  7671 ;;  f2              3   11[BANK0 ] float 
  7672 ;; Auto vars:     Size  Location     Type
  7673 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  7674 ;;  sign            1   23[BANK0 ] unsigned char 
  7675 ;;  cntr            1   22[BANK0 ] unsigned char 
  7676 ;;  exp             1   18[BANK0 ] unsigned char 
  7677 ;; Return value:  Size  Location     Type
  7678 ;;                  3    8[BANK0 ] float 
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, status,0, pclath, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7686 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  7687 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  7688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  7689 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0
  7690 ;;Total ram usage:       16 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    3
  7693 ;; This function calls:
  7694 ;;		___ftpack
  7695 ;; This function is called by:
  7696 ;;		_applicationControlRGB
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           
  7701                           ;psect for function ___ftmul
  7702  09AB                     ___ftmul:	
  7703                           
  7704                           ;incstack = 0
  7705                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7706  09AB  0020               	movlb	0	; select bank0
  7707  09AC  0828               	movf	___ftmul@f1,w
  7708  09AD  00AE               	movwf	??___ftmul
  7709  09AE  0829               	movf	___ftmul@f1+1,w
  7710  09AF  00AF               	movwf	??___ftmul+1
  7711  09B0  082A               	movf	___ftmul@f1+2,w
  7712  09B1  00B0               	movwf	??___ftmul+2
  7713  09B2  1003               	clrc
  7714  09B3  0D2F               	rlf	??___ftmul+1,w
  7715  09B4  0D30               	rlf	??___ftmul+2,w
  7716  09B5  00B1               	movwf	??___ftmul+3
  7717  09B6  0831               	movf	??___ftmul+3,w
  7718  09B7  00B2               	movwf	___ftmul@exp
  7719  09B8  0832               	movf	___ftmul@exp,w
  7720  09B9  1D03               	btfss	3,2
  7721  09BA  29C2               	goto	l5137
  7722  09BB  3000               	movlw	0
  7723  09BC  00A8               	movwf	?___ftmul
  7724  09BD  3000               	movlw	0
  7725  09BE  00A9               	movwf	?___ftmul+1
  7726  09BF  3000               	movlw	0
  7727  09C0  00AA               	movwf	?___ftmul+2
  7728  09C1  0008               	return
  7729  09C2                     l5137:	
  7730  09C2  082B               	movf	___ftmul@f2,w
  7731  09C3  00AE               	movwf	??___ftmul
  7732  09C4  082C               	movf	___ftmul@f2+1,w
  7733  09C5  00AF               	movwf	??___ftmul+1
  7734  09C6  082D               	movf	___ftmul@f2+2,w
  7735  09C7  00B0               	movwf	??___ftmul+2
  7736  09C8  1003               	clrc
  7737  09C9  0D2F               	rlf	??___ftmul+1,w
  7738  09CA  0D30               	rlf	??___ftmul+2,w
  7739  09CB  00B1               	movwf	??___ftmul+3
  7740  09CC  0831               	movf	??___ftmul+3,w
  7741  09CD  00B7               	movwf	___ftmul@sign
  7742  09CE  0837               	movf	___ftmul@sign,w
  7743  09CF  1D03               	btfss	3,2
  7744  09D0  29D8               	goto	l5143
  7745  09D1  3000               	movlw	0
  7746  09D2  00A8               	movwf	?___ftmul
  7747  09D3  3000               	movlw	0
  7748  09D4  00A9               	movwf	?___ftmul+1
  7749  09D5  3000               	movlw	0
  7750  09D6  00AA               	movwf	?___ftmul+2
  7751  09D7  0008               	return
  7752  09D8                     l5143:	
  7753  09D8  0837               	movf	___ftmul@sign,w
  7754  09D9  3E7B               	addlw	123
  7755  09DA  00AE               	movwf	??___ftmul
  7756  09DB  082E               	movf	??___ftmul,w
  7757  09DC  07B2               	addwf	___ftmul@exp,f
  7758  09DD  0828               	movf	___ftmul@f1,w
  7759  09DE  00AE               	movwf	??___ftmul
  7760  09DF  0829               	movf	___ftmul@f1+1,w
  7761  09E0  00AF               	movwf	??___ftmul+1
  7762  09E1  082A               	movf	___ftmul@f1+2,w
  7763  09E2  00B0               	movwf	??___ftmul+2
  7764  09E3  3010               	movlw	16
  7765  09E4                     u5235:	
  7766  09E4  36B0               	lsrf	??___ftmul+2,f
  7767  09E5  0CAF               	rrf	??___ftmul+1,f
  7768  09E6  0CAE               	rrf	??___ftmul,f
  7769  09E7  0B89               	decfsz	9,f
  7770  09E8  29E4               	goto	u5235
  7771  09E9  082E               	movf	??___ftmul,w
  7772  09EA  00B1               	movwf	??___ftmul+3
  7773  09EB  0831               	movf	??___ftmul+3,w
  7774  09EC  00B7               	movwf	___ftmul@sign
  7775  09ED  082B               	movf	___ftmul@f2,w
  7776  09EE  00AE               	movwf	??___ftmul
  7777  09EF  082C               	movf	___ftmul@f2+1,w
  7778  09F0  00AF               	movwf	??___ftmul+1
  7779  09F1  082D               	movf	___ftmul@f2+2,w
  7780  09F2  00B0               	movwf	??___ftmul+2
  7781  09F3  3010               	movlw	16
  7782  09F4                     u5245:	
  7783  09F4  36B0               	lsrf	??___ftmul+2,f
  7784  09F5  0CAF               	rrf	??___ftmul+1,f
  7785  09F6  0CAE               	rrf	??___ftmul,f
  7786  09F7  0B89               	decfsz	9,f
  7787  09F8  29F4               	goto	u5245
  7788  09F9  082E               	movf	??___ftmul,w
  7789  09FA  00B1               	movwf	??___ftmul+3
  7790  09FB  0831               	movf	??___ftmul+3,w
  7791  09FC  06B7               	xorwf	___ftmul@sign,f
  7792  09FD  3080               	movlw	128
  7793  09FE  00AE               	movwf	??___ftmul
  7794  09FF  082E               	movf	??___ftmul,w
  7795  0A00  05B7               	andwf	___ftmul@sign,f
  7796  0A01  17A9               	bsf	___ftmul@f1+1,7
  7797  0A02  17AC               	bsf	___ftmul@f2+1,7
  7798  0A03  30FF               	movlw	255
  7799  0A04  05AB               	andwf	___ftmul@f2,f
  7800  0A05  30FF               	movlw	255
  7801  0A06  05AC               	andwf	___ftmul@f2+1,f
  7802  0A07  3000               	movlw	0
  7803  0A08  05AD               	andwf	___ftmul@f2+2,f
  7804  0A09  3000               	movlw	0
  7805  0A0A  00B3               	movwf	___ftmul@f3_as_product
  7806  0A0B  3000               	movlw	0
  7807  0A0C  00B4               	movwf	___ftmul@f3_as_product+1
  7808  0A0D  3000               	movlw	0
  7809  0A0E  00B5               	movwf	___ftmul@f3_as_product+2
  7810  0A0F  3007               	movlw	7
  7811  0A10  00AE               	movwf	??___ftmul
  7812  0A11  082E               	movf	??___ftmul,w
  7813  0A12  00B6               	movwf	___ftmul@cntr
  7814  0A13                     l5155:	
  7815  0A13  1C28               	btfss	___ftmul@f1,0
  7816  0A14  2A1B               	goto	l5159
  7817  0A15  082B               	movf	___ftmul@f2,w
  7818  0A16  07B3               	addwf	___ftmul@f3_as_product,f
  7819  0A17  082C               	movf	___ftmul@f2+1,w
  7820  0A18  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  7821  0A19  082D               	movf	___ftmul@f2+2,w
  7822  0A1A  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  7823  0A1B                     l5159:	
  7824  0A1B  3001               	movlw	1
  7825  0A1C                     u5265:	
  7826  0A1C  36AA               	lsrf	___ftmul@f1+2,f
  7827  0A1D  0CA9               	rrf	___ftmul@f1+1,f
  7828  0A1E  0CA8               	rrf	___ftmul@f1,f
  7829  0A1F  0B89               	decfsz	9,f
  7830  0A20  2A1C               	goto	u5265
  7831  0A21  3001               	movlw	1
  7832  0A22                     u5275:	
  7833  0A22  35AB               	lslf	___ftmul@f2,f
  7834  0A23  0DAC               	rlf	___ftmul@f2+1,f
  7835  0A24  0DAD               	rlf	___ftmul@f2+2,f
  7836  0A25  0B89               	decfsz	9,f
  7837  0A26  2A22               	goto	u5275
  7838  0A27  3001               	movlw	1
  7839  0A28  02B6               	subwf	___ftmul@cntr,f
  7840  0A29  1D03               	btfss	3,2
  7841  0A2A  2A13               	goto	l5155
  7842  0A2B  3009               	movlw	9
  7843  0A2C  00AE               	movwf	??___ftmul
  7844  0A2D  082E               	movf	??___ftmul,w
  7845  0A2E  00B6               	movwf	___ftmul@cntr
  7846  0A2F                     l5167:	
  7847  0A2F  1C28               	btfss	___ftmul@f1,0
  7848  0A30  2A37               	goto	l5171
  7849  0A31  082B               	movf	___ftmul@f2,w
  7850  0A32  07B3               	addwf	___ftmul@f3_as_product,f
  7851  0A33  082C               	movf	___ftmul@f2+1,w
  7852  0A34  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  7853  0A35  082D               	movf	___ftmul@f2+2,w
  7854  0A36  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  7855  0A37                     l5171:	
  7856  0A37  3001               	movlw	1
  7857  0A38                     u5305:	
  7858  0A38  36AA               	lsrf	___ftmul@f1+2,f
  7859  0A39  0CA9               	rrf	___ftmul@f1+1,f
  7860  0A3A  0CA8               	rrf	___ftmul@f1,f
  7861  0A3B  0B89               	decfsz	9,f
  7862  0A3C  2A38               	goto	u5305
  7863  0A3D  3001               	movlw	1
  7864  0A3E                     u5315:	
  7865  0A3E  36B5               	lsrf	___ftmul@f3_as_product+2,f
  7866  0A3F  0CB4               	rrf	___ftmul@f3_as_product+1,f
  7867  0A40  0CB3               	rrf	___ftmul@f3_as_product,f
  7868  0A41  0B89               	decfsz	9,f
  7869  0A42  2A3E               	goto	u5315
  7870  0A43  3001               	movlw	1
  7871  0A44  02B6               	subwf	___ftmul@cntr,f
  7872  0A45  1D03               	btfss	3,2
  7873  0A46  2A2F               	goto	l5167
  7874  0A47  0833               	movf	___ftmul@f3_as_product,w
  7875  0A48  00A0               	movwf	___ftpack@arg
  7876  0A49  0834               	movf	___ftmul@f3_as_product+1,w
  7877  0A4A  00A1               	movwf	___ftpack@arg+1
  7878  0A4B  0835               	movf	___ftmul@f3_as_product+2,w
  7879  0A4C  00A2               	movwf	___ftpack@arg+2
  7880  0A4D  0832               	movf	___ftmul@exp,w
  7881  0A4E  00AE               	movwf	??___ftmul
  7882  0A4F  082E               	movf	??___ftmul,w
  7883  0A50  00A3               	movwf	___ftpack@exp
  7884  0A51  0837               	movf	___ftmul@sign,w
  7885  0A52  00AF               	movwf	??___ftmul+1
  7886  0A53  082F               	movf	??___ftmul+1,w
  7887  0A54  00A4               	movwf	___ftpack@sign
  7888  0A55  3196  2692         	fcall	___ftpack
  7889  0A57  0020               	movlb	0	; select bank0
  7890  0A58  0820               	movf	?___ftpack,w
  7891  0A59  00A8               	movwf	?___ftmul
  7892  0A5A  0821               	movf	?___ftpack+1,w
  7893  0A5B  00A9               	movwf	?___ftmul+1
  7894  0A5C  0822               	movf	?___ftpack+2,w
  7895  0A5D  00AA               	movwf	?___ftmul+2
  7896  0A5E  0008               	return
  7897  0A5F                     __end_of___ftmul:	
  7898                           
  7899                           	psect	text22
  7900  084F                     __ptext22:	
  7901 ;; *************** function ___ftdiv *****************
  7902 ;; Defined at:
  7903 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  f2              3   14[BANK0 ] float 
  7906 ;;  f1              3   17[BANK0 ] float 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  f3              3   25[BANK0 ] float 
  7909 ;;  sign            1   29[BANK0 ] unsigned char 
  7910 ;;  exp             1   28[BANK0 ] unsigned char 
  7911 ;;  cntr            1   24[BANK0 ] unsigned char 
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  3   14[BANK0 ] float 
  7914 ;; Registers used:
  7915 ;;		wreg, status,2, status,0, pclath, cstack
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  7921 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  7922 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0
  7923 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0
  7924 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0
  7925 ;;Total ram usage:       16 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; Hardware stack levels required when called:    3
  7928 ;; This function calls:
  7929 ;;		___ftpack
  7930 ;; This function is called by:
  7931 ;;		_applicationControlRGB
  7932 ;; This function uses a non-reentrant model
  7933 ;;
  7934                           
  7935                           
  7936                           ;psect for function ___ftdiv
  7937  084F                     ___ftdiv:	
  7938                           
  7939                           ;incstack = 0
  7940                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7941  084F  0020               	movlb	0	; select bank0
  7942  0850  0831               	movf	___ftdiv@f1,w
  7943  0851  00B4               	movwf	??___ftdiv
  7944  0852  0832               	movf	___ftdiv@f1+1,w
  7945  0853  00B5               	movwf	??___ftdiv+1
  7946  0854  0833               	movf	___ftdiv@f1+2,w
  7947  0855  00B6               	movwf	??___ftdiv+2
  7948  0856  1003               	clrc
  7949  0857  0D35               	rlf	??___ftdiv+1,w
  7950  0858  0D36               	rlf	??___ftdiv+2,w
  7951  0859  00B7               	movwf	??___ftdiv+3
  7952  085A  0837               	movf	??___ftdiv+3,w
  7953  085B  00BC               	movwf	___ftdiv@exp
  7954  085C  083C               	movf	___ftdiv@exp,w
  7955  085D  1D03               	btfss	3,2
  7956  085E  2866               	goto	l5095
  7957  085F  3000               	movlw	0
  7958  0860  00AE               	movwf	?___ftdiv
  7959  0861  3000               	movlw	0
  7960  0862  00AF               	movwf	?___ftdiv+1
  7961  0863  3000               	movlw	0
  7962  0864  00B0               	movwf	?___ftdiv+2
  7963  0865  0008               	return
  7964  0866                     l5095:	
  7965  0866  082E               	movf	___ftdiv@f2,w
  7966  0867  00B4               	movwf	??___ftdiv
  7967  0868  082F               	movf	___ftdiv@f2+1,w
  7968  0869  00B5               	movwf	??___ftdiv+1
  7969  086A  0830               	movf	___ftdiv@f2+2,w
  7970  086B  00B6               	movwf	??___ftdiv+2
  7971  086C  1003               	clrc
  7972  086D  0D35               	rlf	??___ftdiv+1,w
  7973  086E  0D36               	rlf	??___ftdiv+2,w
  7974  086F  00B7               	movwf	??___ftdiv+3
  7975  0870  0837               	movf	??___ftdiv+3,w
  7976  0871  00BD               	movwf	___ftdiv@sign
  7977  0872  083D               	movf	___ftdiv@sign,w
  7978  0873  1D03               	btfss	3,2
  7979  0874  287C               	goto	l5101
  7980  0875  3000               	movlw	0
  7981  0876  00AE               	movwf	?___ftdiv
  7982  0877  3000               	movlw	0
  7983  0878  00AF               	movwf	?___ftdiv+1
  7984  0879  3000               	movlw	0
  7985  087A  00B0               	movwf	?___ftdiv+2
  7986  087B  0008               	return
  7987  087C                     l5101:	
  7988  087C  3000               	movlw	0
  7989  087D  00B9               	movwf	___ftdiv@f3
  7990  087E  3000               	movlw	0
  7991  087F  00BA               	movwf	___ftdiv@f3+1
  7992  0880  3000               	movlw	0
  7993  0881  00BB               	movwf	___ftdiv@f3+2
  7994  0882  3089               	movlw	137
  7995  0883  073D               	addwf	___ftdiv@sign,w
  7996  0884  00B4               	movwf	??___ftdiv
  7997  0885  0834               	movf	??___ftdiv,w
  7998  0886  02BC               	subwf	___ftdiv@exp,f
  7999  0887  0831               	movf	___ftdiv@f1,w
  8000  0888  00B4               	movwf	??___ftdiv
  8001  0889  0832               	movf	___ftdiv@f1+1,w
  8002  088A  00B5               	movwf	??___ftdiv+1
  8003  088B  0833               	movf	___ftdiv@f1+2,w
  8004  088C  00B6               	movwf	??___ftdiv+2
  8005  088D  3010               	movlw	16
  8006  088E                     u5155:	
  8007  088E  36B6               	lsrf	??___ftdiv+2,f
  8008  088F  0CB5               	rrf	??___ftdiv+1,f
  8009  0890  0CB4               	rrf	??___ftdiv,f
  8010  0891  0B89               	decfsz	9,f
  8011  0892  288E               	goto	u5155
  8012  0893  0834               	movf	??___ftdiv,w
  8013  0894  00B7               	movwf	??___ftdiv+3
  8014  0895  0837               	movf	??___ftdiv+3,w
  8015  0896  00BD               	movwf	___ftdiv@sign
  8016  0897  082E               	movf	___ftdiv@f2,w
  8017  0898  00B4               	movwf	??___ftdiv
  8018  0899  082F               	movf	___ftdiv@f2+1,w
  8019  089A  00B5               	movwf	??___ftdiv+1
  8020  089B  0830               	movf	___ftdiv@f2+2,w
  8021  089C  00B6               	movwf	??___ftdiv+2
  8022  089D  3010               	movlw	16
  8023  089E                     u5165:	
  8024  089E  36B6               	lsrf	??___ftdiv+2,f
  8025  089F  0CB5               	rrf	??___ftdiv+1,f
  8026  08A0  0CB4               	rrf	??___ftdiv,f
  8027  08A1  0B89               	decfsz	9,f
  8028  08A2  289E               	goto	u5165
  8029  08A3  0834               	movf	??___ftdiv,w
  8030  08A4  00B7               	movwf	??___ftdiv+3
  8031  08A5  0837               	movf	??___ftdiv+3,w
  8032  08A6  06BD               	xorwf	___ftdiv@sign,f
  8033  08A7  3080               	movlw	128
  8034  08A8  00B4               	movwf	??___ftdiv
  8035  08A9  0834               	movf	??___ftdiv,w
  8036  08AA  05BD               	andwf	___ftdiv@sign,f
  8037  08AB  17B2               	bsf	___ftdiv@f1+1,7
  8038  08AC  30FF               	movlw	255
  8039  08AD  05B1               	andwf	___ftdiv@f1,f
  8040  08AE  30FF               	movlw	255
  8041  08AF  05B2               	andwf	___ftdiv@f1+1,f
  8042  08B0  3000               	movlw	0
  8043  08B1  05B3               	andwf	___ftdiv@f1+2,f
  8044  08B2  17AF               	bsf	___ftdiv@f2+1,7
  8045  08B3  30FF               	movlw	255
  8046  08B4  05AE               	andwf	___ftdiv@f2,f
  8047  08B5  30FF               	movlw	255
  8048  08B6  05AF               	andwf	___ftdiv@f2+1,f
  8049  08B7  3000               	movlw	0
  8050  08B8  05B0               	andwf	___ftdiv@f2+2,f
  8051  08B9  3018               	movlw	24
  8052  08BA  00B4               	movwf	??___ftdiv
  8053  08BB  0834               	movf	??___ftdiv,w
  8054  08BC  00B8               	movwf	___ftdiv@cntr
  8055  08BD                     l5115:	
  8056  08BD  3001               	movlw	1
  8057  08BE                     u5175:	
  8058  08BE  35B9               	lslf	___ftdiv@f3,f
  8059  08BF  0DBA               	rlf	___ftdiv@f3+1,f
  8060  08C0  0DBB               	rlf	___ftdiv@f3+2,f
  8061  08C1  0B89               	decfsz	9,f
  8062  08C2  28BE               	goto	u5175
  8063  08C3  0830               	movf	___ftdiv@f2+2,w
  8064  08C4  0233               	subwf	___ftdiv@f1+2,w
  8065  08C5  1D03               	skipz
  8066  08C6  28CD               	goto	u5185
  8067  08C7  082F               	movf	___ftdiv@f2+1,w
  8068  08C8  0232               	subwf	___ftdiv@f1+1,w
  8069  08C9  1D03               	skipz
  8070  08CA  28CD               	goto	u5185
  8071  08CB  082E               	movf	___ftdiv@f2,w
  8072  08CC  0231               	subwf	___ftdiv@f1,w
  8073  08CD                     u5185:	
  8074  08CD  1C03               	skipc
  8075  08CE  28D6               	goto	l5123
  8076  08CF  082E               	movf	___ftdiv@f2,w
  8077  08D0  02B1               	subwf	___ftdiv@f1,f
  8078  08D1  082F               	movf	___ftdiv@f2+1,w
  8079  08D2  3BB2               	subwfb	___ftdiv@f1+1,f
  8080  08D3  0830               	movf	___ftdiv@f2+2,w
  8081  08D4  3BB3               	subwfb	___ftdiv@f1+2,f
  8082  08D5  1439               	bsf	___ftdiv@f3,0
  8083  08D6                     l5123:	
  8084  08D6  3001               	movlw	1
  8085  08D7                     u5195:	
  8086  08D7  35B1               	lslf	___ftdiv@f1,f
  8087  08D8  0DB2               	rlf	___ftdiv@f1+1,f
  8088  08D9  0DB3               	rlf	___ftdiv@f1+2,f
  8089  08DA  0B89               	decfsz	9,f
  8090  08DB  28D7               	goto	u5195
  8091  08DC  3001               	movlw	1
  8092  08DD  02B8               	subwf	___ftdiv@cntr,f
  8093  08DE  1D03               	btfss	3,2
  8094  08DF  28BD               	goto	l5115
  8095  08E0  0839               	movf	___ftdiv@f3,w
  8096  08E1  00A0               	movwf	___ftpack@arg
  8097  08E2  083A               	movf	___ftdiv@f3+1,w
  8098  08E3  00A1               	movwf	___ftpack@arg+1
  8099  08E4  083B               	movf	___ftdiv@f3+2,w
  8100  08E5  00A2               	movwf	___ftpack@arg+2
  8101  08E6  083C               	movf	___ftdiv@exp,w
  8102  08E7  00B4               	movwf	??___ftdiv
  8103  08E8  0834               	movf	??___ftdiv,w
  8104  08E9  00A3               	movwf	___ftpack@exp
  8105  08EA  083D               	movf	___ftdiv@sign,w
  8106  08EB  00B5               	movwf	??___ftdiv+1
  8107  08EC  0835               	movf	??___ftdiv+1,w
  8108  08ED  00A4               	movwf	___ftpack@sign
  8109  08EE  3196  2692         	fcall	___ftpack
  8110  08F0  0020               	movlb	0	; select bank0
  8111  08F1  0820               	movf	?___ftpack,w
  8112  08F2  00AE               	movwf	?___ftdiv
  8113  08F3  0821               	movf	?___ftpack+1,w
  8114  08F4  00AF               	movwf	?___ftdiv+1
  8115  08F5  0822               	movf	?___ftpack+2,w
  8116  08F6  00B0               	movwf	?___ftdiv+2
  8117  08F7  0008               	return
  8118  08F8                     __end_of___ftdiv:	
  8119                           
  8120                           	psect	text23
  8121  13ED                     __ptext23:	
  8122 ;; *************** function ___awtoft *****************
  8123 ;; Defined at:
  8124 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;  c               2    8[BANK0 ] int 
  8127 ;; Auto vars:     Size  Location     Type
  8128 ;;  sign            1   13[BANK0 ] unsigned char 
  8129 ;; Return value:  Size  Location     Type
  8130 ;;                  3    8[BANK0 ] float 
  8131 ;; Registers used:
  8132 ;;		wreg, status,2, status,0, pclath, cstack
  8133 ;; Tracked objects:
  8134 ;;		On entry : 0/0
  8135 ;;		On exit  : 0/0
  8136 ;;		Unchanged: 0/0
  8137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8138 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0
  8139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0
  8140 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8141 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  8142 ;;Total ram usage:        6 bytes
  8143 ;; Hardware stack levels used:    1
  8144 ;; Hardware stack levels required when called:    3
  8145 ;; This function calls:
  8146 ;;		___ftpack
  8147 ;; This function is called by:
  8148 ;;		_applicationControlRGB
  8149 ;; This function uses a non-reentrant model
  8150 ;;
  8151                           
  8152                           
  8153                           ;psect for function ___awtoft
  8154  13ED                     ___awtoft:	
  8155                           
  8156                           ;incstack = 0
  8157                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8158  13ED  0020               	movlb	0	; select bank0
  8159  13EE  01AD               	clrf	___awtoft@sign
  8160  13EF  1FA9               	btfss	___awtoft@c+1,7
  8161  13F0  2BF8               	goto	l5085
  8162  13F1  09A8               	comf	___awtoft@c,f
  8163  13F2  09A9               	comf	___awtoft@c+1,f
  8164  13F3  0AA8               	incf	___awtoft@c,f
  8165  13F4  1903               	skipnz
  8166  13F5  0AA9               	incf	___awtoft@c+1,f
  8167  13F6  01AD               	clrf	___awtoft@sign
  8168  13F7  0AAD               	incf	___awtoft@sign,f
  8169  13F8                     l5085:	
  8170  13F8  0828               	movf	___awtoft@c,w
  8171  13F9  00A0               	movwf	___ftpack@arg
  8172  13FA  0829               	movf	___awtoft@c+1,w
  8173  13FB  00A1               	movwf	___ftpack@arg+1
  8174  13FC  01A2               	clrf	___ftpack@arg+2
  8175  13FD  308E               	movlw	142
  8176  13FE  00AB               	movwf	??___awtoft
  8177  13FF  082B               	movf	??___awtoft,w
  8178  1400  00A3               	movwf	___ftpack@exp
  8179  1401  082D               	movf	___awtoft@sign,w
  8180  1402  00AC               	movwf	??___awtoft+1
  8181  1403  082C               	movf	??___awtoft+1,w
  8182  1404  00A4               	movwf	___ftpack@sign
  8183  1405  3196  2692         	fcall	___ftpack
  8184  1407  0020               	movlb	0	; select bank0
  8185  1408  0820               	movf	?___ftpack,w
  8186  1409  00A8               	movwf	?___awtoft
  8187  140A  0821               	movf	?___ftpack+1,w
  8188  140B  00A9               	movwf	?___awtoft+1
  8189  140C  0822               	movf	?___ftpack+2,w
  8190  140D  00AA               	movwf	?___awtoft+2
  8191  140E  0008               	return
  8192  140F                     __end_of___awtoft:	
  8193                           
  8194                           	psect	text24
  8195  1692                     __ptext24:	
  8196 ;; *************** function ___ftpack *****************
  8197 ;; Defined at:
  8198 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;  arg             3    0[BANK0 ] unsigned um
  8201 ;;  exp             1    3[BANK0 ] unsigned char 
  8202 ;;  sign            1    4[BANK0 ] unsigned char 
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;		None
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  3    0[BANK0 ] float 
  8207 ;; Registers used:
  8208 ;;		wreg, status,2, status,0
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8214 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0
  8215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  8216 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0
  8217 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  8218 ;;Total ram usage:        8 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    2
  8221 ;; This function calls:
  8222 ;;		Nothing
  8223 ;; This function is called by:
  8224 ;;		___awtoft
  8225 ;;		___ftdiv
  8226 ;;		___ftmul
  8227 ;;		___lwtoft
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           
  8232                           ;psect for function ___ftpack
  8233  1692                     ___ftpack:	
  8234                           
  8235                           ;incstack = 0
  8236                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8237  1692  0020               	movlb	0	; select bank0
  8238  1693  0823               	movf	___ftpack@exp,w
  8239  1694  1903               	btfsc	3,2
  8240  1695  2E9B               	goto	l4701
  8241  1696  0822               	movf	___ftpack@arg+2,w
  8242  1697  0421               	iorwf	___ftpack@arg+1,w
  8243  1698  0420               	iorwf	___ftpack@arg,w
  8244  1699  1D03               	skipz
  8245  169A  2EAC               	goto	l4707
  8246  169B                     l4701:	
  8247  169B  3000               	movlw	0
  8248  169C  00A0               	movwf	?___ftpack
  8249  169D  3000               	movlw	0
  8250  169E  00A1               	movwf	?___ftpack+1
  8251  169F  3000               	movlw	0
  8252  16A0  00A2               	movwf	?___ftpack+2
  8253  16A1  0008               	return
  8254  16A2                     l4705:	
  8255  16A2  3001               	movlw	1
  8256  16A3  00A5               	movwf	??___ftpack
  8257  16A4  0825               	movf	??___ftpack,w
  8258  16A5  07A3               	addwf	___ftpack@exp,f
  8259  16A6  3001               	movlw	1
  8260  16A7                     u4615:	
  8261  16A7  36A2               	lsrf	___ftpack@arg+2,f
  8262  16A8  0CA1               	rrf	___ftpack@arg+1,f
  8263  16A9  0CA0               	rrf	___ftpack@arg,f
  8264  16AA  0B89               	decfsz	9,f
  8265  16AB  2EA7               	goto	u4615
  8266  16AC                     l4707:	
  8267  16AC  30FE               	movlw	254
  8268  16AD  0522               	andwf	___ftpack@arg+2,w
  8269  16AE  1903               	btfsc	3,2
  8270  16AF  2EC5               	goto	l860
  8271  16B0  2EA2               	goto	l4705
  8272  16B1                     l4709:	
  8273  16B1  3001               	movlw	1
  8274  16B2  00A5               	movwf	??___ftpack
  8275  16B3  0825               	movf	??___ftpack,w
  8276  16B4  07A3               	addwf	___ftpack@exp,f
  8277  16B5  3001               	movlw	1
  8278  16B6  07A0               	addwf	___ftpack@arg,f
  8279  16B7  3000               	movlw	0
  8280  16B8  1803               	skipnc
  8281  16B9  3001               	movlw	1
  8282  16BA  07A1               	addwf	___ftpack@arg+1,f
  8283  16BB  3000               	movlw	0
  8284  16BC  1803               	skipnc
  8285  16BD  3001               	movlw	1
  8286  16BE  07A2               	addwf	___ftpack@arg+2,f
  8287  16BF  3001               	movlw	1
  8288  16C0                     u4635:	
  8289  16C0  36A2               	lsrf	___ftpack@arg+2,f
  8290  16C1  0CA1               	rrf	___ftpack@arg+1,f
  8291  16C2  0CA0               	rrf	___ftpack@arg,f
  8292  16C3  0B89               	decfsz	9,f
  8293  16C4  2EC0               	goto	u4635
  8294  16C5                     l860:	
  8295  16C5  30FF               	movlw	255
  8296  16C6  0522               	andwf	___ftpack@arg+2,w
  8297  16C7  1903               	btfsc	3,2
  8298  16C8  2ED2               	goto	l4717
  8299  16C9  2EB1               	goto	l4709
  8300  16CA                     l4715:	
  8301  16CA  3001               	movlw	1
  8302  16CB  02A3               	subwf	___ftpack@exp,f
  8303  16CC  3001               	movlw	1
  8304  16CD                     u4655:	
  8305  16CD  35A0               	lslf	___ftpack@arg,f
  8306  16CE  0DA1               	rlf	___ftpack@arg+1,f
  8307  16CF  0DA2               	rlf	___ftpack@arg+2,f
  8308  16D0  0B89               	decfsz	9,f
  8309  16D1  2ECD               	goto	u4655
  8310  16D2                     l4717:	
  8311  16D2  1BA1               	btfsc	___ftpack@arg+1,7
  8312  16D3  2ED8               	goto	l867
  8313  16D4  3002               	movlw	2
  8314  16D5  0223               	subwf	___ftpack@exp,w
  8315  16D6  1803               	skipnc
  8316  16D7  2ECA               	goto	l4715
  8317  16D8                     l867:	
  8318  16D8  1823               	btfsc	___ftpack@exp,0
  8319  16D9  2EE0               	goto	l868
  8320  16DA  30FF               	movlw	255
  8321  16DB  05A0               	andwf	___ftpack@arg,f
  8322  16DC  307F               	movlw	127
  8323  16DD  05A1               	andwf	___ftpack@arg+1,f
  8324  16DE  30FF               	movlw	255
  8325  16DF  05A2               	andwf	___ftpack@arg+2,f
  8326  16E0                     l868:	
  8327  16E0  1003               	clrc
  8328  16E1  0CA3               	rrf	___ftpack@exp,f
  8329  16E2  0823               	movf	___ftpack@exp,w
  8330  16E3  00A5               	movwf	??___ftpack
  8331  16E4  01A6               	clrf	??___ftpack+1
  8332  16E5  01A7               	clrf	??___ftpack+2
  8333  16E6  3010               	movlw	16
  8334  16E7                     u4695:	
  8335  16E7  35A5               	lslf	??___ftpack,f
  8336  16E8  0DA6               	rlf	??___ftpack+1,f
  8337  16E9  0DA7               	rlf	??___ftpack+2,f
  8338  16EA  0B89               	decfsz	9,f
  8339  16EB  2EE7               	goto	u4695
  8340  16EC  0825               	movf	??___ftpack,w
  8341  16ED  04A0               	iorwf	___ftpack@arg,f
  8342  16EE  0826               	movf	??___ftpack+1,w
  8343  16EF  04A1               	iorwf	___ftpack@arg+1,f
  8344  16F0  0827               	movf	??___ftpack+2,w
  8345  16F1  04A2               	iorwf	___ftpack@arg+2,f
  8346  16F2  0824               	movf	___ftpack@sign,w
  8347  16F3  1903               	btfsc	3,2
  8348  16F4  0008               	return
  8349  16F5  17A2               	bsf	___ftpack@arg+2,7
  8350  16F6  0008               	return
  8351  16F7                     __end_of___ftpack:	
  8352                           
  8353                           	psect	text25
  8354  0A5F                     __ptext25:	
  8355 ;; *************** function _applianceControl *****************
  8356 ;; Defined at:
  8357 ;;		line 25 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\include\AutomationNew.h"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;  charSwitchMS    1    wreg     unsigned char 
  8360 ;;  charSwitchLS    1   13[BANK0 ] unsigned char 
  8361 ;;  charSwitchST    1   14[BANK0 ] unsigned char 
  8362 ;;  chDimmerSpee    1   15[BANK0 ] unsigned char 
  8363 ;;  chDimmerSpee    1   16[BANK0 ] unsigned char 
  8364 ;;  charParental    1   17[BANK0 ] unsigned char 
  8365 ;;  charFinalFra    1   18[BANK0 ] unsigned char 
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;  charSwitchMS    1   23[BANK0 ] unsigned char 
  8368 ;;  integerSwitc    2   32[BANK0 ] int 
  8369 ;;  currentState    2   30[BANK0 ] int 
  8370 ;;  integerSwitc    2   28[BANK0 ] int 
  8371 ;;  dimmerSpeedS    2   26[BANK0 ] unsigned char [2]
  8372 ;;  switchNumber    2   24[BANK0 ] unsigned char [2]
  8373 ;;  integerSpeed    2   21[BANK0 ] int 
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  1    wreg      void 
  8376 ;; Registers used:
  8377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8383 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  8384 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0
  8385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8386 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0
  8387 ;;Total ram usage:       21 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:    4
  8390 ;; This function calls:
  8391 ;;		_atoi
  8392 ;;		_sendAcknowledgment
  8393 ;; This function is called by:
  8394 ;;		_main
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           
  8399                           ;psect for function _applianceControl
  8400  0A5F                     _applianceControl:	
  8401                           
  8402                           ;incstack = 0
  8403                           ; Regs used in _applianceControl: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8404                           ;applianceControl@charSwitchMSB stored from wreg
  8405  0A5F  0020               	movlb	0	; select bank0
  8406  0A60  00B7               	movwf	applianceControl@charSwitchMSB
  8407                           
  8408                           ;AutomationNew.h: 29: int integerSwitchNumber = 0;
  8409  0A61  01BC               	clrf	applianceControl@integerSwitchNumber
  8410  0A62  01BD               	clrf	applianceControl@integerSwitchNumber+1
  8411                           
  8412                           ;AutomationNew.h: 30: int integerSwitchState = 0;
  8413  0A63  01C0               	clrf	applianceControl@integerSwitchState
  8414  0A64  01C1               	clrf	applianceControl@integerSwitchState+1
  8415                           
  8416                           ;AutomationNew.h: 31: int integerSpeed = 0;
  8417  0A65  01B5               	clrf	applianceControl@integerSpeed
  8418  0A66  01B6               	clrf	applianceControl@integerSpeed+1
  8419                           
  8420                           ;AutomationNew.h: 32: int currentStateBufferPositions=0;
  8421  0A67  01BE               	clrf	applianceControl@currentStateBufferPositions
  8422  0A68  01BF               	clrf	applianceControl@currentStateBufferPositions+1
  8423                           
  8424                           ;AutomationNew.h: 35: char switchNumberStringBuffer[2]="#";
  8425  0A69  0022               	movlb	2	; select bank2
  8426  0A6A  0867               	movf	(applianceControl@F4004+1)^(0+256),w
  8427  0A6B  0020               	movlb	0	; select bank0
  8428  0A6C  00B9               	movwf	applianceControl@switchNumberStringBuffer+1
  8429  0A6D  0022               	movlb	2	; select bank2
  8430  0A6E  0866               	movf	applianceControl@F4004^(0+256),w
  8431  0A6F  0020               	movlb	0	; select bank0
  8432  0A70  00B8               	movwf	applianceControl@switchNumberStringBuffer
  8433                           
  8434                           ;AutomationNew.h: 36: char dimmerSpeedStringBuffer[2]="#";
  8435  0A71  0022               	movlb	2	; select bank2
  8436  0A72  0865               	movf	(applianceControl@F4006+1)^(0+256),w
  8437  0A73  0020               	movlb	0	; select bank0
  8438  0A74  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  8439  0A75  0022               	movlb	2	; select bank2
  8440  0A76  0864               	movf	applianceControl@F4006^(0+256),w
  8441  0A77  0020               	movlb	0	; select bank0
  8442  0A78  00BA               	movwf	applianceControl@dimmerSpeedStringBuffer
  8443                           
  8444                           ;AutomationNew.h: 38: switchNumberStringBuffer[0]=charSwitchMSB;
  8445  0A79  0837               	movf	applianceControl@charSwitchMSB,w
  8446  0A7A  00B3               	movwf	??_applianceControl
  8447  0A7B  0833               	movf	??_applianceControl,w
  8448  0A7C  00B8               	movwf	applianceControl@switchNumberStringBuffer
  8449                           
  8450                           ;AutomationNew.h: 39: switchNumberStringBuffer[1]=charSwitchLSB;
  8451  0A7D  082D               	movf	applianceControl@charSwitchLSB,w
  8452  0A7E  00B3               	movwf	??_applianceControl
  8453  0A7F  0833               	movf	??_applianceControl,w
  8454  0A80  00B9               	movwf	applianceControl@switchNumberStringBuffer+1
  8455                           
  8456                           ;AutomationNew.h: 40: integerSwitchNumber = atoi(switchNumberStringBuffer);
  8457  0A81  3038               	movlw	low applianceControl@switchNumberStringBuffer
  8458  0A82  00A6               	movwf	atoi@s
  8459  0A83  3000               	movlw	high applianceControl@switchNumberStringBuffer
  8460  0A84  00A7               	movwf	atoi@s+1
  8461  0A85  3187  278E  318A   	fcall	_atoi
  8462  0A88  0020               	movlb	0	; select bank0
  8463  0A89  0827               	movf	?_atoi+1,w
  8464  0A8A  00BD               	movwf	applianceControl@integerSwitchNumber+1
  8465  0A8B  0826               	movf	?_atoi,w
  8466  0A8C  00BC               	movwf	applianceControl@integerSwitchNumber
  8467                           
  8468                           ;AutomationNew.h: 44: integerSwitchState = charSwitchSTATE-'0';
  8469  0A8D  082E               	movf	applianceControl@charSwitchSTATE,w
  8470  0A8E  3ED0               	addlw	208
  8471  0A8F  00C0               	movwf	applianceControl@integerSwitchState
  8472  0A90  30FF               	movlw	255
  8473  0A91  1803               	skipnc
  8474  0A92  3000               	movlw	0
  8475  0A93  00C1               	movwf	applianceControl@integerSwitchState+1
  8476                           
  8477                           ;AutomationNew.h: 47: dimmerSpeedStringBuffer[0]=chDimmerSpeedMSB;
  8478  0A94  082F               	movf	applianceControl@chDimmerSpeedMSB,w
  8479  0A95  00B3               	movwf	??_applianceControl
  8480  0A96  0833               	movf	??_applianceControl,w
  8481  0A97  00BA               	movwf	applianceControl@dimmerSpeedStringBuffer
  8482                           
  8483                           ;AutomationNew.h: 48: dimmerSpeedStringBuffer[1]=chDimmerSpeedLSB;
  8484  0A98  0830               	movf	applianceControl@chDimmerSpeedLSB,w
  8485  0A99  00B3               	movwf	??_applianceControl
  8486  0A9A  0833               	movf	??_applianceControl,w
  8487  0A9B  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  8488                           
  8489                           ;AutomationNew.h: 49: integerSpeed = atoi(dimmerSpeedStringBuffer);
  8490  0A9C  303A               	movlw	low applianceControl@dimmerSpeedStringBuffer
  8491  0A9D  00A6               	movwf	atoi@s
  8492  0A9E  3000               	movlw	high applianceControl@dimmerSpeedStringBuffer
  8493  0A9F  00A7               	movwf	atoi@s+1
  8494  0AA0  3187  278E  318A   	fcall	_atoi
  8495  0AA3  0020               	movlb	0	; select bank0
  8496  0AA4  0827               	movf	?_atoi+1,w
  8497  0AA5  00B6               	movwf	applianceControl@integerSpeed+1
  8498  0AA6  0826               	movf	?_atoi,w
  8499  0AA7  00B5               	movwf	applianceControl@integerSpeed
  8500                           
  8501                           ;AutomationNew.h: 53: parentalLockBuffer[integerSwitchNumber] = charParentalControl;
  8502  0AA8  0831               	movf	applianceControl@charParentalControl,w
  8503  0AA9  00B3               	movwf	??_applianceControl
  8504  0AAA  083C               	movf	applianceControl@integerSwitchNumber,w
  8505  0AAB  3EC0               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  8506  0AAC  0086               	movwf	6
  8507  0AAD  3002               	movlw	2	; select bank5/6
  8508  0AAE  0087               	movwf	7
  8509  0AAF  0833               	movf	??_applianceControl,w
  8510  0AB0  0081               	movwf	1
  8511                           
  8512                           ;AutomationNew.h: 54: copy_parentalLockBuffer[integerSwitchNumber]=parentalLockBuffer[in
      +                          tegerSwitchNumber];
  8513  0AB1  083C               	movf	applianceControl@integerSwitchNumber,w
  8514  0AB2  3EC0               	addlw	(low (_parentalLockBuffer| (0+512)))& (0+255)
  8515  0AB3  0086               	movwf	6
  8516  0AB4  3002               	movlw	2	; select bank5/6
  8517  0AB5  0087               	movwf	7
  8518  0AB6  0801               	movf	1,w
  8519  0AB7  00B3               	movwf	??_applianceControl
  8520  0AB8  083C               	movf	applianceControl@integerSwitchNumber,w
  8521  0AB9  3EB8               	addlw	(low (_copy_parentalLockBuffer| (0+256)))& (0+255)
  8522  0ABA  0086               	movwf	6
  8523  0ABB  3001               	movlw	1	; select bank3/4
  8524  0ABC  0087               	movwf	7
  8525  0ABD  0833               	movf	??_applianceControl,w
  8526  0ABE  0081               	movwf	1
  8527                           
  8528                           ;AutomationNew.h: 57: currentStateBufferPositions = ((1+4*(integerSwitchNumber))-5);
  8529  0ABF  083D               	movf	applianceControl@integerSwitchNumber+1,w
  8530  0AC0  00B4               	movwf	??_applianceControl+1
  8531  0AC1  083C               	movf	applianceControl@integerSwitchNumber,w
  8532  0AC2  00B3               	movwf	??_applianceControl
  8533  0AC3  35B3               	lslf	??_applianceControl,f
  8534  0AC4  0DB4               	rlf	??_applianceControl+1,f
  8535  0AC5  35B3               	lslf	??_applianceControl,f
  8536  0AC6  0DB4               	rlf	??_applianceControl+1,f
  8537  0AC7  0833               	movf	??_applianceControl,w
  8538  0AC8  3EFC               	addlw	252
  8539  0AC9  00BE               	movwf	applianceControl@currentStateBufferPositions
  8540  0ACA  30FF               	movlw	255
  8541  0ACB  3D34               	addwfc	??_applianceControl+1,w
  8542  0ACC  00BF               	movwf	applianceControl@currentStateBufferPositions+1
  8543                           
  8544                           ;AutomationNew.h: 58: currentStateBuffer[currentStateBufferPositions++] = 'G';
  8545  0ACD  3047               	movlw	71
  8546  0ACE  00B3               	movwf	??_applianceControl
  8547  0ACF  083E               	movf	applianceControl@currentStateBufferPositions,w
  8548  0AD0  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8549  0AD1  0086               	movwf	6
  8550  0AD2  3003               	movlw	3	; select bank7/8
  8551  0AD3  0087               	movwf	7
  8552  0AD4  0833               	movf	??_applianceControl,w
  8553  0AD5  0081               	movwf	1
  8554  0AD6  3001               	movlw	1
  8555  0AD7  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8556  0AD8  3000               	movlw	0
  8557  0AD9  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8558                           
  8559                           ;AutomationNew.h: 59: currentStateBuffer[currentStateBufferPositions++] = charSwitchSTAT
      +                          E;
  8560  0ADA  082E               	movf	applianceControl@charSwitchSTATE,w
  8561  0ADB  00B3               	movwf	??_applianceControl
  8562  0ADC  083E               	movf	applianceControl@currentStateBufferPositions,w
  8563  0ADD  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8564  0ADE  0086               	movwf	6
  8565  0ADF  3003               	movlw	3	; select bank7/8
  8566  0AE0  0087               	movwf	7
  8567  0AE1  0833               	movf	??_applianceControl,w
  8568  0AE2  0081               	movwf	1
  8569  0AE3  3001               	movlw	1
  8570  0AE4  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8571  0AE5  3000               	movlw	0
  8572  0AE6  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8573                           
  8574                           ;AutomationNew.h: 60: currentStateBuffer[currentStateBufferPositions++] = charSwitchMSB;
  8575  0AE7  0837               	movf	applianceControl@charSwitchMSB,w
  8576  0AE8  00B3               	movwf	??_applianceControl
  8577  0AE9  083E               	movf	applianceControl@currentStateBufferPositions,w
  8578  0AEA  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8579  0AEB  0086               	movwf	6
  8580  0AEC  3003               	movlw	3	; select bank7/8
  8581  0AED  0087               	movwf	7
  8582  0AEE  0833               	movf	??_applianceControl,w
  8583  0AEF  0081               	movwf	1
  8584  0AF0  3001               	movlw	1
  8585  0AF1  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8586  0AF2  3000               	movlw	0
  8587  0AF3  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8588                           
  8589                           ;AutomationNew.h: 61: currentStateBuffer[currentStateBufferPositions] = charSwitchLSB;
  8590  0AF4  082D               	movf	applianceControl@charSwitchLSB,w
  8591  0AF5  00B3               	movwf	??_applianceControl
  8592  0AF6  083E               	movf	applianceControl@currentStateBufferPositions,w
  8593  0AF7  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8594  0AF8  0086               	movwf	6
  8595  0AF9  3003               	movlw	3	; select bank7/8
  8596  0AFA  0087               	movwf	7
  8597  0AFB  0833               	movf	??_applianceControl,w
  8598  0AFC  0081               	movwf	1
  8599                           
  8600                           ;AutomationNew.h: 63: currentStateBufferPositions-=3;
  8601  0AFD  30FD               	movlw	253
  8602  0AFE  07BE               	addwf	applianceControl@currentStateBufferPositions,f
  8603  0AFF  30FF               	movlw	255
  8604  0B00  3DBF               	addwfc	applianceControl@currentStateBufferPositions+1,f
  8605                           
  8606                           ;AutomationNew.h: 64: if(charFinalFrameState == '1')
  8607  0B01  3031               	movlw	49
  8608  0B02  0632               	xorwf	applianceControl@charFinalFrameState,w
  8609  0B03  1D03               	btfss	3,2
  8610  0B04  2B47               	goto	l5537
  8611                           
  8612                           ;AutomationNew.h: 65: {
  8613                           ;AutomationNew.h: 66: sendAcknowledgment(currentStateBuffer+currentStateBufferPositions)
      +                          ;
  8614  0B05  083E               	movf	applianceControl@currentStateBufferPositions,w
  8615  0B06  3EA0               	addlw	(low (_currentStateBuffer| (0+768)))& (0+255)
  8616  0B07  3193  2350  318A   	fcall	_sendAcknowledgment
  8617                           
  8618                           ;AutomationNew.h: 67: }
  8619                           ;AutomationNew.h: 69: switch(integerSwitchNumber){
  8620  0B0A  2B47               	goto	l5537
  8621  0B0B                     l5519:	
  8622                           ;AutomationNew.h: 70: case 1:
  8623                           
  8624                           
  8625                           ;AutomationNew.h: 71: {
  8626                           ;AutomationNew.h: 72: PORTEbits.RE0 = integerSwitchState;
  8627  0B0B  0020               	movlb	0	; select bank0
  8628  0B0C  0C40               	rrf	applianceControl@integerSwitchState,w
  8629  0B0D  1C03               	skipc
  8630  0B0E  1010               	bcf	16,0	;volatile
  8631  0B0F  1803               	skipnc
  8632  0B10  1410               	bsf	16,0	;volatile
  8633                           
  8634                           ;AutomationNew.h: 73: }break;
  8635  0B11  0008               	return
  8636  0B12                     l5521:	
  8637                           ;AutomationNew.h: 75: case 2:
  8638                           
  8639                           
  8640                           ;AutomationNew.h: 76: {
  8641                           ;AutomationNew.h: 77: PORTEbits.RE1 = integerSwitchState;
  8642  0B12  0C40               	rrf	applianceControl@integerSwitchState,w
  8643  0B13  1C03               	skipc
  8644  0B14  1090               	bcf	16,1	;volatile
  8645  0B15  1803               	skipnc
  8646  0B16  1490               	bsf	16,1	;volatile
  8647                           
  8648                           ;AutomationNew.h: 79: } break;
  8649  0B17  0008               	return
  8650  0B18                     l5523:	
  8651                           ;AutomationNew.h: 80: case 3:
  8652                           
  8653                           
  8654                           ;AutomationNew.h: 81: {
  8655                           ;AutomationNew.h: 82: PORTGbits.RG0 = integerSwitchState;
  8656  0B18  0C40               	rrf	applianceControl@integerSwitchState,w
  8657  0B19  0025               	movlb	5	; select bank5
  8658  0B1A  1C03               	skipc
  8659  0B1B  100D               	bcf	13,0	;volatile
  8660  0B1C  1803               	skipnc
  8661  0B1D  140D               	bsf	13,0	;volatile
  8662                           
  8663                           ;AutomationNew.h: 84: } break;
  8664  0B1E  0008               	return
  8665  0B1F                     l5525:	
  8666                           ;AutomationNew.h: 86: case 4:
  8667                           
  8668                           
  8669                           ;AutomationNew.h: 87: {
  8670                           ;AutomationNew.h: 88: PORTGbits.RG3 = integerSwitchState;
  8671  0B1F  0020               	movlb	0	; select bank0
  8672  0B20  0C40               	rrf	applianceControl@integerSwitchState,w
  8673  0B21  0025               	movlb	5	; select bank5
  8674  0B22  1C03               	skipc
  8675  0B23  118D               	bcf	13,3	;volatile
  8676  0B24  1803               	skipnc
  8677  0B25  158D               	bsf	13,3	;volatile
  8678                           
  8679                           ;AutomationNew.h: 89: }break;
  8680  0B26  0008               	return
  8681  0B27                     l5527:	
  8682                           ;AutomationNew.h: 90: case 5:
  8683                           
  8684                           
  8685                           ;AutomationNew.h: 91: {
  8686                           ;AutomationNew.h: 92: PORTGbits.RG4 = integerSwitchState;
  8687  0B27  0020               	movlb	0	; select bank0
  8688  0B28  0C40               	rrf	applianceControl@integerSwitchState,w
  8689  0B29  0025               	movlb	5	; select bank5
  8690  0B2A  1C03               	skipc
  8691  0B2B  120D               	bcf	13,4	;volatile
  8692  0B2C  1803               	skipnc
  8693  0B2D  160D               	bsf	13,4	;volatile
  8694                           
  8695                           ;AutomationNew.h: 93: }break;
  8696  0B2E  0008               	return
  8697  0B2F                     l5529:	
  8698                           ;AutomationNew.h: 94: case 6:
  8699                           
  8700                           
  8701                           ;AutomationNew.h: 95: {
  8702                           ;AutomationNew.h: 96: PORTFbits.RF6 = integerSwitchState;
  8703  0B2F  0020               	movlb	0	; select bank0
  8704  0B30  0C40               	rrf	applianceControl@integerSwitchState,w
  8705  0B31  0025               	movlb	5	; select bank5
  8706  0B32  1C03               	skipc
  8707  0B33  130C               	bcf	12,6	;volatile
  8708  0B34  1803               	skipnc
  8709  0B35  170C               	bsf	12,6	;volatile
  8710                           
  8711                           ;AutomationNew.h: 97: }break;
  8712  0B36  0008               	return
  8713  0B37                     l5531:	
  8714                           ;AutomationNew.h: 99: case 7:
  8715                           
  8716                           
  8717                           ;AutomationNew.h: 100: {
  8718                           ;AutomationNew.h: 101: PORTFbits.RF5 = integerSwitchState;
  8719  0B37  0020               	movlb	0	; select bank0
  8720  0B38  0C40               	rrf	applianceControl@integerSwitchState,w
  8721  0B39  0025               	movlb	5	; select bank5
  8722  0B3A  1C03               	skipc
  8723  0B3B  128C               	bcf	12,5	;volatile
  8724  0B3C  1803               	skipnc
  8725  0B3D  168C               	bsf	12,5	;volatile
  8726                           
  8727                           ;AutomationNew.h: 102: }break;
  8728  0B3E  0008               	return
  8729  0B3F                     l5533:	
  8730                           ;AutomationNew.h: 104: case 8:
  8731                           
  8732                           
  8733                           ;AutomationNew.h: 105: {
  8734                           ;AutomationNew.h: 106: PORTFbits.RF4 = integerSwitchState;
  8735  0B3F  0020               	movlb	0	; select bank0
  8736  0B40  0C40               	rrf	applianceControl@integerSwitchState,w
  8737  0B41  0025               	movlb	5	; select bank5
  8738  0B42  1C03               	skipc
  8739  0B43  120C               	bcf	12,4	;volatile
  8740  0B44  1803               	skipnc
  8741  0B45  160C               	bsf	12,4	;volatile
  8742                           
  8743                           ;AutomationNew.h: 124: }
  8744                           
  8745                           ;AutomationNew.h: 123: break;
  8746                           
  8747                           ;AutomationNew.h: 122: default:
  8748                           
  8749                           ;AutomationNew.h: 107: }break;
  8750  0B46  0008               	return
  8751  0B47                     l5537:	
  8752                           
  8753                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8754                           ; Switch size 1, requested type "space"
  8755                           ; Number of cases is 1, Range of values is 0 to 0
  8756                           ; switch strategies available:
  8757                           ; Name         Instructions Cycles
  8758                           ; simple_byte            4     3 (average)
  8759                           ; direct_byte            8     6 (fixed)
  8760                           ; jumptable            260     6 (fixed)
  8761                           ;	Chosen strategy is simple_byte
  8762  0B47  0020               	movlb	0	; select bank0
  8763  0B48  083D               	movf	applianceControl@integerSwitchNumber+1,w
  8764  0B49  3A00               	xorlw	0	; case 0
  8765  0B4A  1903               	skipnz
  8766  0B4B  2B4D               	goto	l6255
  8767  0B4C  2B5A               	goto	l435
  8768  0B4D                     l6255:	
  8769                           
  8770                           ; Switch size 1, requested type "space"
  8771                           ; Number of cases is 8, Range of values is 1 to 8
  8772                           ; switch strategies available:
  8773                           ; Name         Instructions Cycles
  8774                           ; direct_byte           25     9 (fixed)
  8775                           ; simple_byte           25    13 (average)
  8776                           ; jumptable            263     9 (fixed)
  8777                           ;	Chosen strategy is direct_byte
  8778  0B4D  083C               	movf	applianceControl@integerSwitchNumber,w
  8779  0B4E  3EFF               	addlw	-1
  8780  0B4F  1C03               	skipc
  8781  0B50  0008               	return
  8782  0B51  0084               	movwf	4
  8783  0B52  3008               	movlw	8
  8784  0B53  0204               	subwf	4,w
  8785  0B54  1803               	skipnc
  8786  0B55  0008               	return
  8787  0B56  3190               	movlp	high S6257
  8788  0B57  3504               	lslf	4,w
  8789  0B58  3E10               	addlw	low S6257
  8790  0B59  0082               	movwf	2
  8791  0B5A                     l435:	
  8792  0B5A  0008               	return
  8793  0B5B                     __end_of_applianceControl:	
  8794                           
  8795                           	psect	swtext2
  8796  1010                     __pswtext2:	
  8797  1010                     S6257:	
  8798  1010  318B  2B0B         	ljmp	l5519
  8799  1012  318B  2B12         	ljmp	l5521
  8800  1014  318B  2B18         	ljmp	l5523
  8801  1016  318B  2B1F         	ljmp	l5525
  8802  1018  318B  2B27         	ljmp	l5527
  8803  101A  318B  2B2F         	ljmp	l5529
  8804  101C  318B  2B37         	ljmp	l5531
  8805  101E  318B  2B3F         	ljmp	l5533
  8806                           
  8807                           	psect	text26
  8808  1350                     __ptext26:	
  8809 ;; *************** function _sendAcknowledgment *****************
  8810 ;; Defined at:
  8811 ;;		line 128 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\include\AutomationNew.h"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;  currentState    1    wreg     PTR unsigned char 
  8814 ;;		 -> currentStateBuffer(74), 
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;  currentState    1    3[BANK0 ] PTR unsigned char 
  8817 ;;		 -> currentStateBuffer(74), 
  8818 ;;  Tx_count        2    1[BANK0 ] int 
  8819 ;; Return value:  Size  Location     Type
  8820 ;;                  1    wreg      void 
  8821 ;; Registers used:
  8822 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8823 ;; Tracked objects:
  8824 ;;		On entry : 0/0
  8825 ;;		On exit  : 0/0
  8826 ;;		Unchanged: 0/0
  8827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  8829 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  8830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  8831 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  8832 ;;Total ram usage:        4 bytes
  8833 ;; Hardware stack levels used:    1
  8834 ;; Hardware stack levels required when called:    2
  8835 ;; This function calls:
  8836 ;;		Nothing
  8837 ;; This function is called by:
  8838 ;;		_applianceControl
  8839 ;; This function uses a non-reentrant model
  8840 ;;
  8841                           
  8842                           
  8843                           ;psect for function _sendAcknowledgment
  8844  1350                     _sendAcknowledgment:	
  8845                           
  8846                           ;incstack = 0
  8847                           ; Regs used in _sendAcknowledgment: [wreg+fsr1l+fsr1h+status,2+status,0]
  8848                           ;sendAcknowledgment@currentStateBuffer stored from wreg
  8849  1350  0020               	movlb	0	; select bank0
  8850  1351  00A3               	movwf	sendAcknowledgment@currentStateBuffer
  8851                           
  8852                           ;AutomationNew.h: 129: int Tx_count=0;
  8853  1352  01A1               	clrf	sendAcknowledgment@Tx_count
  8854  1353  01A2               	clrf	sendAcknowledgment@Tx_count+1
  8855  1354                     l4961:	
  8856                           ;AutomationNew.h: 130: while(Tx_count!=4)
  8857                           
  8858  1354  3004               	movlw	4
  8859  1355  0621               	xorwf	sendAcknowledgment@Tx_count,w
  8860  1356  0422               	iorwf	sendAcknowledgment@Tx_count+1,w
  8861  1357  1903               	btfsc	3,2
  8862  1358  0008               	return
  8863  1359                     l440:	
  8864                           ;AutomationNew.h: 131: {
  8865                           ;AutomationNew.h: 132: while (!TX1STAbits.TRMT);
  8866                           
  8867  1359  0023               	movlb	3	; select bank3
  8868  135A  1C9E               	btfss	30,1	;volatile
  8869  135B  2B59               	goto	l440
  8870                           
  8871                           ;AutomationNew.h: 133: TX1REG = *currentStateBuffer;
  8872  135C  0020               	movlb	0	; select bank0
  8873  135D  0823               	movf	sendAcknowledgment@currentStateBuffer,w
  8874  135E  0086               	movwf	6
  8875  135F  3003               	movlw	3	; select bank6/7
  8876  1360  0087               	movwf	7
  8877  1361  0801               	movf	1,w
  8878  1362  0023               	movlb	3	; select bank3
  8879  1363  009A               	movwf	26	;volatile
  8880                           
  8881                           ;AutomationNew.h: 134: *currentStateBuffer++;
  8882  1364  3001               	movlw	1
  8883  1365  0020               	movlb	0	; select bank0
  8884  1366  00A0               	movwf	??_sendAcknowledgment
  8885  1367  0820               	movf	??_sendAcknowledgment,w
  8886  1368  07A3               	addwf	sendAcknowledgment@currentStateBuffer,f
  8887                           
  8888                           ;AutomationNew.h: 135: Tx_count++;
  8889  1369  3001               	movlw	1
  8890  136A  07A1               	addwf	sendAcknowledgment@Tx_count,f
  8891  136B  3000               	movlw	0
  8892  136C  3DA2               	addwfc	sendAcknowledgment@Tx_count+1,f
  8893  136D  2B54               	goto	l4961
  8894  136E                     __end_of_sendAcknowledgment:	
  8895                           
  8896                           	psect	text27
  8897  078E                     __ptext27:	
  8898 ;; *************** function _atoi *****************
  8899 ;; Defined at:
  8900 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  8903 ;;		 -> ChildLockbuffer(2), switchstatusbuffer(2), switchNumberBuffer(3), copymainReceivedDataBuffer(32), 
  8904 ;;		 -> applianceControl@dimmerSpeedStringBuffer(2), applianceControl@switchNumberStringBuffer(2), NULL(0), 
  8905 ;; Auto vars:     Size  Location     Type
  8906 ;;  a               2   11[BANK0 ] int 
  8907 ;;  sign            1   10[BANK0 ] unsigned char 
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  2    6[BANK0 ] int 
  8910 ;; Registers used:
  8911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/0
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  8917 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  8918 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  8919 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  8920 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0
  8921 ;;Total ram usage:        7 bytes
  8922 ;; Hardware stack levels used:    1
  8923 ;; Hardware stack levels required when called:    3
  8924 ;; This function calls:
  8925 ;;		___wmul
  8926 ;;		_isdigit
  8927 ;; This function is called by:
  8928 ;;		_applicationControlRGB
  8929 ;;		_applianceControl
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           
  8934                           ;psect for function _atoi
  8935  078E                     _atoi:	
  8936  078E                     l4781:	
  8937                           ;incstack = 0
  8938                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8939                           
  8940  078E  0020               	movlb	0	; select bank0
  8941  078F  0826               	movf	atoi@s,w
  8942  0790  0086               	movwf	6
  8943  0791  0827               	movf	atoi@s+1,w
  8944  0792  0087               	movwf	7
  8945  0793  3020               	movlw	32
  8946  0794  0601               	xorwf	1,w
  8947  0795  1D03               	btfss	3,2
  8948  0796  2F9D               	goto	l4783
  8949  0797                     l4779:	
  8950  0797  3001               	movlw	1
  8951  0798  0020               	movlb	0	; select bank0
  8952  0799  07A6               	addwf	atoi@s,f
  8953  079A  3000               	movlw	0
  8954  079B  3DA7               	addwfc	atoi@s+1,f
  8955  079C  2F8E               	goto	l4781
  8956  079D                     l4783:	
  8957  079D  0826               	movf	atoi@s,w
  8958  079E  0086               	movwf	6
  8959  079F  0827               	movf	atoi@s+1,w
  8960  07A0  0087               	movwf	7
  8961  07A1  3009               	movlw	9
  8962  07A2  0601               	xorwf	1,w
  8963  07A3  1903               	btfsc	3,2
  8964  07A4  2F97               	goto	l4779
  8965  07A5  01AB               	clrf	atoi@a
  8966  07A6  01AC               	clrf	atoi@a+1
  8967  07A7  01AA               	clrf	atoi@sign
  8968  07A8  0826               	movf	atoi@s,w
  8969  07A9  0086               	movwf	6
  8970  07AA  0827               	movf	atoi@s+1,w
  8971  07AB  0087               	movwf	7
  8972  07AC  302D               	movlw	45
  8973  07AD  0601               	xorwf	1,w
  8974  07AE  1D03               	btfss	3,2
  8975  07AF  2FB5               	goto	l4793
  8976  07B0  3001               	movlw	1
  8977  07B1  00A8               	movwf	??_atoi
  8978  07B2  0828               	movf	??_atoi,w
  8979  07B3  07AA               	addwf	atoi@sign,f
  8980  07B4  2FBD               	goto	l4799
  8981  07B5                     l4793:	
  8982  07B5  0826               	movf	atoi@s,w
  8983  07B6  0086               	movwf	6
  8984  07B7  0827               	movf	atoi@s+1,w
  8985  07B8  0087               	movwf	7
  8986  07B9  302B               	movlw	43
  8987  07BA  0601               	xorwf	1,w
  8988  07BB  1D03               	btfss	3,2
  8989  07BC  2FC1               	goto	l4801
  8990  07BD                     l4799:	
  8991  07BD  3001               	movlw	1
  8992  07BE  07A6               	addwf	atoi@s,f
  8993  07BF  3000               	movlw	0
  8994  07C0  3DA7               	addwfc	atoi@s+1,f
  8995  07C1                     l4801:	
  8996  07C1  0826               	movf	atoi@s,w
  8997  07C2  0086               	movwf	6
  8998  07C3  0827               	movf	atoi@s+1,w
  8999  07C4  0087               	movwf	7
  9000  07C5  0801               	movf	1,w
  9001  07C6  3191  21FD  3187   	fcall	_isdigit
  9002  07C9  1C03               	btfss	3,0
  9003  07CA  2FEA               	goto	l4803
  9004  07CB  0020               	movlb	0	; select bank0
  9005  07CC  082C               	movf	atoi@a+1,w
  9006  07CD  00A1               	movwf	___wmul@multiplier+1
  9007  07CE  082B               	movf	atoi@a,w
  9008  07CF  00A0               	movwf	___wmul@multiplier
  9009  07D0  300A               	movlw	10
  9010  07D1  00A2               	movwf	___wmul@multiplicand
  9011  07D2  3000               	movlw	0
  9012  07D3  00A3               	movwf	___wmul@multiplicand+1
  9013  07D4  3192  22DD  3187   	fcall	___wmul
  9014  07D7  0020               	movlb	0	; select bank0
  9015  07D8  0826               	movf	atoi@s,w
  9016  07D9  0086               	movwf	6
  9017  07DA  0827               	movf	atoi@s+1,w
  9018  07DB  0087               	movwf	7
  9019  07DC  0801               	movf	1,w
  9020  07DD  0720               	addwf	?___wmul,w
  9021  07DE  00A8               	movwf	??_atoi
  9022  07DF  0821               	movf	?___wmul+1,w
  9023  07E0  1803               	skipnc
  9024  07E1  0A21               	incf	?___wmul+1,w
  9025  07E2  00A9               	movwf	??_atoi+1
  9026  07E3  0828               	movf	??_atoi,w
  9027  07E4  3ED0               	addlw	208
  9028  07E5  00AB               	movwf	atoi@a
  9029  07E6  30FF               	movlw	255
  9030  07E7  3D29               	addwfc	??_atoi+1,w
  9031  07E8  00AC               	movwf	atoi@a+1
  9032  07E9  2FBD               	goto	l4799
  9033  07EA                     l4803:	
  9034  07EA  0020               	movlb	0	; select bank0
  9035  07EB  082A               	movf	atoi@sign,w
  9036  07EC  1903               	btfsc	3,2
  9037  07ED  2FFA               	goto	l4809
  9038  07EE  092B               	comf	atoi@a,w
  9039  07EF  00A8               	movwf	??_atoi
  9040  07F0  092C               	comf	atoi@a+1,w
  9041  07F1  00A9               	movwf	??_atoi+1
  9042  07F2  0AA8               	incf	??_atoi,f
  9043  07F3  1903               	skipnz
  9044  07F4  0AA9               	incf	??_atoi+1,f
  9045  07F5  0828               	movf	??_atoi,w
  9046  07F6  00A6               	movwf	?_atoi
  9047  07F7  0829               	movf	??_atoi+1,w
  9048  07F8  00A7               	movwf	?_atoi+1
  9049  07F9  0008               	return
  9050  07FA                     l4809:	
  9051  07FA  082C               	movf	atoi@a+1,w
  9052  07FB  00A7               	movwf	?_atoi+1
  9053  07FC  082B               	movf	atoi@a,w
  9054  07FD  00A6               	movwf	?_atoi
  9055  07FE  0008               	return
  9056  07FF                     __end_of_atoi:	
  9057                           
  9058                           	psect	text28
  9059  11FD                     __ptext28:	
  9060 ;; *************** function _isdigit *****************
  9061 ;; Defined at:
  9062 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;  c               1    wreg     unsigned char 
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;  c               1    1[BANK0 ] unsigned char 
  9067 ;; Return value:  Size  Location     Type
  9068 ;;		None               void
  9069 ;; Registers used:
  9070 ;;		wreg, status,2, status,0
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9077 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  9078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9079 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  9080 ;;Total ram usage:        2 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; Hardware stack levels required when called:    2
  9083 ;; This function calls:
  9084 ;;		Nothing
  9085 ;; This function is called by:
  9086 ;;		_atoi
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           
  9091                           ;psect for function _isdigit
  9092  11FD                     _isdigit:	
  9093                           
  9094                           ;incstack = 0
  9095                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9096                           ;isdigit@c stored from wreg
  9097  11FD  0020               	movlb	0	; select bank0
  9098  11FE  00A1               	movwf	isdigit@c
  9099  11FF  01A0               	clrf	_isdigit$1387
  9100  1200  303A               	movlw	58
  9101  1201  0221               	subwf	isdigit@c,w
  9102  1202  1803               	skipnc
  9103  1203  2A0A               	goto	l4737
  9104  1204  3030               	movlw	48
  9105  1205  0221               	subwf	isdigit@c,w
  9106  1206  1C03               	skipc
  9107  1207  2A0A               	goto	l4737
  9108  1208  01A0               	clrf	_isdigit$1387
  9109  1209  0AA0               	incf	_isdigit$1387,f
  9110  120A                     l4737:	
  9111  120A  0C20               	rrf	_isdigit$1387,w
  9112  120B  0008               	return
  9113  120C                     __end_of_isdigit:	
  9114                           
  9115                           	psect	text29
  9116  12DD                     __ptext29:	
  9117 ;; *************** function ___wmul *****************
  9118 ;; Defined at:
  9119 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9120 ;; Parameters:    Size  Location     Type
  9121 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9122 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;  product         2    4[BANK0 ] unsigned int 
  9125 ;; Return value:  Size  Location     Type
  9126 ;;                  2    0[BANK0 ] unsigned int 
  9127 ;; Registers used:
  9128 ;;		wreg, status,2, status,0
  9129 ;; Tracked objects:
  9130 ;;		On entry : 0/0
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9134 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  9135 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  9136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9137 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  9138 ;;Total ram usage:        6 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:    2
  9141 ;; This function calls:
  9142 ;;		Nothing
  9143 ;; This function is called by:
  9144 ;;		_hexadecimalToDecimal
  9145 ;;		_atoi
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function ___wmul
  9151  12DD                     ___wmul:	
  9152                           
  9153                           ;incstack = 0
  9154                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9155  12DD  0020               	movlb	0	; select bank0
  9156  12DE  01A4               	clrf	___wmul@product
  9157  12DF  01A5               	clrf	___wmul@product+1
  9158  12E0                     l4685:	
  9159  12E0  1C20               	btfss	___wmul@multiplier,0
  9160  12E1  2AE6               	goto	l680
  9161  12E2  0822               	movf	___wmul@multiplicand,w
  9162  12E3  07A4               	addwf	___wmul@product,f
  9163  12E4  0823               	movf	___wmul@multiplicand+1,w
  9164  12E5  3DA5               	addwfc	___wmul@product+1,f
  9165  12E6                     l680:	
  9166  12E6  3001               	movlw	1
  9167  12E7                     u4565:	
  9168  12E7  35A2               	lslf	___wmul@multiplicand,f
  9169  12E8  0DA3               	rlf	___wmul@multiplicand+1,f
  9170  12E9  0B89               	decfsz	9,f
  9171  12EA  2AE7               	goto	u4565
  9172  12EB  3001               	movlw	1
  9173  12EC                     u4575:	
  9174  12EC  36A1               	lsrf	___wmul@multiplier+1,f
  9175  12ED  0CA0               	rrf	___wmul@multiplier,f
  9176  12EE  0B89               	decfsz	9,f
  9177  12EF  2AEC               	goto	u4575
  9178  12F0  0820               	movf	___wmul@multiplier,w
  9179  12F1  0421               	iorwf	___wmul@multiplier+1,w
  9180  12F2  1D03               	btfss	3,2
  9181  12F3  2AE0               	goto	l4685
  9182  12F4  0825               	movf	___wmul@product+1,w
  9183  12F5  00A1               	movwf	?___wmul+1
  9184  12F6  0824               	movf	___wmul@product,w
  9185  12F7  00A0               	movwf	?___wmul
  9186  12F8  0008               	return
  9187  12F9                     __end_of___wmul:	
  9188                           
  9189                           	psect	text30
  9190  1332                     __ptext30:	
  9191 ;; *************** function _allPeripheralInit *****************
  9192 ;; Defined at:
  9193 ;;		line 915 in file "main.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;		None
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;		None
  9198 ;; Return value:  Size  Location     Type
  9199 ;;                  1    wreg      void 
  9200 ;; Registers used:
  9201 ;;		wreg, status,2, status,0, pclath, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9211 ;;Total ram usage:        0 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    3
  9214 ;; This function calls:
  9215 ;;		_CCP7_Initialize
  9216 ;;		_CCP8_Initialize
  9217 ;;		_CCP9_Initialize
  9218 ;;		_EUSART_Initialize
  9219 ;;		_TMR1_Initialize
  9220 ;;		_TMR2_Initialize
  9221 ;;		_TMR3_Initialize
  9222 ;;		_TMR4_Initialize
  9223 ;;		_TMR5_Initialize
  9224 ;;		_TMR6_Initialize
  9225 ;; This function is called by:
  9226 ;;		_main
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           
  9231                           ;psect for function _allPeripheralInit
  9232  1332                     _allPeripheralInit:	
  9233                           
  9234                           ;main.c: 916: EUSART_Initialize();
  9235                           
  9236                           ;incstack = 0
  9237                           ; Regs used in _allPeripheralInit: [wreg+status,2+status,0+pclath+cstack]
  9238  1332  3192  2279  3193   	fcall	_EUSART_Initialize
  9239                           
  9240                           ;main.c: 917: TMR1_Initialize();
  9241  1335  3191  21B9  3193   	fcall	_TMR1_Initialize
  9242                           
  9243                           ;main.c: 918: TMR2_Initialize();
  9244  1338  3191  21AF  3193   	fcall	_TMR2_Initialize
  9245                           
  9246                           ;main.c: 919: TMR3_Initialize();
  9247  133B  3191  21E5  3193   	fcall	_TMR3_Initialize
  9248                           
  9249                           ;main.c: 920: TMR4_Initialize();
  9250  133E  3191  21C4  3193   	fcall	_TMR4_Initialize
  9251                           
  9252                           ;main.c: 921: TMR5_Initialize();
  9253  1341  3191  21F1  3193   	fcall	_TMR5_Initialize
  9254                           
  9255                           ;main.c: 922: TMR6_Initialize();
  9256  1344  3191  21CF  3193   	fcall	_TMR6_Initialize
  9257                           
  9258                           ;main.c: 924: CCP9_Initialize();
  9259  1347  3191  21A5  3193   	fcall	_CCP9_Initialize
  9260                           
  9261                           ;main.c: 925: CCP8_Initialize();
  9262  134A  3191  219B  3193   	fcall	_CCP8_Initialize
  9263                           
  9264                           ;main.c: 926: CCP7_Initialize();
  9265  134D  3191  2191         	fcall	_CCP7_Initialize
  9266  134F  0008               	return
  9267  1350                     __end_of_allPeripheralInit:	
  9268                           
  9269                           	psect	text31
  9270  11CF                     __ptext31:	
  9271 ;; *************** function _TMR6_Initialize *****************
  9272 ;; Defined at:
  9273 ;;		line 1109 in file "main.c"
  9274 ;; Parameters:    Size  Location     Type
  9275 ;;		None
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;		None
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  1    wreg      void 
  9280 ;; Registers used:
  9281 ;;		wreg, status,2
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9291 ;;Total ram usage:        0 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    2
  9294 ;; This function calls:
  9295 ;;		Nothing
  9296 ;; This function is called by:
  9297 ;;		_allPeripheralInit
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           
  9302                           ;psect for function _TMR6_Initialize
  9303  11CF                     _TMR6_Initialize:	
  9304                           
  9305                           ;main.c: 1114: T6CON = 0x08;
  9306                           
  9307                           ;incstack = 0
  9308                           ; Regs used in _TMR6_Initialize: [wreg+status,2]
  9309  11CF  3008               	movlw	8
  9310  11D0  0028               	movlb	8	; select bank8
  9311  11D1  009E               	movwf	30	;volatile
  9312                           
  9313                           ;main.c: 1120: TMR6 = 0x00;
  9314  11D2  019C               	clrf	28	;volatile
  9315                           
  9316                           ;main.c: 1123: PIR3bits.TMR6IF = 0;
  9317  11D3  0020               	movlb	0	; select bank0
  9318  11D4  1193               	bcf	19,3	;volatile
  9319                           
  9320                           ;main.c: 1126: PIE3bits.TMR6IE = 1;
  9321  11D5  0021               	movlb	1	; select bank1
  9322  11D6  1593               	bsf	19,3	;volatile
  9323                           
  9324                           ;main.c: 1128: GIE = 1;
  9325  11D7  178B               	bsf	11,7	;volatile
  9326                           
  9327                           ;main.c: 1131: PEIE = 1;
  9328  11D8  170B               	bsf	11,6	;volatile
  9329  11D9  0008               	return
  9330  11DA                     __end_of_TMR6_Initialize:	
  9331                           
  9332                           	psect	text32
  9333  11F1                     __ptext32:	
  9334 ;; *************** function _TMR5_Initialize *****************
  9335 ;; Defined at:
  9336 ;;		line 1032 in file "main.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;		None
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;		None
  9341 ;; Return value:  Size  Location     Type
  9342 ;;                  1    wreg      void 
  9343 ;; Registers used:
  9344 ;;		status,2
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9354 ;;Total ram usage:        0 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; Hardware stack levels required when called:    2
  9357 ;; This function calls:
  9358 ;;		Nothing
  9359 ;; This function is called by:
  9360 ;;		_allPeripheralInit
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _TMR5_Initialize
  9366  11F1                     _TMR5_Initialize:	
  9367                           
  9368                           ;main.c: 1037: T5CON = 0x00;
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _TMR5_Initialize: [status,2]
  9372  11F1  0028               	movlb	8	; select bank8
  9373  11F2  019A               	clrf	26	;volatile
  9374                           
  9375                           ;main.c: 1040: T5GCON = 0x00;
  9376  11F3  019B               	clrf	27	;volatile
  9377                           
  9378                           ;main.c: 1043: TMR5H = 0x00;
  9379  11F4  0199               	clrf	25	;volatile
  9380                           
  9381                           ;main.c: 1046: TMR5L = 0x00;
  9382  11F5  0198               	clrf	24	;volatile
  9383                           
  9384                           ;main.c: 1049: PIR3bits.TMR5IF = 0;
  9385  11F6  0020               	movlb	0	; select bank0
  9386  11F7  1113               	bcf	19,2	;volatile
  9387                           
  9388                           ;main.c: 1052: PIE3bits.TMR5IE = 1;
  9389  11F8  0021               	movlb	1	; select bank1
  9390  11F9  1513               	bsf	19,2	;volatile
  9391                           
  9392                           ;main.c: 1054: GIE = 1;
  9393  11FA  178B               	bsf	11,7	;volatile
  9394                           
  9395                           ;main.c: 1057: PEIE = 1;
  9396  11FB  170B               	bsf	11,6	;volatile
  9397  11FC  0008               	return
  9398  11FD                     __end_of_TMR5_Initialize:	
  9399                           
  9400                           	psect	text33
  9401  11C4                     __ptext33:	
  9402 ;; *************** function _TMR4_Initialize *****************
  9403 ;; Defined at:
  9404 ;;		line 1085 in file "main.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;		None
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;		None
  9409 ;; Return value:  Size  Location     Type
  9410 ;;                  1    wreg      void 
  9411 ;; Registers used:
  9412 ;;		wreg, status,2
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9422 ;;Total ram usage:        0 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    2
  9425 ;; This function calls:
  9426 ;;		Nothing
  9427 ;; This function is called by:
  9428 ;;		_allPeripheralInit
  9429 ;; This function uses a non-reentrant model
  9430 ;;
  9431                           
  9432                           
  9433                           ;psect for function _TMR4_Initialize
  9434  11C4                     _TMR4_Initialize:	
  9435                           
  9436                           ;main.c: 1090: T4CON = 0x08;
  9437                           
  9438                           ;incstack = 0
  9439                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
  9440  11C4  3008               	movlw	8
  9441  11C5  0028               	movlb	8	; select bank8
  9442  11C6  0097               	movwf	23	;volatile
  9443                           
  9444                           ;main.c: 1096: TMR4 = 0x00;
  9445  11C7  0195               	clrf	21	;volatile
  9446                           
  9447                           ;main.c: 1099: PIR3bits.TMR4IF = 0;
  9448  11C8  0020               	movlb	0	; select bank0
  9449  11C9  1093               	bcf	19,1	;volatile
  9450                           
  9451                           ;main.c: 1102: PIE3bits.TMR4IE = 1;
  9452  11CA  0021               	movlb	1	; select bank1
  9453  11CB  1493               	bsf	19,1	;volatile
  9454                           
  9455                           ;main.c: 1103: GIE = 1;
  9456  11CC  178B               	bsf	11,7	;volatile
  9457                           
  9458                           ;main.c: 1106: PEIE = 1;
  9459  11CD  170B               	bsf	11,6	;volatile
  9460  11CE  0008               	return
  9461  11CF                     __end_of_TMR4_Initialize:	
  9462                           
  9463                           	psect	text34
  9464  11E5                     __ptext34:	
  9465 ;; *************** function _TMR3_Initialize *****************
  9466 ;; Defined at:
  9467 ;;		line 1002 in file "main.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;		None
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  1    wreg      void 
  9474 ;; Registers used:
  9475 ;;		status,2
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9485 ;;Total ram usage:        0 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    2
  9488 ;; This function calls:
  9489 ;;		Nothing
  9490 ;; This function is called by:
  9491 ;;		_allPeripheralInit
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           
  9496                           ;psect for function _TMR3_Initialize
  9497  11E5                     _TMR3_Initialize:	
  9498                           
  9499                           ;main.c: 1005: T3CON = 0x00;
  9500                           
  9501                           ;incstack = 0
  9502                           ; Regs used in _TMR3_Initialize: [status,2]
  9503  11E5  0028               	movlb	8	; select bank8
  9504  11E6  0193               	clrf	19	;volatile
  9505                           
  9506                           ;main.c: 1008: T3GCON = 0x00;
  9507  11E7  0194               	clrf	20	;volatile
  9508                           
  9509                           ;main.c: 1011: TMR3H = 0x00;
  9510  11E8  0192               	clrf	18	;volatile
  9511                           
  9512                           ;main.c: 1014: TMR3L = 0x00;
  9513  11E9  0191               	clrf	17	;volatile
  9514                           
  9515                           ;main.c: 1017: PIR3bits.TMR3IF = 0;
  9516  11EA  0020               	movlb	0	; select bank0
  9517  11EB  1013               	bcf	19,0	;volatile
  9518                           
  9519                           ;main.c: 1020: PIE3bits.TMR3IE = 1;
  9520  11EC  0021               	movlb	1	; select bank1
  9521  11ED  1413               	bsf	19,0	;volatile
  9522                           
  9523                           ;main.c: 1026: GIE = 1;
  9524  11EE  178B               	bsf	11,7	;volatile
  9525                           
  9526                           ;main.c: 1029: PEIE = 1;
  9527  11EF  170B               	bsf	11,6	;volatile
  9528  11F0  0008               	return
  9529  11F1                     __end_of_TMR3_Initialize:	
  9530                           
  9531                           	psect	text35
  9532  11AF                     __ptext35:	
  9533 ;; *************** function _TMR2_Initialize *****************
  9534 ;; Defined at:
  9535 ;;		line 1060 in file "main.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;		None
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;		None
  9540 ;; Return value:  Size  Location     Type
  9541 ;;                  1    wreg      void 
  9542 ;; Registers used:
  9543 ;;		wreg, status,2
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9553 ;;Total ram usage:        0 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    2
  9556 ;; This function calls:
  9557 ;;		Nothing
  9558 ;; This function is called by:
  9559 ;;		_allPeripheralInit
  9560 ;; This function uses a non-reentrant model
  9561 ;;
  9562                           
  9563                           
  9564                           ;psect for function _TMR2_Initialize
  9565  11AF                     _TMR2_Initialize:	
  9566                           
  9567                           ;main.c: 1065: T2CON = 0x08;
  9568                           
  9569                           ;incstack = 0
  9570                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  9571  11AF  3008               	movlw	8
  9572  11B0  0020               	movlb	0	; select bank0
  9573  11B1  009C               	movwf	28	;volatile
  9574                           
  9575                           ;main.c: 1071: TMR2 = 0x00;
  9576  11B2  019A               	clrf	26	;volatile
  9577                           
  9578                           ;main.c: 1074: PIR1bits.TMR2IF = 0;
  9579  11B3  1091               	bcf	17,1	;volatile
  9580                           
  9581                           ;main.c: 1077: PIE1bits.TMR2IE = 1;
  9582  11B4  0021               	movlb	1	; select bank1
  9583  11B5  1491               	bsf	17,1	;volatile
  9584                           
  9585                           ;main.c: 1078: GIE = 1;
  9586  11B6  178B               	bsf	11,7	;volatile
  9587                           
  9588                           ;main.c: 1081: PEIE = 1;
  9589  11B7  170B               	bsf	11,6	;volatile
  9590  11B8  0008               	return
  9591  11B9                     __end_of_TMR2_Initialize:	
  9592                           
  9593                           	psect	text36
  9594  11B9                     __ptext36:	
  9595 ;; *************** function _TMR1_Initialize *****************
  9596 ;; Defined at:
  9597 ;;		line 971 in file "main.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;		None
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;		None
  9602 ;; Return value:  Size  Location     Type
  9603 ;;                  1    wreg      void 
  9604 ;; Registers used:
  9605 ;;		status,2
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9615 ;;Total ram usage:        0 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    2
  9618 ;; This function calls:
  9619 ;;		Nothing
  9620 ;; This function is called by:
  9621 ;;		_allPeripheralInit
  9622 ;; This function uses a non-reentrant model
  9623 ;;
  9624                           
  9625                           
  9626                           ;psect for function _TMR1_Initialize
  9627  11B9                     _TMR1_Initialize:	
  9628                           
  9629                           ;main.c: 974: T1CON = 0x00;
  9630                           
  9631                           ;incstack = 0
  9632                           ; Regs used in _TMR1_Initialize: [status,2]
  9633  11B9  0020               	movlb	0	; select bank0
  9634  11BA  0198               	clrf	24	;volatile
  9635                           
  9636                           ;main.c: 977: T1GCON = 0x00;
  9637  11BB  0199               	clrf	25	;volatile
  9638                           
  9639                           ;main.c: 980: TMR1H = 0x00;
  9640  11BC  0197               	clrf	23	;volatile
  9641                           
  9642                           ;main.c: 983: TMR1L = 0x00;
  9643  11BD  0196               	clrf	22	;volatile
  9644                           
  9645                           ;main.c: 986: PIR1bits.TMR1IF = 0;
  9646  11BE  1011               	bcf	17,0	;volatile
  9647                           
  9648                           ;main.c: 989: PIE1bits.TMR1IE = 1;
  9649  11BF  0021               	movlb	1	; select bank1
  9650  11C0  1411               	bsf	17,0	;volatile
  9651                           
  9652                           ;main.c: 995: GIE = 1;
  9653  11C1  178B               	bsf	11,7	;volatile
  9654                           
  9655                           ;main.c: 998: PEIE = 1;
  9656  11C2  170B               	bsf	11,6	;volatile
  9657  11C3  0008               	return
  9658  11C4                     __end_of_TMR1_Initialize:	
  9659                           
  9660                           	psect	text37
  9661  1279                     __ptext37:	
  9662 ;; *************** function _EUSART_Initialize *****************
  9663 ;; Defined at:
  9664 ;;		line 933 in file "main.c"
  9665 ;; Parameters:    Size  Location     Type
  9666 ;;		None
  9667 ;; Auto vars:     Size  Location     Type
  9668 ;;		None
  9669 ;; Return value:  Size  Location     Type
  9670 ;;                  1    wreg      void 
  9671 ;; Registers used:
  9672 ;;		wreg
  9673 ;; Tracked objects:
  9674 ;;		On entry : 0/0
  9675 ;;		On exit  : 0/0
  9676 ;;		Unchanged: 0/0
  9677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9682 ;;Total ram usage:        0 bytes
  9683 ;; Hardware stack levels used:    1
  9684 ;; Hardware stack levels required when called:    2
  9685 ;; This function calls:
  9686 ;;		Nothing
  9687 ;; This function is called by:
  9688 ;;		_allPeripheralInit
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           
  9693                           ;psect for function _EUSART_Initialize
  9694  1279                     _EUSART_Initialize:	
  9695                           
  9696                           ;main.c: 934: PIE1bits.RC1IE = 0;
  9697                           
  9698                           ;incstack = 0
  9699                           ; Regs used in _EUSART_Initialize: [wreg]
  9700  1279  0021               	movlb	1	; select bank1
  9701  127A  1291               	bcf	17,5	;volatile
  9702                           
  9703                           ;main.c: 935: PIE1bits.TX1IE = 0;
  9704  127B  1211               	bcf	17,4	;volatile
  9705                           
  9706                           ;main.c: 940: BAUD1CON = 0x0A;
  9707  127C  300A               	movlw	10
  9708  127D  0023               	movlb	3	; select bank3
  9709  127E  009F               	movwf	31	;volatile
  9710                           
  9711                           ;main.c: 943: RC1STA = 0x90;
  9712  127F  3090               	movlw	144
  9713  1280  009D               	movwf	29	;volatile
  9714                           
  9715                           ;main.c: 946: TX1STA = 0x24;
  9716  1281  3024               	movlw	36
  9717  1282  009E               	movwf	30	;volatile
  9718                           
  9719                           ;main.c: 951: SP1BRGL = 0xA0;
  9720  1283  30A0               	movlw	160
  9721  1284  009B               	movwf	27	;volatile
  9722                           
  9723                           ;main.c: 953: SP1BRGH = 0x01;
  9724  1285  3001               	movlw	1
  9725  1286  009C               	movwf	28	;volatile
  9726                           
  9727                           ;main.c: 956: GIE = 1;
  9728  1287  178B               	bsf	11,7	;volatile
  9729                           
  9730                           ;main.c: 959: PEIE = 1;
  9731  1288  170B               	bsf	11,6	;volatile
  9732                           
  9733                           ;main.c: 962: PIE1bits.RC1IE = 1;
  9734  1289  0021               	movlb	1	; select bank1
  9735  128A  1691               	bsf	17,5	;volatile
  9736                           
  9737                           ;main.c: 965: TX1STAbits.TXEN = 1;
  9738  128B  0023               	movlb	3	; select bank3
  9739  128C  169E               	bsf	30,5	;volatile
  9740                           
  9741                           ;main.c: 968: RC1STAbits.SPEN = 1;
  9742  128D  179D               	bsf	29,7	;volatile
  9743  128E  0008               	return
  9744  128F                     __end_of_EUSART_Initialize:	
  9745                           
  9746                           	psect	text38
  9747  11A5                     __ptext38:	
  9748 ;; *************** function _CCP9_Initialize *****************
  9749 ;; Defined at:
  9750 ;;		line 1134 in file "main.c"
  9751 ;; Parameters:    Size  Location     Type
  9752 ;;		None
  9753 ;; Auto vars:     Size  Location     Type
  9754 ;;		None
  9755 ;; Return value:  Size  Location     Type
  9756 ;;                  1    wreg      void 
  9757 ;; Registers used:
  9758 ;;		wreg, status,2
  9759 ;; Tracked objects:
  9760 ;;		On entry : 0/0
  9761 ;;		On exit  : 0/0
  9762 ;;		Unchanged: 0/0
  9763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9768 ;;Total ram usage:        0 bytes
  9769 ;; Hardware stack levels used:    1
  9770 ;; Hardware stack levels required when called:    2
  9771 ;; This function calls:
  9772 ;;		Nothing
  9773 ;; This function is called by:
  9774 ;;		_allPeripheralInit
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           
  9779                           ;psect for function _CCP9_Initialize
  9780  11A5                     _CCP9_Initialize:	
  9781                           
  9782                           ;main.c: 1138: CCP9CON = 0x84;
  9783                           
  9784                           ;incstack = 0
  9785                           ; Regs used in _CCP9_Initialize: [wreg+status,2]
  9786  11A5  3084               	movlw	132
  9787  11A6  002C               	movlb	12	; select bank12
  9788  11A7  009C               	movwf	28	;volatile
  9789                           
  9790                           ;main.c: 1141: CCPR9H = 0x00;
  9791  11A8  019B               	clrf	27	;volatile
  9792                           
  9793                           ;main.c: 1144: CCPR9L = 0x00;
  9794  11A9  019A               	clrf	26	;volatile
  9795                           
  9796                           ;main.c: 1150: PIR4bits.CCP9IF = 0;
  9797  11AA  0020               	movlb	0	; select bank0
  9798  11AB  1314               	bcf	20,6	;volatile
  9799                           
  9800                           ;main.c: 1153: PIE4bits.CCP9IE = 1;
  9801  11AC  0021               	movlb	1	; select bank1
  9802  11AD  1714               	bsf	20,6	;volatile
  9803  11AE  0008               	return
  9804  11AF                     __end_of_CCP9_Initialize:	
  9805                           
  9806                           	psect	text39
  9807  119B                     __ptext39:	
  9808 ;; *************** function _CCP8_Initialize *****************
  9809 ;; Defined at:
  9810 ;;		line 1177 in file "main.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;		None
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;		None
  9815 ;; Return value:  Size  Location     Type
  9816 ;;                  1    wreg      void 
  9817 ;; Registers used:
  9818 ;;		wreg, status,2
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9828 ;;Total ram usage:        0 bytes
  9829 ;; Hardware stack levels used:    1
  9830 ;; Hardware stack levels required when called:    2
  9831 ;; This function calls:
  9832 ;;		Nothing
  9833 ;; This function is called by:
  9834 ;;		_allPeripheralInit
  9835 ;; This function uses a non-reentrant model
  9836 ;;
  9837                           
  9838                           
  9839                           ;psect for function _CCP8_Initialize
  9840  119B                     _CCP8_Initialize:	
  9841                           
  9842                           ;main.c: 1181: CCP9CON = 0x84;
  9843                           
  9844                           ;incstack = 0
  9845                           ; Regs used in _CCP8_Initialize: [wreg+status,2]
  9846  119B  3084               	movlw	132
  9847  119C  002C               	movlb	12	; select bank12
  9848  119D  009C               	movwf	28	;volatile
  9849                           
  9850                           ;main.c: 1184: CCPR8H = 0x00;
  9851  119E  0198               	clrf	24	;volatile
  9852                           
  9853                           ;main.c: 1187: CCPR8L = 0x00;
  9854  119F  0197               	clrf	23	;volatile
  9855                           
  9856                           ;main.c: 1193: PIR4bits.CCP8IF = 0;
  9857  11A0  0020               	movlb	0	; select bank0
  9858  11A1  1194               	bcf	20,3	;volatile
  9859                           
  9860                           ;main.c: 1196: PIE4bits.CCP8IE = 1;
  9861  11A2  0021               	movlb	1	; select bank1
  9862  11A3  1594               	bsf	20,3	;volatile
  9863  11A4  0008               	return
  9864  11A5                     __end_of_CCP8_Initialize:	
  9865                           
  9866                           	psect	text40
  9867  1191                     __ptext40:	
  9868 ;; *************** function _CCP7_Initialize *****************
  9869 ;; Defined at:
  9870 ;;		line 1156 in file "main.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      void 
  9877 ;; Registers used:
  9878 ;;		wreg, status,2
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  9887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  9888 ;;Total ram usage:        0 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    2
  9891 ;; This function calls:
  9892 ;;		Nothing
  9893 ;; This function is called by:
  9894 ;;		_allPeripheralInit
  9895 ;; This function uses a non-reentrant model
  9896 ;;
  9897                           
  9898                           
  9899                           ;psect for function _CCP7_Initialize
  9900  1191                     _CCP7_Initialize:	
  9901                           
  9902                           ;main.c: 1160: CCP7CON = 0x84;
  9903                           
  9904                           ;incstack = 0
  9905                           ; Regs used in _CCP7_Initialize: [wreg+status,2]
  9906  1191  3084               	movlw	132
  9907  1192  002C               	movlb	12	; select bank12
  9908  1193  0096               	movwf	22	;volatile
  9909                           
  9910                           ;main.c: 1163: CCPR7H = 0x00;
  9911  1194  0195               	clrf	21	;volatile
  9912                           
  9913                           ;main.c: 1166: CCPR7L = 0x00;
  9914  1195  0194               	clrf	20	;volatile
  9915                           
  9916                           ;main.c: 1172: PIR4bits.CCP7IF = 0;
  9917  1196  0020               	movlb	0	; select bank0
  9918  1197  1114               	bcf	20,2	;volatile
  9919                           
  9920                           ;main.c: 1175: PIE4bits.CCP7IE = 1;
  9921  1198  0021               	movlb	1	; select bank1
  9922  1199  1514               	bsf	20,2	;volatile
  9923  119A  0008               	return
  9924  119B                     __end_of_CCP7_Initialize:	
  9925                           
  9926                           	psect	text41
  9927  122C                     __ptext41:	
  9928 ;; *************** function _TransmissionIndicationLedBlinking *****************
  9929 ;; Defined at:
  9930 ;;		line 1257 in file "main.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;		None
  9933 ;; Auto vars:     Size  Location     Type
  9934 ;;		None
  9935 ;; Return value:  Size  Location     Type
  9936 ;;                  1    wreg      void 
  9937 ;; Registers used:
  9938 ;;		wreg
  9939 ;; Tracked objects:
  9940 ;;		On entry : 0/0
  9941 ;;		On exit  : 0/0
  9942 ;;		Unchanged: 0/0
  9943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  9944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  9945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  9946 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  9947 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  9948 ;;Total ram usage:        2 bytes
  9949 ;; Hardware stack levels used:    1
  9950 ;; Hardware stack levels required when called:    2
  9951 ;; This function calls:
  9952 ;;		Nothing
  9953 ;; This function is called by:
  9954 ;;		_main
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958                           
  9959                           ;psect for function _TransmissionIndicationLedBlinking
  9960  122C                     _TransmissionIndicationLedBlinking:	
  9961                           
  9962                           ;main.c: 1258: PORTFbits.RF0 = 0;
  9963                           
  9964                           ;incstack = 0
  9965                           ; Regs used in _TransmissionIndicationLedBlinking: [wreg]
  9966  122C  0025               	movlb	5	; select bank5
  9967  122D  100C               	bcf	12,0	;volatile
  9968                           
  9969                           ;main.c: 1259: _delay((unsigned long)((100)*(16000000/4000.0)));
  9970  122E  3003               	movlw	3
  9971  122F  0020               	movlb	0	; select bank0
  9972  1230  00A1               	movwf	??_TransmissionIndicationLedBlinking+1
  9973  1231  3008               	movlw	8
  9974  1232  00A0               	movwf	??_TransmissionIndicationLedBlinking
  9975  1233  3077               	movlw	119
  9976  1234                     u6477:	
  9977  1234  0B89               	decfsz	9,f
  9978  1235  2A34               	goto	u6477
  9979  1236  0BA0               	decfsz	??_TransmissionIndicationLedBlinking,f
  9980  1237  2A34               	goto	u6477
  9981  1238  0BA1               	decfsz	??_TransmissionIndicationLedBlinking+1,f
  9982  1239  2A34               	goto	u6477
  9983                           
  9984                           ;main.c: 1260: PORTFbits.RF0 = 1;
  9985  123A  0025               	movlb	5	; select bank5
  9986  123B  140C               	bsf	12,0	;volatile
  9987  123C  0008               	return
  9988  123D                     __end_of_TransmissionIndicationLedBlinking:	
  9989                           
  9990                           	psect	text42
  9991  15E0                     __ptext42:	
  9992 ;; *************** function _SwitchOnStatustToGatway *****************
  9993 ;; Defined at:
  9994 ;;		line 1285 in file "main.c"
  9995 ;; Parameters:    Size  Location     Type
  9996 ;;  SwitchOnNumb    2    0[BANK0 ] const int 
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;		None
  9999 ;; Return value:  Size  Location     Type
 10000 ;;                  1    wreg      void 
 10001 ;; Registers used:
 10002 ;;		wreg, status,2, status,0
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10008 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
 10009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10010 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
 10011 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
 10012 ;;Total ram usage:        3 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    2
 10015 ;; This function calls:
 10016 ;;		Nothing
 10017 ;; This function is called by:
 10018 ;;		_main
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           
 10023                           ;psect for function _SwitchOnStatustToGatway
 10024  15E0                     _SwitchOnStatustToGatway:	
 10025                           
 10026                           ;main.c: 1287: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
 10027                           
 10028                           ;incstack = 0
 10029                           ; Regs used in _SwitchOnStatustToGatway: [wreg+status,2+status,0]
 10030  15E0  3052               	movlw	82
 10031  15E1  0023               	movlb	3	; select bank3
 10032  15E2  009A               	movwf	26	;volatile
 10033  15E3  3006               	movlw	6
 10034  15E4  0020               	movlb	0	; select bank0
 10035  15E5  00A2               	movwf	??_SwitchOnStatustToGatway
 10036  15E6  3030               	movlw	48
 10037  15E7                     u6487:	
 10038  15E7  0B89               	decfsz	9,f
 10039  15E8  2DE7               	goto	u6487
 10040  15E9  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10041  15EA  2DE7               	goto	u6487
 10042  15EB  0000               	nop
 10043                           
 10044                           ;main.c: 1288: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
 10045  15EC  3031               	movlw	49
 10046  15ED  0023               	movlb	3	; select bank3
 10047  15EE  009A               	movwf	26	;volatile
 10048  15EF  3006               	movlw	6
 10049  15F0  0020               	movlb	0	; select bank0
 10050  15F1  00A2               	movwf	??_SwitchOnStatustToGatway
 10051  15F2  3030               	movlw	48
 10052  15F3                     u6497:	
 10053  15F3  0B89               	decfsz	9,f
 10054  15F4  2DF3               	goto	u6497
 10055  15F5  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10056  15F6  2DF3               	goto	u6497
 10057  15F7  0000               	nop
 10058                           
 10059                           ;main.c: 1289: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10060  15F8  3030               	movlw	48
 10061  15F9  0023               	movlb	3	; select bank3
 10062  15FA  009A               	movwf	26	;volatile
 10063  15FB  3006               	movlw	6
 10064  15FC  0020               	movlb	0	; select bank0
 10065  15FD  00A2               	movwf	??_SwitchOnStatustToGatway
 10066  15FE  3030               	movlw	48
 10067  15FF                     u6507:	
 10068  15FF  0B89               	decfsz	9,f
 10069  1600  2DFF               	goto	u6507
 10070  1601  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10071  1602  2DFF               	goto	u6507
 10072  1603  0000               	nop
 10073                           
 10074                           ;main.c: 1290: TX1REG = SwitchOnNumber+'0';_delay((unsigned long)((1)*(16000000/4000.0))
      +                          );
 10075  1604  0020               	movlb	0	; select bank0
 10076  1605  0820               	movf	SwitchOnStatustToGatway@SwitchOnNumber,w
 10077  1606  3E30               	addlw	48
 10078  1607  0023               	movlb	3	; select bank3
 10079  1608  009A               	movwf	26	;volatile
 10080  1609  3006               	movlw	6
 10081  160A  0020               	movlb	0	; select bank0
 10082  160B  00A2               	movwf	??_SwitchOnStatustToGatway
 10083  160C  3030               	movlw	48
 10084  160D                     u6517:	
 10085  160D  0B89               	decfsz	9,f
 10086  160E  2E0D               	goto	u6517
 10087  160F  0BA2               	decfsz	??_SwitchOnStatustToGatway,f
 10088  1610  2E0D               	goto	u6517
 10089  1611  0000               	nop
 10090  1612  0008               	return
 10091  1613                     __end_of_SwitchOnStatustToGatway:	
 10092                           
 10093                           	psect	text43
 10094  15AD                     __ptext43:	
 10095 ;; *************** function _SwitchOffStatustToGatway *****************
 10096 ;; Defined at:
 10097 ;;		line 1278 in file "main.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;  SwitchOffNum    2    0[BANK0 ] const int 
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;		None
 10102 ;; Return value:  Size  Location     Type
 10103 ;;                  1    wreg      void 
 10104 ;; Registers used:
 10105 ;;		wreg, status,2, status,0
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/0
 10108 ;;		On exit  : 0/0
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10111 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
 10112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
 10114 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
 10115 ;;Total ram usage:        3 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:    2
 10118 ;; This function calls:
 10119 ;;		Nothing
 10120 ;; This function is called by:
 10121 ;;		_main
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           
 10126                           ;psect for function _SwitchOffStatustToGatway
 10127  15AD                     _SwitchOffStatustToGatway:	
 10128                           
 10129                           ;main.c: 1280: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
 10130                           
 10131                           ;incstack = 0
 10132                           ; Regs used in _SwitchOffStatustToGatway: [wreg+status,2+status,0]
 10133  15AD  3052               	movlw	82
 10134  15AE  0023               	movlb	3	; select bank3
 10135  15AF  009A               	movwf	26	;volatile
 10136  15B0  3006               	movlw	6
 10137  15B1  0020               	movlb	0	; select bank0
 10138  15B2  00A2               	movwf	??_SwitchOffStatustToGatway
 10139  15B3  3030               	movlw	48
 10140  15B4                     u6527:	
 10141  15B4  0B89               	decfsz	9,f
 10142  15B5  2DB4               	goto	u6527
 10143  15B6  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10144  15B7  2DB4               	goto	u6527
 10145  15B8  0000               	nop
 10146                           
 10147                           ;main.c: 1281: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10148  15B9  3030               	movlw	48
 10149  15BA  0023               	movlb	3	; select bank3
 10150  15BB  009A               	movwf	26	;volatile
 10151  15BC  3006               	movlw	6
 10152  15BD  0020               	movlb	0	; select bank0
 10153  15BE  00A2               	movwf	??_SwitchOffStatustToGatway
 10154  15BF  3030               	movlw	48
 10155  15C0                     u6537:	
 10156  15C0  0B89               	decfsz	9,f
 10157  15C1  2DC0               	goto	u6537
 10158  15C2  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10159  15C3  2DC0               	goto	u6537
 10160  15C4  0000               	nop
 10161                           
 10162                           ;main.c: 1282: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
 10163  15C5  3030               	movlw	48
 10164  15C6  0023               	movlb	3	; select bank3
 10165  15C7  009A               	movwf	26	;volatile
 10166  15C8  3006               	movlw	6
 10167  15C9  0020               	movlb	0	; select bank0
 10168  15CA  00A2               	movwf	??_SwitchOffStatustToGatway
 10169  15CB  3030               	movlw	48
 10170  15CC                     u6547:	
 10171  15CC  0B89               	decfsz	9,f
 10172  15CD  2DCC               	goto	u6547
 10173  15CE  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10174  15CF  2DCC               	goto	u6547
 10175  15D0  0000               	nop
 10176                           
 10177                           ;main.c: 1283: TX1REG = SwitchOffNumber+'0';_delay((unsigned long)((1)*(16000000/4000.0)
      +                          ));
 10178  15D1  0020               	movlb	0	; select bank0
 10179  15D2  0820               	movf	SwitchOffStatustToGatway@SwitchOffNumber,w
 10180  15D3  3E30               	addlw	48
 10181  15D4  0023               	movlb	3	; select bank3
 10182  15D5  009A               	movwf	26	;volatile
 10183  15D6  3006               	movlw	6
 10184  15D7  0020               	movlb	0	; select bank0
 10185  15D8  00A2               	movwf	??_SwitchOffStatustToGatway
 10186  15D9  3030               	movlw	48
 10187  15DA                     u6557:	
 10188  15DA  0B89               	decfsz	9,f
 10189  15DB  2DDA               	goto	u6557
 10190  15DC  0BA2               	decfsz	??_SwitchOffStatustToGatway,f
 10191  15DD  2DDA               	goto	u6557
 10192  15DE  0000               	nop
 10193  15DF  0008               	return
 10194  15E0                     __end_of_SwitchOffStatustToGatway:	
 10195                           
 10196                           	psect	text44
 10197  121B                     __ptext44:	
 10198 ;; *************** function _ReceivingIndicationLedBlinking *****************
 10199 ;; Defined at:
 10200 ;;		line 1262 in file "main.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;		None
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;		None
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  1    wreg      void 
 10207 ;; Registers used:
 10208 ;;		wreg
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
 10217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
 10218 ;;Total ram usage:        2 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    2
 10221 ;; This function calls:
 10222 ;;		Nothing
 10223 ;; This function is called by:
 10224 ;;		_main
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           
 10229                           ;psect for function _ReceivingIndicationLedBlinking
 10230  121B                     _ReceivingIndicationLedBlinking:	
 10231                           
 10232                           ;main.c: 1263: PORTFbits.RF1 = 0;
 10233                           
 10234                           ;incstack = 0
 10235                           ; Regs used in _ReceivingIndicationLedBlinking: [wreg]
 10236  121B  0025               	movlb	5	; select bank5
 10237  121C  108C               	bcf	12,1	;volatile
 10238                           
 10239                           ;main.c: 1264: _delay((unsigned long)((100)*(16000000/4000.0)));
 10240  121D  3003               	movlw	3
 10241  121E  0020               	movlb	0	; select bank0
 10242  121F  00A1               	movwf	??_ReceivingIndicationLedBlinking+1
 10243  1220  3008               	movlw	8
 10244  1221  00A0               	movwf	??_ReceivingIndicationLedBlinking
 10245  1222  3077               	movlw	119
 10246  1223                     u6567:	
 10247  1223  0B89               	decfsz	9,f
 10248  1224  2A23               	goto	u6567
 10249  1225  0BA0               	decfsz	??_ReceivingIndicationLedBlinking,f
 10250  1226  2A23               	goto	u6567
 10251  1227  0BA1               	decfsz	??_ReceivingIndicationLedBlinking+1,f
 10252  1228  2A23               	goto	u6567
 10253                           
 10254                           ;main.c: 1265: PORTFbits.RF1 = 1;
 10255  1229  0025               	movlb	5	; select bank5
 10256  122A  148C               	bsf	12,1	;volatile
 10257  122B  0008               	return
 10258  122C                     __end_of_ReceivingIndicationLedBlinking:	
 10259                           
 10260                           	psect	text45
 10261  1437                     __ptext45:	
 10262 ;; *************** function _GPIO_pin_Initialize *****************
 10263 ;; Defined at:
 10264 ;;		line 867 in file "main.c"
 10265 ;; Parameters:    Size  Location     Type
 10266 ;;		None
 10267 ;; Auto vars:     Size  Location     Type
 10268 ;;		None
 10269 ;; Return value:  Size  Location     Type
 10270 ;;                  1    wreg      void 
 10271 ;; Registers used:
 10272 ;;		status,2, status,0, pclath, cstack
 10273 ;; Tracked objects:
 10274 ;;		On entry : 0/0
 10275 ;;		On exit  : 0/0
 10276 ;;		Unchanged: 0/0
 10277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10282 ;;Total ram usage:        0 bytes
 10283 ;; Hardware stack levels used:    1
 10284 ;; Hardware stack levels required when called:    3
 10285 ;; This function calls:
 10286 ;;		_clearAllPorts
 10287 ;;		_pinINIT_extra
 10288 ;; This function is called by:
 10289 ;;		_main
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           
 10294                           ;psect for function _GPIO_pin_Initialize
 10295  1437                     _GPIO_pin_Initialize:	
 10296                           
 10297                           ;main.c: 868: clearAllPorts();
 10298                           
 10299                           ;incstack = 0
 10300                           ; Regs used in _GPIO_pin_Initialize: [status,2+status,0+pclath+cstack]
 10301  1437  3192  223D  3194   	fcall	_clearAllPorts
 10302                           
 10303                           ;main.c: 869: pinINIT_extra();
 10304  143A  3192  224F  3194   	fcall	_pinINIT_extra
 10305                           
 10306                           ;main.c: 870: TRISDbits.TRISD6 = 1;
 10307  143D  0021               	movlb	1	; select bank1
 10308  143E  170F               	bsf	15,6	;volatile
 10309                           
 10310                           ;main.c: 871: TRISDbits.TRISD7 = 1;
 10311  143F  178F               	bsf	15,7	;volatile
 10312                           
 10313                           ;main.c: 872: TRISBbits.TRISB0 = 1;
 10314  1440  140D               	bsf	13,0	;volatile
 10315                           
 10316                           ;main.c: 873: TRISBbits.TRISB1 = 1;
 10317  1441  148D               	bsf	13,1	;volatile
 10318                           
 10319                           ;main.c: 874: TRISBbits.TRISB2 = 1;
 10320  1442  150D               	bsf	13,2	;volatile
 10321                           
 10322                           ;main.c: 875: TRISBbits.TRISB3 = 1;
 10323  1443  158D               	bsf	13,3	;volatile
 10324                           
 10325                           ;main.c: 876: TRISBbits.TRISB4 = 1;
 10326  1444  160D               	bsf	13,4	;volatile
 10327                           
 10328                           ;main.c: 877: TRISBbits.TRISB5 = 1;
 10329  1445  168D               	bsf	13,5	;volatile
 10330                           
 10331                           ;main.c: 878: TRISDbits.TRISD5 = 1;
 10332  1446  168F               	bsf	15,5	;volatile
 10333                           
 10334                           ;main.c: 882: TRISEbits.TRISE0 = 0;
 10335  1447  1010               	bcf	16,0	;volatile
 10336                           
 10337                           ;main.c: 883: TRISEbits.TRISE1 = 0;
 10338  1448  1090               	bcf	16,1	;volatile
 10339                           
 10340                           ;main.c: 884: TRISGbits.TRISG0 = 0;
 10341  1449  0026               	movlb	6	; select bank6
 10342  144A  100D               	bcf	13,0	;volatile
 10343                           
 10344                           ;main.c: 885: TRISGbits.TRISG3 = 0;
 10345  144B  118D               	bcf	13,3	;volatile
 10346                           
 10347                           ;main.c: 886: TRISGbits.TRISG4 = 0;
 10348  144C  120D               	bcf	13,4	;volatile
 10349                           
 10350                           ;main.c: 887: TRISFbits.TRISF6 = 0;
 10351  144D  130C               	bcf	12,6	;volatile
 10352                           
 10353                           ;main.c: 888: TRISFbits.TRISF5 = 0;
 10354  144E  128C               	bcf	12,5	;volatile
 10355                           
 10356                           ;main.c: 889: TRISFbits.TRISF4 = 0;
 10357  144F  120C               	bcf	12,4	;volatile
 10358                           
 10359                           ;main.c: 892: TRISEbits.TRISE3 = 1;
 10360  1450  0021               	movlb	1	; select bank1
 10361  1451  1590               	bsf	16,3	;volatile
 10362                           
 10363                           ;main.c: 893: TRISEbits.TRISE5 = 1;
 10364  1452  1690               	bsf	16,5	;volatile
 10365                           
 10366                           ;main.c: 894: TRISEbits.TRISE4 = 1;
 10367  1453  1610               	bsf	16,4	;volatile
 10368                           
 10369                           ;main.c: 895: TRISFbits.TRISF0 = 0;
 10370  1454  0026               	movlb	6	; select bank6
 10371  1455  100C               	bcf	12,0	;volatile
 10372                           
 10373                           ;main.c: 896: TRISFbits.TRISF1 = 0;
 10374  1456  108C               	bcf	12,1	;volatile
 10375                           
 10376                           ;main.c: 897: TRISFbits.TRISF2 = 0;
 10377  1457  110C               	bcf	12,2	;volatile
 10378                           
 10379                           ;main.c: 900: TRISDbits.TRISD4 = 0;
 10380  1458  0021               	movlb	1	; select bank1
 10381  1459  120F               	bcf	15,4	;volatile
 10382                           
 10383                           ;main.c: 901: TRISDbits.TRISD3 = 0;
 10384  145A  118F               	bcf	15,3	;volatile
 10385                           
 10386                           ;main.c: 902: TRISDbits.TRISD2 = 0;
 10387  145B  110F               	bcf	15,2	;volatile
 10388                           
 10389                           ;main.c: 906: TRISCbits.TRISC6 = 0;
 10390  145C  130E               	bcf	14,6	;volatile
 10391                           
 10392                           ;main.c: 907: TRISCbits.TRISC7 = 1;
 10393  145D  178E               	bsf	14,7	;volatile
 10394                           
 10395                           ;main.c: 909: clearAllPorts();
 10396  145E  3192  223D         	fcall	_clearAllPorts
 10397  1460  0008               	return
 10398  1461                     __end_of_GPIO_pin_Initialize:	
 10399                           
 10400                           	psect	text46
 10401  124F                     __ptext46:	
 10402 ;; *************** function _pinINIT_extra *****************
 10403 ;; Defined at:
 10404 ;;		line 1321 in file "main.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;		None
 10407 ;; Auto vars:     Size  Location     Type
 10408 ;;		None
 10409 ;; Return value:  Size  Location     Type
 10410 ;;                  1    wreg      void 
 10411 ;; Registers used:
 10412 ;;		status,2
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10422 ;;Total ram usage:        0 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    2
 10425 ;; This function calls:
 10426 ;;		Nothing
 10427 ;; This function is called by:
 10428 ;;		_GPIO_pin_Initialize
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           
 10433                           ;psect for function _pinINIT_extra
 10434  124F                     _pinINIT_extra:	
 10435                           
 10436                           ;main.c: 1322: ANSELG=0x00; WPUG = 0;
 10437                           
 10438                           ;incstack = 0
 10439                           ; Regs used in _pinINIT_extra: [status,2]
 10440  124F  0028               	movlb	8	; select bank8
 10441  1250  018D               	clrf	13	;volatile
 10442  1251  0029               	movlb	9	; select bank9
 10443  1252  018D               	clrf	13	;volatile
 10444                           
 10445                           ;main.c: 1324: ANSELF=0x00;
 10446  1253  0028               	movlb	8	; select bank8
 10447  1254  018C               	clrf	12	;volatile
 10448                           
 10449                           ;main.c: 1326: ANSELE=0x00; WPUE=0x00;
 10450  1255  0023               	movlb	3	; select bank3
 10451  1256  0190               	clrf	16	;volatile
 10452  1257  0024               	movlb	4	; select bank4
 10453  1258  0190               	clrf	16	;volatile
 10454                           
 10455                           ;main.c: 1328: ANSELD=0x00; WPUD=0x00;
 10456  1259  0023               	movlb	3	; select bank3
 10457  125A  018F               	clrf	15	;volatile
 10458  125B  0024               	movlb	4	; select bank4
 10459  125C  018F               	clrf	15	;volatile
 10460                           
 10461                           ;main.c: 1330: ANSELB=0x00; WPUB=0x00;
 10462  125D  0023               	movlb	3	; select bank3
 10463  125E  018D               	clrf	13	;volatile
 10464  125F  0024               	movlb	4	; select bank4
 10465  1260  018D               	clrf	13	;volatile
 10466                           
 10467                           ;main.c: 1332: ANSELA=0x00;
 10468  1261  0023               	movlb	3	; select bank3
 10469  1262  018C               	clrf	12	;volatile
 10470  1263  0008               	return
 10471  1264                     __end_of_pinINIT_extra:	
 10472                           
 10473                           	psect	text47
 10474  123D                     __ptext47:	
 10475 ;; *************** function _clearAllPorts *****************
 10476 ;; Defined at:
 10477 ;;		line 1338 in file "main.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;		None
 10480 ;; Auto vars:     Size  Location     Type
 10481 ;;		None
 10482 ;; Return value:  Size  Location     Type
 10483 ;;                  1    wreg      void 
 10484 ;; Registers used:
 10485 ;;		None
 10486 ;; Tracked objects:
 10487 ;;		On entry : 0/0
 10488 ;;		On exit  : 0/0
 10489 ;;		Unchanged: 0/0
 10490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 10494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
 10495 ;;Total ram usage:        0 bytes
 10496 ;; Hardware stack levels used:    1
 10497 ;; Hardware stack levels required when called:    2
 10498 ;; This function calls:
 10499 ;;		Nothing
 10500 ;; This function is called by:
 10501 ;;		_GPIO_pin_Initialize
 10502 ;; This function uses a non-reentrant model
 10503 ;;
 10504                           
 10505                           
 10506                           ;psect for function _clearAllPorts
 10507  123D                     _clearAllPorts:	
 10508                           
 10509                           ;main.c: 1342: PORTEbits.RE0=0;
 10510                           
 10511                           ;incstack = 0
 10512                           ; Regs used in _clearAllPorts: []
 10513  123D  0020               	movlb	0	; select bank0
 10514  123E  1010               	bcf	16,0	;volatile
 10515                           
 10516                           ;main.c: 1343: PORTEbits.RE1=0;
 10517  123F  1090               	bcf	16,1	;volatile
 10518                           
 10519                           ;main.c: 1344: PORTGbits.RG0=0;
 10520  1240  0025               	movlb	5	; select bank5
 10521  1241  100D               	bcf	13,0	;volatile
 10522                           
 10523                           ;main.c: 1345: PORTGbits.RG3=0;
 10524  1242  118D               	bcf	13,3	;volatile
 10525                           
 10526                           ;main.c: 1346: PORTGbits.RG4=0;
 10527  1243  120D               	bcf	13,4	;volatile
 10528                           
 10529                           ;main.c: 1347: PORTFbits.RF6=0;
 10530  1244  130C               	bcf	12,6	;volatile
 10531                           
 10532                           ;main.c: 1348: PORTFbits.RF5=0;
 10533  1245  128C               	bcf	12,5	;volatile
 10534                           
 10535                           ;main.c: 1349: PORTFbits.RF4=0;
 10536  1246  120C               	bcf	12,4	;volatile
 10537                           
 10538                           ;main.c: 1350: PORTFbits.RF0 = 1;
 10539  1247  140C               	bsf	12,0	;volatile
 10540                           
 10541                           ;main.c: 1351: PORTFbits.RF1 = 1;
 10542  1248  148C               	bsf	12,1	;volatile
 10543                           
 10544                           ;main.c: 1352: PORTFbits.RF2 = 1;
 10545  1249  150C               	bsf	12,2	;volatile
 10546                           
 10547                           ;main.c: 1354: PORTDbits.RD4=0;
 10548  124A  0020               	movlb	0	; select bank0
 10549  124B  120F               	bcf	15,4	;volatile
 10550                           
 10551                           ;main.c: 1355: PORTDbits.RD3=0;
 10552  124C  118F               	bcf	15,3	;volatile
 10553                           
 10554                           ;main.c: 1356: PORTDbits.RD2=0;
 10555  124D  110F               	bcf	15,2	;volatile
 10556  124E  0008               	return
 10557  124F                     __end_of_clearAllPorts:	
 10558                           
 10559                           	psect	intentry
 10560  0004                     __pintentry:	
 10561 ;; *************** function _isr *****************
 10562 ;; Defined at:
 10563 ;;		line 325 in file "main.c"
 10564 ;; Parameters:    Size  Location     Type
 10565 ;;		None
 10566 ;; Auto vars:     Size  Location     Type
 10567 ;;		None
 10568 ;; Return value:  Size  Location     Type
 10569 ;;                  1    wreg      void 
 10570 ;; Registers used:
 10571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 10577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
 10578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
 10579 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0
 10580 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0
 10581 ;;Total ram usage:        2 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    1
 10584 ;; This function calls:
 10585 ;;		_errorsISR
 10586 ;; This function is called by:
 10587 ;;		Interrupt level 1
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591  0004                     _isr:	
 10592                           
 10593                           ;incstack = 0
 10594  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10595                           
 10596                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10597  0005  3180               	pagesel	$
 10598  0006  0020               	movlb	0	; select bank0
 10599  0007  087F               	movf	127,w
 10600  0008  00FB               	movwf	??_isr+1
 10601                           
 10602                           ;main.c: 328: if(RC1IF){
 10603  0009  1E91               	btfss	17,5	;volatile
 10604  000A  286C               	goto	i1l4015
 10605                           
 10606                           ;main.c: 329: if(RC1STAbits.OERR){
 10607  000B  0023               	movlb	3	; select bank3
 10608  000C  1C9D               	btfss	29,1	;volatile
 10609  000D  2817               	goto	i1l3983
 10610                           
 10611                           ;main.c: 330: RC1STAbits.CREN = 0;
 10612  000E  121D               	bcf	29,4	;volatile
 10613                           
 10614                           ;main.c: 331: RC1STAbits.CREN = 1;
 10615  000F  161D               	bsf	29,4	;volatile
 10616                           
 10617                           ;main.c: 332: errorsISR("EROV");
 10618  0010  3025               	movlw	low (STR_14| (0+32768))
 10619  0011  00F6               	movwf	errorsISR@errNum
 10620  0012  3098               	movlw	high (STR_14| (0+32768))
 10621  0013  00F7               	movwf	errorsISR@errNum+1
 10622  0014  3192  228F  3180   	fcall	_errorsISR
 10623  0017                     i1l3983:	
 10624                           
 10625                           ;main.c: 333: }
 10626                           ;main.c: 334: mainReceivedDataBuffer[mainReceivedDataPosition]=RC1REG;
 10627  0017  0023               	movlb	3	; select bank3
 10628  0018  0819               	movf	25,w	;volatile
 10629  0019  00FA               	movwf	??_isr
 10630  001A  0872               	movf	_mainReceivedDataPosition,w
 10631  001B  3EA0               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
 10632  001C  0086               	movwf	6
 10633  001D  3002               	movlw	2	; select bank5/6
 10634  001E  0087               	movwf	7
 10635  001F  087A               	movf	??_isr,w
 10636  0020  0081               	movwf	1
 10637                           
 10638                           ;main.c: 335: copymainReceivedDataBuffer[mainReceivedDataPosition] = mainReceivedDataBuf
      +                          fer[mainReceivedDataPosition];
 10639  0021  0872               	movf	_mainReceivedDataPosition,w
 10640  0022  3EA0               	addlw	(low (_mainReceivedDataBuffer| (0+512)))& (0+255)
 10641  0023  0086               	movwf	6
 10642  0024  3002               	movlw	2	; select bank5/6
 10643  0025  0087               	movwf	7
 10644  0026  0801               	movf	1,w
 10645  0027  00FA               	movwf	??_isr
 10646  0028  0872               	movf	_mainReceivedDataPosition,w
 10647  0029  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
 10648  002A  0086               	movwf	6
 10649  002B  3002               	movlw	2	; select bank4/5
 10650  002C  0087               	movwf	7
 10651  002D  087A               	movf	??_isr,w
 10652  002E  0081               	movwf	1
 10653                           
 10654                           ;main.c: 339: if(mainReceivedDataBuffer[0]=='%'){
 10655  002F  3025               	movlw	37
 10656  0030  0025               	movlb	5	; select bank5
 10657  0031  0620               	xorwf	_mainReceivedDataBuffer^(0+640),w
 10658  0032  1D03               	btfss	3,2
 10659  0033  2840               	goto	i1l3997
 10660                           
 10661                           ;main.c: 340: mainReceivedDataPosition++;
 10662  0034  3001               	movlw	1
 10663  0035  07F2               	addwf	_mainReceivedDataPosition,f
 10664  0036  3000               	movlw	0
 10665  0037  3DF3               	addwfc	_mainReceivedDataPosition+1,f
 10666                           
 10667                           ;main.c: 341: if(mainReceivedDataPosition>15){
 10668  0038  3000               	movlw	0
 10669  0039  0273               	subwf	_mainReceivedDataPosition+1,w
 10670  003A  3010               	movlw	16
 10671  003B  1903               	skipnz
 10672  003C  0272               	subwf	_mainReceivedDataPosition,w
 10673  003D  1C03               	skipc
 10674  003E  286C               	goto	i1l4015
 10675  003F  2849               	goto	i1l3999
 10676  0040                     i1l3997:	
 10677                           ;main.c: 345: }
 10678                           ;main.c: 346: }
 10679                           
 10680                           ;main.c: 344: RC1IF=0;
 10681                           
 10682                           ;main.c: 343: mainReceivedDataPosition=0;
 10683                           
 10684                           ;main.c: 342: mainDataReceived=1;
 10685                           
 10686                           
 10687                           ;main.c: 347: else if(copymainReceivedDataBuffer[mainReceivedDataPosition] == '|'){
 10688  0040  0872               	movf	_mainReceivedDataPosition,w
 10689  0041  3E4E               	addlw	(low (_copymainReceivedDataBuffer| (0+512)))& (0+255)
 10690  0042  0086               	movwf	6
 10691  0043  3002               	movlw	2	; select bank4/5
 10692  0044  0087               	movwf	7
 10693  0045  307C               	movlw	124
 10694  0046  0601               	xorwf	1,w
 10695  0047  1D03               	btfss	3,2
 10696  0048  2853               	goto	i1l4005
 10697  0049                     i1l3999:	
 10698                           
 10699                           ;main.c: 348: mainDataReceived=1;
 10700  0049  3001               	movlw	1
 10701  004A  0022               	movlb	2	; select bank2
 10702  004B  00D2               	movwf	_mainDataReceived^(0+256)
 10703  004C  3000               	movlw	0
 10704  004D  00D3               	movwf	(_mainDataReceived^(0+256)+1)
 10705                           
 10706                           ;main.c: 349: mainReceivedDataPosition=0;
 10707  004E  01F2               	clrf	_mainReceivedDataPosition
 10708  004F  01F3               	clrf	_mainReceivedDataPosition+1
 10709                           
 10710                           ;main.c: 350: RC1IF=0;
 10711  0050  0020               	movlb	0	; select bank0
 10712  0051  1291               	bcf	17,5	;volatile
 10713                           
 10714                           ;main.c: 351: }
 10715  0052  286C               	goto	i1l4015
 10716  0053                     i1l4005:	
 10717                           
 10718                           ;main.c: 352: else if((copymainReceivedDataBuffer[0]=='R') && copymainReceivedDataBuffer
      +                          [0] != (0)){
 10719  0053  3052               	movlw	82
 10720  0054  0024               	movlb	4	; select bank4
 10721  0055  064E               	xorwf	_copymainReceivedDataBuffer^(0+512),w
 10722  0056  1D03               	btfss	3,2
 10723  0057  2860               	goto	i1l456
 10724  0058  084E               	movf	_copymainReceivedDataBuffer^(0+512),w
 10725  0059  1903               	btfsc	3,2
 10726  005A  2860               	goto	i1l456
 10727                           
 10728                           ;main.c: 353: mainReceivedDataPosition++;
 10729  005B  3001               	movlw	1
 10730  005C  07F2               	addwf	_mainReceivedDataPosition,f
 10731  005D  3000               	movlw	0
 10732  005E  3DF3               	addwfc	_mainReceivedDataPosition+1,f
 10733                           
 10734                           ;main.c: 355: }
 10735  005F  286C               	goto	i1l4015
 10736  0060                     i1l456:	
 10737                           
 10738                           ;main.c: 358: else{
 10739                           ;main.c: 360: RC1STAbits.CREN = 0;
 10740  0060  0023               	movlb	3	; select bank3
 10741  0061  121D               	bcf	29,4	;volatile
 10742                           
 10743                           ;main.c: 361: RC1STAbits.CREN = 1;
 10744  0062  161D               	bsf	29,4	;volatile
 10745                           
 10746                           ;main.c: 362: mainReceivedDataPosition=0;
 10747  0063  01F2               	clrf	_mainReceivedDataPosition
 10748  0064  01F3               	clrf	_mainReceivedDataPosition+1
 10749                           
 10750                           ;main.c: 363: errorsISR("ERRX");
 10751  0065  302A               	movlw	low (STR_15| (0+32768))
 10752  0066  00F6               	movwf	errorsISR@errNum
 10753  0067  3098               	movlw	high (STR_15| (0+32768))
 10754  0068  00F7               	movwf	errorsISR@errNum+1
 10755  0069  3192  228F  3180   	fcall	_errorsISR
 10756  006C                     i1l4015:	
 10757                           
 10758                           ;main.c: 364: }
 10759                           ;main.c: 365: }
 10760                           ;main.c: 370: if(PIE1bits.TMR2IE==1 && PIR1bits.TMR2IF==1)
 10761  006C  0021               	movlb	1	; select bank1
 10762  006D  1C91               	btfss	17,1	;volatile
 10763  006E  2875               	goto	i1l458
 10764  006F  0020               	movlb	0	; select bank0
 10765  0070  1C91               	btfss	17,1	;volatile
 10766  0071  2875               	goto	i1l458
 10767                           
 10768                           ;main.c: 371: {
 10769                           ;main.c: 372: PIR1bits.TMR2IF=0;
 10770  0072  1091               	bcf	17,1	;volatile
 10771                           
 10772                           ;main.c: 373: PORTDbits.RD4 = 0;
 10773  0073  120F               	bcf	15,4	;volatile
 10774                           
 10775                           ;main.c: 374: T2CONbits.TMR2ON=0;
 10776  0074  111C               	bcf	28,2	;volatile
 10777  0075                     i1l458:	
 10778                           
 10779                           ;main.c: 375: }
 10780                           ;main.c: 378: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF==1)
 10781  0075  0021               	movlb	1	; select bank1
 10782  0076  1C11               	btfss	17,0	;volatile
 10783  0077  2881               	goto	i1l4031
 10784  0078  0020               	movlb	0	; select bank0
 10785  0079  1C11               	btfss	17,0	;volatile
 10786  007A  2881               	goto	i1l4031
 10787                           
 10788                           ;main.c: 379: {
 10789                           ;main.c: 380: PIR1bits.TMR1IF=0;
 10790  007B  1011               	bcf	17,0	;volatile
 10791                           
 10792                           ;main.c: 381: PORTDbits.RD4 = 1;
 10793  007C  160F               	bsf	15,4	;volatile
 10794                           
 10795                           ;main.c: 382: PR2=0x9F;
 10796  007D  309F               	movlw	159
 10797  007E  009B               	movwf	27	;volatile
 10798                           
 10799                           ;main.c: 383: T2CONbits.TMR2ON = 1;
 10800  007F  151C               	bsf	28,2	;volatile
 10801                           
 10802                           ;main.c: 384: T1CONbits.TMR1ON = 0;
 10803  0080  1018               	bcf	24,0	;volatile
 10804  0081                     i1l4031:	
 10805                           
 10806                           ;main.c: 386: }
 10807                           ;main.c: 390: if(PIE3bits.TMR4IE==1 && PIR3bits.TMR4IF==1)
 10808  0081  0021               	movlb	1	; select bank1
 10809  0082  1C93               	btfss	19,1	;volatile
 10810  0083  288B               	goto	i1l460
 10811  0084  0020               	movlb	0	; select bank0
 10812  0085  1C93               	btfss	19,1	;volatile
 10813  0086  288B               	goto	i1l460
 10814                           
 10815                           ;main.c: 391: {
 10816                           ;main.c: 392: PIR3bits.TMR4IF=0;
 10817  0087  1093               	bcf	19,1	;volatile
 10818                           
 10819                           ;main.c: 393: PORTDbits.RD3 = 0;
 10820  0088  118F               	bcf	15,3	;volatile
 10821                           
 10822                           ;main.c: 394: T4CONbits.TMR4ON=0;
 10823  0089  0028               	movlb	8	; select bank8
 10824  008A  1117               	bcf	23,2	;volatile
 10825  008B                     i1l460:	
 10826                           
 10827                           ;main.c: 396: }
 10828                           ;main.c: 398: if(PIE3bits.TMR3IE == 1 && PIR3bits.TMR3IF==1)
 10829  008B  0021               	movlb	1	; select bank1
 10830  008C  1C13               	btfss	19,0	;volatile
 10831  008D  2898               	goto	i1l4047
 10832  008E  0020               	movlb	0	; select bank0
 10833  008F  1C13               	btfss	19,0	;volatile
 10834  0090  2898               	goto	i1l4047
 10835                           
 10836                           ;main.c: 399: {
 10837                           ;main.c: 400: PIR3bits.TMR3IF=0;
 10838  0091  1013               	bcf	19,0	;volatile
 10839                           
 10840                           ;main.c: 401: PORTDbits.RD3 = 1;
 10841  0092  158F               	bsf	15,3	;volatile
 10842                           
 10843                           ;main.c: 402: PR4=0x9F;
 10844  0093  309F               	movlw	159
 10845  0094  0028               	movlb	8	; select bank8
 10846  0095  0096               	movwf	22	;volatile
 10847                           
 10848                           ;main.c: 403: T4CONbits.TMR4ON = 1;
 10849  0096  1517               	bsf	23,2	;volatile
 10850                           
 10851                           ;main.c: 404: T3CONbits.TMR3ON = 0;
 10852  0097  1013               	bcf	19,0	;volatile
 10853  0098                     i1l4047:	
 10854                           
 10855                           ;main.c: 405: }
 10856                           ;main.c: 408: if(PIE3bits.TMR6IE == 1 && PIR3bits.TMR6IF == 1)
 10857  0098  0021               	movlb	1	; select bank1
 10858  0099  1D93               	btfss	19,3	;volatile
 10859  009A  28A2               	goto	i1l462
 10860  009B  0020               	movlb	0	; select bank0
 10861  009C  1D93               	btfss	19,3	;volatile
 10862  009D  28A2               	goto	i1l462
 10863                           
 10864                           ;main.c: 409: {
 10865                           ;main.c: 410: PIR3bits.TMR6IF=0;
 10866  009E  1193               	bcf	19,3	;volatile
 10867                           
 10868                           ;main.c: 411: PORTDbits.RD2 = 0;
 10869  009F  110F               	bcf	15,2	;volatile
 10870                           
 10871                           ;main.c: 412: T6CONbits.TMR6ON=0;
 10872  00A0  0028               	movlb	8	; select bank8
 10873  00A1  111E               	bcf	30,2	;volatile
 10874  00A2                     i1l462:	
 10875                           
 10876                           ;main.c: 413: }
 10877                           ;main.c: 415: if(PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF==1)
 10878  00A2  0021               	movlb	1	; select bank1
 10879  00A3  1D13               	btfss	19,2	;volatile
 10880  00A4  28AF               	goto	i1l4063
 10881  00A5  0020               	movlb	0	; select bank0
 10882  00A6  1D13               	btfss	19,2	;volatile
 10883  00A7  28AF               	goto	i1l4063
 10884                           
 10885                           ;main.c: 416: {
 10886                           ;main.c: 417: PIR3bits.TMR5IF=0;
 10887  00A8  1113               	bcf	19,2	;volatile
 10888                           
 10889                           ;main.c: 418: PORTDbits.RD2 = 1;
 10890  00A9  150F               	bsf	15,2	;volatile
 10891                           
 10892                           ;main.c: 419: PR6=0x9F;
 10893  00AA  309F               	movlw	159
 10894  00AB  0028               	movlb	8	; select bank8
 10895  00AC  009D               	movwf	29	;volatile
 10896                           
 10897                           ;main.c: 420: T6CONbits.TMR6ON=1;
 10898  00AD  151E               	bsf	30,2	;volatile
 10899                           
 10900                           ;main.c: 421: T5CONbits.TMR5ON=0;
 10901  00AE  101A               	bcf	26,0	;volatile
 10902  00AF                     i1l4063:	
 10903                           
 10904                           ;main.c: 422: }
 10905                           ;main.c: 428: if(PIR4bits.CCP8IF==1 || PIR4bits.CCP7IF == 1 || PIR4bits.CCP9IF==1){
 10906  00AF  0020               	movlb	0	; select bank0
 10907  00B0  1D94               	btfss	20,3	;volatile
 10908  00B1  1914               	btfsc	20,2	;volatile
 10909  00B2  28B5               	goto	i1l466
 10910  00B3  1F14               	btfss	20,6	;volatile
 10911  00B4  28FB               	goto	i1l476
 10912  00B5                     i1l466:	
 10913                           
 10914                           ;main.c: 432: if(CCP9IF){
 10915  00B5  1B14               	btfsc	20,6	;volatile
 10916                           
 10917                           ;main.c: 433: if(CCP9IF == 1){
 10918  00B6  1F14               	btfss	20,6	;volatile
 10919  00B7  28CB               	goto	i1l4085
 10920                           
 10921                           ;main.c: 434: CCP9IF=0;
 10922  00B8  1314               	bcf	20,6	;volatile
 10923                           
 10924                           ;main.c: 435: if(start_PWM_Generation_For_RedLed == 1){
 10925  00B9  0022               	movlb	2	; select bank2
 10926  00BA  034C               	decf	_start_PWM_Generation_For_RedLed^(0+256),w
 10927  00BB  044D               	iorwf	(_start_PWM_Generation_For_RedLed+1)^(0+256),w
 10928  00BC  1D03               	btfss	3,2
 10929  00BD  28CB               	goto	i1l4085
 10930                           
 10931                           ;main.c: 436: TMR1H = Timer1H;
 10932  00BE  0846               	movf	_Timer1H^(0+256),w
 10933  00BF  0020               	movlb	0	; select bank0
 10934  00C0  0097               	movwf	23	;volatile
 10935                           
 10936                           ;main.c: 437: TMR1L = Timer1L;
 10937  00C1  0022               	movlb	2	; select bank2
 10938  00C2  0844               	movf	_Timer1L^(0+256),w
 10939  00C3  0020               	movlb	0	; select bank0
 10940  00C4  0096               	movwf	22	;volatile
 10941                           
 10942                           ;main.c: 438: T1CONbits.TMR1ON = 1;
 10943  00C5  1418               	bsf	24,0	;volatile
 10944                           
 10945                           ;main.c: 439: PORTDbits.RD4=1;
 10946  00C6  160F               	bsf	15,4	;volatile
 10947                           
 10948                           ;main.c: 440: PIE1bits.TMR1IE = 1;
 10949  00C7  0021               	movlb	1	; select bank1
 10950  00C8  1411               	bsf	17,0	;volatile
 10951                           
 10952                           ;main.c: 441: PIR1bits.TMR1IF = 0;
 10953  00C9  0020               	movlb	0	; select bank0
 10954  00CA  1011               	bcf	17,0	;volatile
 10955  00CB                     i1l4085:	
 10956                           
 10957                           ;main.c: 442: }
 10958                           ;main.c: 443: }
 10959                           ;main.c: 444: }
 10960                           ;main.c: 446: if(CCP8IF){
 10961  00CB  0020               	movlb	0	; select bank0
 10962  00CC  1994               	btfsc	20,3	;volatile
 10963                           
 10964                           ;main.c: 447: if(CCP8IF == 1){
 10965  00CD  1D94               	btfss	20,3	;volatile
 10966  00CE  28E3               	goto	i1l4103
 10967                           
 10968                           ;main.c: 448: CCP8IF=0;
 10969  00CF  1194               	bcf	20,3	;volatile
 10970                           
 10971                           ;main.c: 449: if(start_PWM_Generation_For_GreenLed == 1){
 10972  00D0  0022               	movlb	2	; select bank2
 10973  00D1  034A               	decf	_start_PWM_Generation_For_GreenLed^(0+256),w
 10974  00D2  044B               	iorwf	(_start_PWM_Generation_For_GreenLed+1)^(0+256),w
 10975  00D3  1D03               	btfss	3,2
 10976  00D4  28E3               	goto	i1l4103
 10977                           
 10978                           ;main.c: 450: TMR3H = Timer3H;
 10979  00D5  0842               	movf	_Timer3H^(0+256),w
 10980  00D6  0028               	movlb	8	; select bank8
 10981  00D7  0092               	movwf	18	;volatile
 10982                           
 10983                           ;main.c: 451: TMR3L = Timer3L;
 10984  00D8  0022               	movlb	2	; select bank2
 10985  00D9  0840               	movf	_Timer3L^(0+256),w
 10986  00DA  0028               	movlb	8	; select bank8
 10987  00DB  0091               	movwf	17	;volatile
 10988                           
 10989                           ;main.c: 452: T3CONbits.TMR3ON = 1;
 10990  00DC  1413               	bsf	19,0	;volatile
 10991                           
 10992                           ;main.c: 453: PORTDbits.RD3 = 1;
 10993  00DD  0020               	movlb	0	; select bank0
 10994  00DE  158F               	bsf	15,3	;volatile
 10995                           
 10996                           ;main.c: 454: PIE3bits.TMR3IE = 1;
 10997  00DF  0021               	movlb	1	; select bank1
 10998  00E0  1413               	bsf	19,0	;volatile
 10999                           
 11000                           ;main.c: 455: PIR3bits.TMR3IF = 0;
 11001  00E1  0020               	movlb	0	; select bank0
 11002  00E2  1013               	bcf	19,0	;volatile
 11003  00E3                     i1l4103:	
 11004                           
 11005                           ;main.c: 457: }
 11006                           ;main.c: 458: }
 11007                           ;main.c: 459: }
 11008                           ;main.c: 461: if(CCP7IF){
 11009  00E3  0020               	movlb	0	; select bank0
 11010  00E4  1914               	btfsc	20,2	;volatile
 11011                           
 11012                           ;main.c: 462: if(CCP7IF == 1){
 11013  00E5  1D14               	btfss	20,2	;volatile
 11014  00E6  28FB               	goto	i1l476
 11015                           
 11016                           ;main.c: 463: CCP7IF=0;
 11017  00E7  1114               	bcf	20,2	;volatile
 11018                           
 11019                           ;main.c: 464: if(start_PWM_Generation_For_BlueLed == 1){
 11020  00E8  0022               	movlb	2	; select bank2
 11021  00E9  0348               	decf	_start_PWM_Generation_For_BlueLed^(0+256),w
 11022  00EA  0449               	iorwf	(_start_PWM_Generation_For_BlueLed+1)^(0+256),w
 11023  00EB  1D03               	btfss	3,2
 11024  00EC  28FB               	goto	i1l476
 11025                           
 11026                           ;main.c: 465: TMR5H = Timer5H;
 11027  00ED  083E               	movf	_Timer5H^(0+256),w
 11028  00EE  0028               	movlb	8	; select bank8
 11029  00EF  0099               	movwf	25	;volatile
 11030                           
 11031                           ;main.c: 466: TMR5L = Timer5L;
 11032  00F0  0022               	movlb	2	; select bank2
 11033  00F1  083C               	movf	_Timer5L^(0+256),w
 11034  00F2  0028               	movlb	8	; select bank8
 11035  00F3  0098               	movwf	24	;volatile
 11036                           
 11037                           ;main.c: 467: T5CONbits.TMR5ON = 1;
 11038  00F4  141A               	bsf	26,0	;volatile
 11039                           
 11040                           ;main.c: 468: PORTDbits.RD2 = 1;
 11041  00F5  0020               	movlb	0	; select bank0
 11042  00F6  150F               	bsf	15,2	;volatile
 11043                           
 11044                           ;main.c: 469: PIE3bits.TMR5IE = 1;
 11045  00F7  0021               	movlb	1	; select bank1
 11046  00F8  1513               	bsf	19,2	;volatile
 11047                           
 11048                           ;main.c: 470: PIR3bits.TMR5IF = 0;
 11049  00F9  0020               	movlb	0	; select bank0
 11050  00FA  1113               	bcf	19,2	;volatile
 11051  00FB                     i1l476:	
 11052  00FB  087B               	movf	??_isr+1,w
 11053  00FC  0020               	movlb	0	; select bank0
 11054  00FD  00FF               	movwf	127
 11055  00FE  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11056  00FF  0009               	retfie
 11057  0100                     __end_of_isr:	
 11058                           
 11059                           	psect	text49
 11060  128F                     __ptext49:	
 11061 ;; *************** function _errorsISR *****************
 11062 ;; Defined at:
 11063 ;;		line 1199 in file "main.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;  errNum          2    0[COMMON] PTR const unsigned char 
 11066 ;;		 -> STR_15(5), STR_14(5), 
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;  Tx_count        2    2[COMMON] int 
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  1    wreg      void 
 11071 ;; Registers used:
 11072 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
 11078 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0
 11079 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0
 11080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
 11081 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0
 11082 ;;Total ram usage:        4 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; This function calls:
 11085 ;;		Nothing
 11086 ;; This function is called by:
 11087 ;;		_isr
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           
 11092                           ;psect for function _errorsISR
 11093  128F                     _errorsISR:	
 11094                           
 11095                           ;main.c: 1200: int Tx_count=0;
 11096                           
 11097                           ;incstack = 0
 11098                           ; Regs used in _errorsISR: [wreg-fsr0h+status,2+status,0+pclath]
 11099  128F  01F8               	clrf	errorsISR@Tx_count
 11100  1290  01F9               	clrf	errorsISR@Tx_count+1
 11101  1291                     i1l3817:	
 11102                           ;main.c: 1201: while(Tx_count!=4)
 11103                           
 11104  1291  3004               	movlw	4
 11105  1292  0678               	xorwf	errorsISR@Tx_count,w
 11106  1293  0479               	iorwf	errorsISR@Tx_count+1,w
 11107  1294  1903               	btfsc	3,2
 11108  1295  0008               	return
 11109  1296                     i1l585:	
 11110                           ;main.c: 1202: {
 11111                           ;main.c: 1203: while (!TX1STAbits.TRMT);
 11112                           
 11113  1296  0023               	movlb	3	; select bank3
 11114  1297  1C9E               	btfss	30,1	;volatile
 11115  1298  2A96               	goto	i1l585
 11116                           
 11117                           ;main.c: 1204: TX1REG = *errNum;
 11118  1299  0876               	movf	errorsISR@errNum,w
 11119  129A  0084               	movwf	4
 11120  129B  0877               	movf	errorsISR@errNum+1,w
 11121  129C  0085               	movwf	5
 11122  129D  0800               	movf	0,w	;code access
 11123  129E  009A               	movwf	26	;volatile
 11124                           
 11125                           ;main.c: 1205: *errNum++;
 11126  129F  3001               	movlw	1
 11127  12A0  07F6               	addwf	errorsISR@errNum,f
 11128  12A1  3000               	movlw	0
 11129  12A2  3DF7               	addwfc	errorsISR@errNum+1,f
 11130                           
 11131                           ;main.c: 1206: Tx_count++;
 11132  12A3  3001               	movlw	1
 11133  12A4  07F8               	addwf	errorsISR@Tx_count,f
 11134  12A5  3000               	movlw	0
 11135  12A6  3DF9               	addwfc	errorsISR@Tx_count+1,f
 11136  12A7  2A91               	goto	i1l3817
 11137  12A8                     __end_of_errorsISR:	
 11138  007E                     btemp	set	126	;btemp
 11139  007E                     int$flags	set	126
 11140  007E                     wtemp0	set	126


Data Sizes:
    Strings     53
    Constant    8
    Data        247
    BSS         166
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      72
    BANK1            80     75      80
    BANK2            80      0      79
    BANK3            80      0      77
    BANK4            80      0      78
    BANK5            80     10      60
    BANK6            80      0      32
    BANK7            80      0      74
    BANK8            80      0       0
    BANK9            32      0       0

Pointer List with Targets:

    StopBitString	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    FinalframebitString	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strncpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    strncpy@to	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), 
		 -> applicationControlRGB@strGreenH(BANK1[3]), applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 
		 -> NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), 
		 -> applicationControlRGB@strGreenH(BANK1[3]), applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), applicationControlRGB@HexlevelBuffer(BANK1[5]), 
		 -> NULL(NULL[0]), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_17(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 32
		 -> ChildLockbuffer(BANK2[2]), switchstatusbuffer(BANK2[2]), switchNumberBuffer(BANK3[3]), copymainReceivedDataBuffer(BANK4[32]), 
		 -> STR_10(CODE[5]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[7]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), NULL(NULL[0]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    memset@p1	PTR void  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    memset@p	PTR unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ChildLockbuffer(BANK2[2]), switchstatusbuffer(BANK2[2]), switchNumberBuffer(BANK3[3]), copymainReceivedDataBuffer(BANK4[32]), 
		 -> applianceControl@dimmerSpeedStringBuffer(BANK0[2]), applianceControl@switchNumberStringBuffer(BANK0[2]), NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sendAcknowledgmentRGB@currentStateBufferRGB	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    hexadecimalToDecimal@hexVal	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    errorsMain@errNum	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_19(CODE[5]), 

    errorsISR@errNum	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[5]), 

    AllColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    ChildLockString	PTR unsigned char  size(1) Largest target is 2
		 -> ChildLockbuffer(BANK2[2]), NULL(NULL[0]), 

    BlueColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    GreenColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    RedColorIntensityString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    SwitchStatusString	PTR unsigned char  size(1) Largest target is 2
		 -> switchstatusbuffer(BANK2[2]), NULL(NULL[0]), 

    AcknowledgementString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    SwitchNumberString	PTR unsigned char  size(1) Largest target is 3
		 -> switchNumberBuffer(BANK3[3]), NULL(NULL[0]), 

    ModuleNameString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    token	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    ConvertmaindataReceiveIntoString	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    sendAcknowledgment@currentStateBuffer	PTR unsigned char  size(1) Largest target is 74
		 -> currentStateBuffer(BANK7[74]), 

    sp__memset	PTR void  size(1) Largest target is 5
		 -> applicationControlRGB@HexlevelBuffer(BANK1[5]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 3
		 -> applicationControlRGB@strBlueL(BANK1[3]), applicationControlRGB@strBlueH(BANK1[3]), applicationControlRGB@strGreenL(BANK1[3]), applicationControlRGB@strGreenH(BANK1[3]), 
		 -> applicationControlRGB@strRedL(BANK1[3]), applicationControlRGB@strRedH(BANK1[3]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 46
		 -> sendFinalBufferToGAteway(BANK4[46]), 

    applicationControlRGB@ModuleNamestr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@ChildLockstr	PTR unsigned char  size(1) Largest target is 2
		 -> ChildLockbuffer(BANK2[2]), NULL(NULL[0]), 

    applicationControlRGB@Allcolorstr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@GreenColorIntensitystr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@BlueColorIntensitystr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@RedColorIntensitystr	PTR unsigned char  size(1) Largest target is 32
		 -> copymainReceivedDataBuffer(BANK4[32]), NULL(NULL[0]), 

    applicationControlRGB@SwitchStatusstr	PTR unsigned char  size(1) Largest target is 2
		 -> switchstatusbuffer(BANK2[2]), NULL(NULL[0]), 

    applicationControlRGB@SwitchNumberstr	PTR unsigned char  size(1) Largest target is 3
		 -> switchNumberBuffer(BANK3[3]), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_errorsISR

Critical Paths under _main in BANK0

    _main->_applicationControlRGB
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _applicationControlRGB->___fttol
    _sprintf->___lwdiv
    _hexadecimalToDecimal->___wmul
    _hexadecimalToDecimal->_strlen
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___ftpack
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _applianceControl->_atoi
    _atoi->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_applicationControlRGB

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   35189
                                             53 BANK0      7     7      0
                                              0 BANK5     10    10      0
                _GPIO_pin_Initialize
     _ReceivingIndicationLedBlinking
           _SwitchOffStatustToGatway
            _SwitchOnStatustToGatway
  _TransmissionIndicationLedBlinking
                  _allPeripheralInit
                   _applianceControl
              _applicationControlRGB
             _copyReceivedDataBuffer
                         _errorsMain
                             _strcmp
                             _strlen
                             _strtok
 ---------------------------------------------------------------------------------
 (1) _strtok                                               6     4      2    1855
                                             14 BANK0      6     4      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (2) _strspn                                               7     5      2     675
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strcspn                                              7     5      2     675
                                              7 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strchr                                               7     3      4     432
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               5     3      2     243
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _errorsMain                                           4     2      2     148
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _copyReceivedDataBuffer                               3     3      0     164
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _applicationControlRGB                               84    77      7   26904
                                             44 BANK0      9     2      7
                                              0 BANK1     75    75      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _abs
                               _atoi
               _hexadecimalToDecimal
                             _memset
              _sendAcknowledgmentRGB
                            _sprintf
                             _strcat
                             _strcpy
                             _strlen
                            _strncpy
 ---------------------------------------------------------------------------------
 (2) _strncpy                                              6     3      3    1324
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               4     3      1     219
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2    1903
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    20      6    1322
                                              8 BANK0     18    12      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _sendAcknowledgmentRGB                                4     4      0     104
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     698
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _hexadecimalToDecimal                                13    11      2    1826
                                              6 BANK0     13    11      2
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     352
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     324
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2726
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     602
                                             30 BANK0     14    10      4
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3414
                                              8 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    4270
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2828
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2464
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _applianceControl                                    21    15      6    3277
                                             13 BANK0     21    15      6
                               _atoi
                 _sendAcknowledgment
 ---------------------------------------------------------------------------------
 (2) _sendAcknowledgment                                   4     4      0     104
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2    1623
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     598
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _allPeripheralInit                                    0     0      0       0
                    _CCP7_Initialize
                    _CCP8_Initialize
                    _CCP9_Initialize
                  _EUSART_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR4_Initialize
                    _TMR5_Initialize
                    _TMR6_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP9_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP8_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP7_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TransmissionIndicationLedBlinking                    2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnStatustToGatway                              3     1      2     647
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _SwitchOffStatustToGatway                             3     1      2     647
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ReceivingIndicationLedBlinking                       2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_pin_Initialize                                  0     0      0       0
                      _clearAllPorts
                      _pinINIT_extra
 ---------------------------------------------------------------------------------
 (2) _pinINIT_extra                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearAllPorts                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0     175
                                              4 COMMON     2     2      0
                          _errorsISR
 ---------------------------------------------------------------------------------
 (5) _errorsISR                                            4     2      2     175
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_pin_Initialize
     _clearAllPorts
     _pinINIT_extra
   _ReceivingIndicationLedBlinking
   _SwitchOffStatustToGatway
   _SwitchOnStatustToGatway
   _TransmissionIndicationLedBlinking
   _allPeripheralInit
     _CCP7_Initialize
     _CCP8_Initialize
     _CCP9_Initialize
     _EUSART_Initialize
     _TMR1_Initialize
     _TMR2_Initialize
     _TMR3_Initialize
     _TMR4_Initialize
     _TMR5_Initialize
     _TMR6_Initialize
   _applianceControl
     _atoi
       ___wmul
       _isdigit
     _sendAcknowledgment
   _applicationControlRGB
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
     _abs
     _atoi
       ___wmul
       _isdigit
     _hexadecimalToDecimal
       ___wmul
       _strlen
     _memset
     _sendAcknowledgmentRGB
     _sprintf
       ___lwdiv
     _strcat
     _strcpy
     _strlen
     _strncpy
   _copyReceivedDataBuffer
   _errorsMain
   _strcmp
   _strlen
   _strtok
     _strcspn
       _strchr
     _strspn
       _strchr

 _isr (ROOT)
   _errorsISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     234       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4B      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4F      10       98.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4D      12       96.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4E      14       97.5%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      A      3C      16       75.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      20      18       40.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      4A      20       92.5%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            20      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               20      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
DATA                 0      0     234      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 12 16:26:55 2019

                          _IntegerGreenColorIntensity 00EB                            __size_of_allPeripheralInit 001E  
                                                   pc 0002                                           __CFG_CP$OFF 0000  
                                                  _M1 012E                                                    _M2 012C  
                                                  _M3 012A                                                    _M4 0128  
                                                  _M5 0126                                                    _M6 0124  
                                                  _M7 0122                                                    _M8 0120  
                                                  _M9 01D2                               hexadecimalToDecimal@len 002A  
                                 ___wmul@multiplicand 0022                          applianceControl@integerSpeed 0035  
                                                 l440 1359                                                   l416 078D  
                                                 l435 0B5A                                                   l509 0DA3  
                                                 l615 1391                                                   l617 1398  
                                                 l680 12E6                                                   l594 131D  
                                                 l860 16C5                                                   l951 17E6  
                                                 l867 16D8                                                   l868 16E0  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 _PR4 0416                                                   _PR6 041D  
               _ConvertIntegertoStringBlueColorBuffer 01E8                              hexadecimalToDecimal@base 002E  
                                    _ModuleNameBuffer 01CF                                                   _abs 120C  
                           __size_of_applianceControl 00FC                                                   _isr 0004  
                                     _TMR2_Initialize 11AF                                          __CFG_BORV$LO 0000  
                                                 wreg 0009                                          __CFG_FOSC$HS 0000  
                                    _ModuleNameString 0064                                                  S6257 1010  
                                                S6249 1000                                          __CFG_LVP$OFF 0000  
                                        ___ftdiv@cntr 0038                                          ___ftdiv@sign 003D  
                                                ?_abs 0020                                                  l1140 12A8  
                                                l5101 087C                                                  l5123 08D6  
                                                l5115 08BD                                                  l6003 0EF6  
                                                l5213 17DD                                                  l5205 17C2  
                                                l5143 09D8                                                  l5215 17E9  
                                                l5207 17D0                                                  l5231 1526  
                                                l6103 0FDB                                                  l6023 0F21  
                                                l6007 0EFD                                                  l5137 09C2  
                                                l5401 06CD                                                  l5241 14EE  
                                                l5171 0A37                                                  l5155 0A13  
                                                l5219 17F7                                                  l5243 14F6  
                                                l5235 1544                                                  l6115 0FFA  
                                                l6051 0F66                                                  l6035 0F40  
                                                l6019 0F1C                                                  l4701 169B  
                                                l5085 13F8                                                  l5413 06E1  
                                                l5229 151E                                                  l5095 0866  
                                                l5167 0A2F                                                  l5159 0A1B  
                                                l5247 1514                                                  l6071 0F91  
                                                l6055 0F6B                                                  l6039 0F47  
                                                l4801 07C1                                                  l5521 0B12  
                                                l4705 16A2                                                  l5433 071D  
                                                l5441 0741                                                  l5417 06E9  
                                                l5425 070D                                                  l5409 06D9  
                                                l4803 07EA                                                  l5531 0B37  
                                                l5523 0B18                                                  l4715 16CA  
                                                l4707 16AC                                                  l5187 1792  
                                                l6251 0779                                                  l6083 0FB0  
                                                l6067 0F8A                                                  l5533 0B3F  
                                                l5525 0B1F                                                  l4717 16D2  
                                                l4709 16B1                                                  l4901 1491  
                                                l6253 0788                                                  l5445 0748  
                                                l5429 0715                                                  l6255 0B4D  
                                                l5527 0B27                                                  l5519 0B0B  
                                                l4751 161C                                                  l4823 1415  
                                                l4903 14A7                                                  l5463 0782  
                                                l6087 0FB5                                                  l6247 0D38  
                                                l4737 120A                                                  l4809 07FA  
                                                l5529 0B2F                                                  l5537 0B47  
                                                l4753 1628                                                  l4825 1421  
                                                l4817 12FF                                                  l5449 074F  
                                                l5641 0812                                                  l5801 0C90  
                                                l4915 12C8                                                  l4763 1643  
                                                l4907 14AF                                                  l5459 0773  
                                                l5635 080D                                                  l6099 0FD4  
                                                l5811 0CC4                                                  l5803 0C96  
                                                l4685 12E0                                                  l4781 078E  
                                                l4677 1373                                                  l4853 0920  
                                                l4829 1429                                                  l5821 0CED  
                                                l4783 079D                                                  l4679 137F  
                                                l4759 163A                                                  l5671 1485  
                                                l5911 0E1E                                                  l5831 0D1B  
                                                l5815 0CDB                                                  l5807 0CAD  
                                                l5727 0B81                                                  l4793 07B5  
                                                l4961 1354                                                  l4945 176E  
                                                l4937 1730                                                  l4929 1713  
                                                l5665 1464                                                  l5657 084C  
                                                l5649 0829                                                  l5841 0D49  
                                                l5745 0BC9                                                  l4779 0797  
                                                l4875 0968                                                  l4859 0938  
                                                l5683 1318                                                  l5667 146C  
                                                l5659 084D                                                  l5923 0E3D  
                                                l5907 0E16                                                  l5843 0D6A  
                                                ?_isr 0076                                                  l4949 1774  
                                                l4885 096C                                                  l4869 0949  
                                                l5829 0D15                                                  l5837 0D32  
                                                l5765 0C00                                                  l5861 0DA6  
                                                l4799 07BD                                                  l4887 08FE  
                                                l5943 0E69                                                  l5927 0E43  
                                                l5855 0D85                                                  l5783 0C4B  
                                                l5775 0C25                                                  l5839 0D45  
                                                l4889 09A6                                                  l5793 0C6A  
                                                l5785 0C51                                                  l5769 0C13  
                                                l5971 0EAC                                                  l5955 0E88  
                                                l5939 0E62                                                  l5891 0DF1  
                                                l5875 0DCA                                                  l5787 0C58  
                                                l5991 0ED7                                                  l5975 0EB3  
                                                l5959 0E8D                                                  l5895 0DF7  
                                                l5879 0DD2                                                  l5987 0ED2  
                                                STR_1 183B                                                  STR_2 183B  
                                                STR_3 1819                                                  STR_4 183B  
                                                STR_5 183B                                                  STR_6 183B  
                                                STR_7 183B                                                  STR_8 183B  
                                                STR_9 183B                                                  u5305 0A38  
                                                u5155 088E                                                  u5315 0A3E  
                                                u5235 09E4                                                  _PEIE 005E  
                                                u5165 089E                                                  u5245 09F4  
                                                u5405 17DE                                                  u4615 16A7  
                                                u5175 08BE                                                  u5185 08CD  
                                                u5265 0A1C                                                  u5345 1799  
                                                u4635 16C0                                                  u5195 08D7  
                                                u5275 0A22                                                  u4565 12E7  
                                                u4575 12EC                                                  u4655 16CD  
                                                u5375 17C3                                                  u4745 161F  
                                                u5545 155B                                                  u6507 15FF  
                                                u6517 160D                                                  u4765 1629  
                                                u5805 0D83                                                  u6527 15B4  
                                                u4695 16E7                                                  u4775 1633  
                                                u5815 0DA1                                                  u5735 0C23  
                                                u6537 15C0                                                  u4785 163B  
                                                u5745 0C49                                                  u6547 15CC  
                                                u5755 0C68                                                  u6467 0B61  
                                                u6557 15DA                                                  u6477 1234  
                                                u4965 095E                                                  u5765 0C8E  
                                                u6567 1223                                                  u6487 15E7  
                                                u5775 0CEB                                                  u6497 15F3  
                                                u5785 0D13                                                  _TMR2 001A  
                                                _TMR4 0415                                                  _TMR6 041C  
                                                _WPUB 020D                                                  _WPUD 020F  
                                                _WPUE 0210                                                  _WPUG 048D  
                                        __CFG_WRT$OFF 0000                                                  abs@a 0020  
                                                _atoi 078E                                                  _main 0B5B  
                                        ___ftpack@arg 0020                                          ___ftpack@exp 0023  
                  applicationControlRGB@CompleteClock 00D6                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  btemp 007E  
                             _copy_parentalLockBuffer 01B8                                                  start 0100  
                                       __CFG_IESO$OFF 0000                                       _TMR3_Initialize 11E5  
                              __size_of_pinINIT_extra 0015                    applicationControlRGB@NeedBluePulse 00BA  
                                        ___ftmul@cntr 0036                                          ___ftmul@sign 0037  
                      applicationControlRGB@remainder 00A0                                          ___fttol@exp1 004B  
                                               ??_abs 0022                                          ___fttol@lval 0047  
                                               ??_isr 007A                   applianceControl@charParentalControl 0031  
                                               ?_atoi 0026                                                 ?_main 0076  
                                               STR_10 182F                                                 STR_11 1838  
                                               STR_12 1838                                                 STR_20 1808  
                                               STR_13 1838                                                 STR_14 1825  
                                               STR_15 182A                                                 STR_16 183B  
                                               STR_17 1834                                         __CFG_WDTE$OFF 0000  
                                               STR_18 183B                                                 STR_19 1820  
                                     __end_of___ftdiv 08F8                                       __end_of___ftmul 0A5F  
                                               _T1CON 0018                                       __end_of___fttol 1800  
                                               _T2CON 001C                                                 _T3CON 0413  
                                               _RC1IF 008D                                                 _T4CON 0417  
                             _AllColorIntensityString 005E                                                 _T5CON 041A  
                                               _T6CON 041E                                       __end_of___lwdiv 1648  
                                               i1l460 008B                                                 i1l462 00A2  
                                               i1l456 0060                                                 i1l466 00B5  
                                               i1l458 0075                                                 i1l476 00FB  
                                               i1l585 1296                                                 _TMR1H 0017  
                                               _TMR3H 0412                                                 _TMR1L 0016  
                                               _TMR3L 0411                                                 _TMR5H 0419  
                                               _TMR5L 0418                                ??_hexadecimalToDecimal 0028  
                                     _TMR4_Initialize 11C4                                       _charSwitchState 0168  
                      applicationControlRGB@strGreenH 00C5                        applicationControlRGB@strGreenL 00C8  
                                      __CFG_FCMEN$OFF 0000                                         ___awtoft@sign 002D  
                                     _CCP7_Initialize 1191                                       __end_of_isdigit 120C  
                                       ___ftpack@sign 0024                                                 atoi@a 002B  
                                               atoi@s 0026                                                 _token 0065  
    applicationControlRGB@ConvertIntoTenMsRangeFactor 00E0                                                 main@j 02D4  
                                               main@k 02D6                               __end_of_TMR1_Initialize 11C4  
                                      __CFG_BOREN$OFF 0000                  _ConvertIntegertoStringRedColorBuffer 013A  
                      __size_of_applicationControlRGB 0611                         _RedColorIntensityStringLength 01E4  
                       __end_of_applicationControlRGB 078E                                                 status 0003  
                                               wtemp0 007E                                       __end_of_sprintf 09AB  
 applicationControlRGB@ConvertIntToTimeInMicrosecBlue 00E8                                       __end_of_strcspn 1519  
                                     __end_of_strncpy 14BA                                 __end_of_clearAllPorts 124F  
                                 _GPIO_pin_Initialize 1437                                       _TMR5_Initialize 11F1  
                                      __CFG_MCLRE$OFF 0000                                       __initialization 0102  
                             ?_copyReceivedDataBuffer 0076                                          __end_of_atoi 07FF  
                                        __end_of_main 1000                                       _CCP8_Initialize 119B  
                                          _ErrorNames 01CA                               __end_of_TMR2_Initialize 11B9  
                                      __CFG_LPBOR$OFF 0000                                 _GreenLedSwitchCounter 01D8  
                                              ??_atoi 0028                                                ??_main 0055  
                                       ___fttol@sign1 0046                              _BlueColorIntensityBuffer 0154  
                                ?_GPIO_pin_Initialize 0076             __end_of_TransmissionIndicationLedBlinking 123D  
          __size_of_TransmissionIndicationLedBlinking 0011                   ??_TransmissionIndicationLedBlinking 0020  
                  ?_TransmissionIndicationLedBlinking 0076                     _TransmissionIndicationLedBlinking 122C  
                                  _switchstatusbuffer 0162                         applicationControlRGB@RedPulse 00A6  
                                       _pinINIT_extra 124F                                       _TMR6_Initialize 11CF  
                            _BlueColorIntensityString 005F                                       _CCP9_Initialize 11A5  
                                              _CCP7IF 00A2                                                _CCP8IF 00A3  
                                              _CCP9IF 00A6                                                _CCPR7H 0615  
                                              _CCPR8H 0618                                                _CCPR9H 061B  
                                              _CCPR7L 0614                                                _CCPR8L 0617  
                                              _CCPR9L 061A                                      __end_of___awtoft 140F  
                                              _ANSELA 018C                                                _ANSELB 018D  
                                              _ANSELD 018F                                                _ANSELE 0190  
                                              _ANSELF 040C                                      __end_of___ftpack 16F7  
                                              _ANSELG 040D                                                _T1GCON 0019  
                                              _T3GCON 0414                                                _T5GCON 041B  
                                              _RC1REG 0199                                   _RedLedSwitchCounter 01DA  
                                              _RC1STA 019D                                                i1l4005 0053  
                                              i1l4103 00E3                                                i1l4031 0081  
                                              i1l4015 006C                                                i1l4063 00AF  
                                              i1l4047 0098                               __end_of_TMR3_Initialize 11F1  
                                              i1l4085 00CB                                                i1l3817 1291  
                                              i1l3983 0017                                                i1l3997 0040  
                                              i1l3999 0049                                      __end_of___lwtoft 1279  
                                              _TX1REG 019A                                                _TX1STA 019E  
                                      __CFG_PWRTE$OFF 0000                        __end_of_copyReceivedDataBuffer 157B  
                         __size_of_sendAcknowledgment 001E                        __size_of_sendAcknowledgmentRGB 0020  
                                 _FinalFramebitBuffer 00EF                         __end_of_sendAcknowledgmentRGB 13AD  
                                              ___wmul 12DD                                             ??___ftdiv 0034  
                                           ??___ftmul 002E                                             ??___fttol 0042  
                                           ??___lwdiv 0024                                                _memset 12C2  
                             __end_of_TMR4_Initialize 11CF            sendAcknowledgmentRGB@currentStateBufferRGB 0023  
                                              _strcat 140F                                                _strchr 12A8  
                                              _strcmp 1461                                                _strcpy 12F9  
                                              _strlen 136E                               __end_of_CCP7_Initialize 119B  
                                              _strtok 0804                                                _strspn 1519  
                               ??_GPIO_pin_Initialize 0020                                 ___ftmul@f3_as_product 0033  
                            _mainReceivedDataPosition 0072                                      _applianceControl 0A5F  
                                           ??_isdigit 0020                                        ?_pinINIT_extra 0076  
                                           ??_sprintf 002E                                             ??_strcspn 0029  
                          ??_SwitchOffStatustToGatway 0022                                             ??_strncpy 0023  
applicationControlRGB@ConvertIntToTimeInMicrosecGreen 00E5                                      ?_TMR1_Initialize 0076  
                             __end_of_TMR5_Initialize 11FD                               __end_of__initialization 0179  
                       applicationControlRGB@strBlueH 00CB                         applicationControlRGB@strBlueL 00CE  
                             __end_of_CCP8_Initialize 11A5                                            ___ftdiv@f1 0031  
                                          ___ftdiv@f2 002E                                            ___ftdiv@f3 0039  
                                          ___awtoft@c 0028                                            ___ftmul@f1 0028  
                                          ___ftmul@f2 002B                                            ___fttol@f1 003E  
                                      __pcstackCOMMON 0076                      __size_of_SwitchOnStatustToGatway 0033  
                                        __pidataBANK0 07FF                                          __pidataBANK2 11DA  
                                        __pidataBANK3 14BA                                          __pidataBANK4 13CD  
                                        __pidataBANK5 157B                                          __pidataBANK6 13AD  
                                        __pidataBANK7 1648                                      ?_TMR2_Initialize 0076  
                             __end_of_TMR6_Initialize 11DA             applicationControlRGB@RedColorIntensitystr 004E  
                    applicationControlRGB@Allcolorstr 0052                                            ___lwtoft@c 0028  
                             __end_of_CCP9_Initialize 11AF                         sendAcknowledgmentRGB@Tx_count 0021  
                                          __pbssBANK0 005C                                            __pbssBANK1 00EB  
                                          __pbssBANK2 0120                                            __pbssBANK3 01CF  
                                          __pbssBANK4 0220                                      ?_TMR3_Initialize 0076  
                                     __CFG_VCAPEN$OFF 0000                                    __size_of_errorsISR 0019  
                        applicationControlRGB@strRedH 00BF                          applicationControlRGB@strRedL 00C2  
                      _BlueColorIntensityStringLength 01DE                                            __pmaintext 0B5B  
                                 _IntegerSwitchNumber 0134                                               ?___wmul 0020  
                                          __pintentry 0004                            sendAcknowledgment@Tx_count 0021  
                                             _CCP7CON 0616                                               _CCP9CON 061C  
                                             ?_memset 0020                                      ?_TMR4_Initialize 0076  
                                           ?___awtoft 0028                                             ?___ftpack 0020  
                                     ??_pinINIT_extra 0020                                               ?_strcat 0020  
                                             ?_strchr 0020                                               ?_strcmp 0020  
                                             ?_strcpy 0020                                               ?_strlen 0020  
                                           ?___lwtoft 0028                                               ?_strtok 002E  
                                             ?_strspn 0027                                      ?_CCP7_Initialize 0076  
                    _start_PWM_Generation_For_BlueLed 0148                                               _SP1BRGH 019C  
                                             _SP1BRGL 019B                                      ?_TMR5_Initialize 0076  
                     _GreenColorIntensityStringLength 01E2                       _start_PWM_Generation_For_RedLed 014C  
         applianceControl@currentStateBufferPositions 003E                                      ?_CCP8_Initialize 0076  
                    applianceControl@chDimmerSpeedLSB 0030                      applianceControl@chDimmerSpeedMSB 002F  
                                             _Timer1H 0146                                               _Timer1L 0144  
                                             _Timer3H 0142                                               _Timer3L 0140  
                                             _Timer5H 013E                                               _Timer5L 013C  
                     applicationControlRGB@GreenPulse 00AA                                               ___ftdiv 084F  
                                     __size_of___wmul 001C                                               ___ftmul 09AB  
                                             ___fttol 1779                              _sendFinalBufferToGAteway 0220  
                                             ___lwdiv 1613                                       __CFG_STVREN$OFF 0000  
                          _copymainReceivedDataBuffer 024E                                            ??___awtoft 002B  
                                          ??___ftpack 0025                                       __size_of_memset 001B  
                                    ?_TMR6_Initialize 0076                                            _errorsMain 1315  
                                             __ptext1 0804                                               __ptext2 1519  
                                             __ptext3 14E9                                               __ptext4 12A8  
                                             __ptext5 1461                                               __ptext6 1315  
                                             __ptext7 1549                                               __ptext8 017D  
                                             __ptext9 148B                                            ??___lwtoft 002B  
                                     __size_of_strcat 0028                                       __size_of_strchr 001A  
                                     __size_of_strcmp 002A                                       __size_of_strcpy 001C  
                                     __size_of_strlen 001F                                     __end_of_hexpowers 1808  
                                           _T1CONbits 0018                                      ?_CCP9_Initialize 0076  
                                     __size_of_strtok 004B                                       __size_of_strspn 0030  
                                           _T2CONbits 001C                                          __size_of_abs 000F  
                                             _isdigit 11FD                                          __size_of_isr 00FC  
                                           _T3CONbits 0413                                     __end_of_errorsISR 12A8  
                                           _T4CONbits 0417                                             _T5CONbits 041A  
                                           _T6CONbits 041E                               _RedColorIntensityBuffer 0158  
                       __size_of_hexadecimalToDecimal 0082                  sendAcknowledgment@currentStateBuffer 0023  
                    __end_of_SwitchOffStatustToGatway 15E0                             _IntergerRedColorIntensity 00ED  
                                             main@man 02DA                                               _sprintf 08F8  
                                             clrloop0 1186                                               _strcspn 14E9  
                                             _strncpy 148B                                  end_of_initialization 0179  
                             _RedColorIntensityString 0061                                               init_ram 118B  
                            applicationControlRGB@end 00A4                                               memset@c 0020  
                                             memset@n 0022                                               memset@p 0025  
                                             initloop 118C                                 _applicationControlRGB 017D  
                                   _EUSART_Initialize 1279                              __end_of_applianceControl 0B5B  
                  applianceControl@integerSwitchState 0040                               _SwitchOnStatustToGatway 15E0  
                applicationControlRGB@SwitchNumberstr 004C                                    ?_EUSART_Initialize 0076  
          applicationControlRGB@BlueColorIntensitystr 0050                                               strcmp@r 0023  
                                             strlen@s 0020                                   ??_EUSART_Initialize 0020  
                                             strspn@i 002B                  applicationControlRGB@SwitchStatusstr 004D  
                                           _PORTBbits 000D                                             _PORTDbits 000F  
                                           _PORTEbits 0010                                             _PORTFbits 028C  
                                           _PORTGbits 028D                __end_of_ReceivingIndicationLedBlinking 122C  
             __size_of_ReceivingIndicationLedBlinking 0011                        _ReceivingIndicationLedBlinking 121B  
                              __size_of_clearAllPorts 0012                                             _TRISBbits 008D  
                                           _TRISCbits 008E                                             _TRISDbits 008F  
                                           _TRISEbits 0090                                             _TRISFbits 030C  
                                           _TRISGbits 030D                                     _levelofRedLed_LSB 016B  
                                   _levelofRedLed_MSB 016C                                            main@k_1111 02D8  
                                _IntergerSwitchStatus 0132               SwitchOffStatustToGatway@SwitchOffNumber 0020  
                           __end_of_EUSART_Initialize 128F                                           ___ftdiv@exp 003C  
                   applicationControlRGB@ChildLockstr 0051              applianceControl@switchNumberStringBuffer 0038  
                          __end_of_sendAcknowledgment 136E                                           ___ftmul@exp 0032  
                         __end_of_GPIO_pin_Initialize 1461                                        __end_of___wmul 12F9  
                              _mainReceivedDataBuffer 02A0                                 _sendAcknowledgmentRGB 138D  
              _ConvertIntegertoStringGreenColorBuffer 0138                                   _FinalframebitString 015E  
                                         ?_errorsMain 0020                                         _charchildLock 0067  
                                      __end_of_memset 12DD                                   _Finalframebitbuffer 01DC  
                                      __end_of_strcat 1437                                        __end_of_strchr 12C2  
                                      __end_of_strcmp 148B                                        __end_of_strcpy 1315  
                                      __end_of_strlen 138D    applicationControlRGB@ConvertIntToTimeInMicrosecRed 00E2  
                                      __end_of_strtok 084F                                        __end_of_strspn 1549  
                                 start_initialization 0102                                    _SwitchNumberBuffer 015A  
                                         __end_of_abs 121B                                 applianceControl@F4004 0166  
                               applianceControl@F4006 0164                                           __end_of_isr 0100  
                                  _SwitchNumberString 0063                            applicationControlRGB@start 00A2  
                              ?_applicationControlRGB 004C                             ??_SwitchOnStatustToGatway 0022  
                  applicationControlRGB@ModuleNamestr 00BE                                 _AcknowledgementString 015F  
                           _GreenColorIntensityBuffer 0156                                         _clearAllPorts 123D  
                            __size_of_TMR1_Initialize 000B               copyReceivedDataBuffer@dataBufferCounter 0021  
                                            ??___wmul 0024                     __size_of_SwitchOffStatustToGatway 0033  
                           _GreenColorIntensityString 0060                             ?_SwitchOffStatustToGatway 0020  
                                         __pdataBANK0 0067                                           __pdataBANK2 0164  
                                         __pdataBANK3 01A0                                           __pdataBANK4 024E  
                                         __pdataBANK5 02A0                                           __pdataBANK6 0320  
                                         __pdataBANK7 03A0                                              ??_memset 0024  
         applicationControlRGB@GreenColorIntensitystr 004F                                              ??_strcat 0022  
                                            ??_strchr 0024                                              ??_strcmp 0022  
                                            ??_strcpy 0021                                              ??_strlen 0022  
                                            ??_strtok 0030                                              ??_strspn 0029  
                                   __size_of___awtoft 0022                                     __size_of___ftpack 0065  
                                    _mainDataReceived 0152                                           __pbssCOMMON 0070  
                                           ___latbits 0002                                     __size_of___lwtoft 0015  
                                       __pcstackBANK0 0020                                         __pcstackBANK1 00A0  
                                       __pcstackBANK5 02D2                              __size_of_TMR2_Initialize 000A  
                                   errorsISR@Tx_count 0078                                  _mainReceivedDataFlag 0150  
                                        _isdigit$1387 0020                              ??_copyReceivedDataBuffer 0020  
                          __size_of_EUSART_Initialize 0016                                           sprintf@flag 0032  
                                         sprintf@prec 0037                                    errorsMain@Tx_count 0022  
                                 __size_of_errorsMain 001D                                        ?_clearAllPorts 0076  
                                    ___lwdiv@dividend 0022                                       errorsISR@errNum 0076  
                            __size_of_TMR3_Initialize 000C                                      errorsMain@errNum 0020  
                                            ?___ftdiv 002E                                              ?___ftmul 0028  
                                            ?___fttol 003E                                ?_sendAcknowledgmentRGB 0076  
                                            ?___lwdiv 0020                                       _ChildLockBuffer 0074  
                     __end_of_SwitchOnStatustToGatway 1613                                             __pswtext1 1000  
                                           __pswtext2 1010                                      _IntegerChildLock 0130  
                                     _ChildLockString 005D                                              _BAUD1CON 019F  
                               __end_of_pinINIT_extra 1264                                              ?_isdigit 0076  
                                     _ChildLockbuffer 0160                         _AllColorIntensityStringLength 01E0  
                            __size_of_TMR4_Initialize 000B                                             _hexpowers 1800  
                 applianceControl@charFinalFrameState 0032                                      ___lwdiv@quotient 0026  
                           _tempRGBReceivedDataBuffer 0320                                              ?_sprintf 0028  
                                           _errorsISR 128F                                              ?_strcspn 0027  
                                            ?_strncpy 0020                              __size_of_CCP7_Initialize 000A  
             applianceControl@dimmerSpeedStringBuffer 003A                                        ___wmul@product 0024  
                                           clear_ram0 1185                                           strncpy@from 0020  
                                            _PIE1bits 0091                                           strncpy@size 0021  
                                            _PIE3bits 0093                                              _PIE4bits 0094  
                   _start_PWM_Generation_For_GreenLed 014A                                    _SwitchStatusBuffer 0075  
                                   ?_applianceControl 002D                           hexadecimalToDecimal@dec_val 002C  
                                            _PIR1bits 0011                          __end_of_hexadecimalToDecimal 1779  
                                            _PIR3bits 0013                                              _PIR4bits 0014  
                            __size_of_TMR5_Initialize 000C                                    ??_applianceControl 0033  
                                  _SwitchStatusString 0062                              __size_of_CCP8_Initialize 000A  
                                   ??_TMR1_Initialize 0020                                 hexadecimalToDecimal@i 0030  
                                   ___wmul@multiplier 0020                     applicationControlRGB@NeedRedPulse 00B2  
               SwitchOnStatustToGatway@SwitchOnNumber 0020                   applicationControlRGB@NeedGreenPulse 00B6  
                       applianceControl@charSwitchLSB 002D                         applianceControl@charSwitchMSB 0037  
                            __size_of_TMR6_Initialize 000B                                            ?_errorsISR 0076  
                            __size_of_CCP9_Initialize 000A                       __size_of_copyReceivedDataBuffer 0032  
                                   ??_TMR2_Initialize 0020                                       ??_clearAllPorts 0020  
                    ??_ReceivingIndicationLedBlinking 0020                       ?_ReceivingIndicationLedBlinking 0076  
                         _mainDataReceiveStringLength 01E6                                      __size_of___ftdiv 00A9  
                                    __size_of___ftmul 00B4                                      __size_of___fttol 0087  
                                   _allPeripheralInit 1332                                      __size_of___lwdiv 0035  
                                            ___awtoft 13ED                                              ___ftpack 1692  
                                        ??_errorsMain 0022                                    _sendAcknowledgment 1350  
                                   ??_TMR3_Initialize 0020                                              ___lwtoft 1264  
                                  ?_allPeripheralInit 0076                                            sprintf@idx 0033  
                                          sprintf@val 0035                                            strcat@from 0020  
                                    __size_of_isdigit 000F                                       ___lwdiv@divisor 0020  
                                 ?_sendAcknowledgment 0076                                       ___lwdiv@counter 0025  
                                            __ptext10 12F9                                              __ptext11 140F  
                                            __ptext20 1779                                              __ptext12 08F8  
                                            __ptext21 09AB                                              __ptext13 1613  
                                            __ptext30 1332                                              __ptext22 084F  
                                            __ptext14 138D                                              __ptext31 11CF  
                                            __ptext23 13ED                                              __ptext15 12C2  
                                            __ptext40 1191                                              __ptext32 11F1  
                                            __ptext24 1692                                              __ptext16 16F7  
                                            __ptext41 122C                                              __ptext33 11C4  
                                            __ptext25 0A5F                                              __ptext17 136E  
                                            __ptext42 15E0                                              __ptext34 11E5  
                                            __ptext26 1350                                              __ptext18 120C  
                                            __ptext43 15AD                                              __ptext35 11AF  
                                            __ptext27 078E                                              __ptext19 1264  
                                            __ptext44 121B                                              __ptext36 11B9  
                                            __ptext28 11FD                                              __ptext45 1437  
                                            __ptext37 1279                                              __ptext29 12DD  
                                            __ptext46 124F                                              __ptext38 11A5  
                                            __ptext47 123D                                              __ptext39 119B  
                                            __ptext49 128F                                   ??_allPeripheralInit 0020  
                     applianceControl@charSwitchSTATE 002E       applicationControlRGB@Convert255RangeintoHundred 00DA  
                             ??_applicationControlRGB 0053                                      __size_of_sprintf 00B3  
                                    __size_of_strcspn 0030                                      __size_of_strncpy 002F  
                                          strcpy@from 0020                                 main@dataBufferCounter 02D2  
                                         _partCounter 0136                                     ??_TMR4_Initialize 0020  
                                       __size_of_atoi 0071                                         __size_of_main 04A5  
                                  __end_of_errorsMain 1332                                     ??_CCP7_Initialize 0020  
                                  _currentStateBuffer 03A0                                            _RC1STAbits 019D  
                                ??_sendAcknowledgment 0020                            hexadecimalToDecimal@hexVal 0032  
                           _IntegerBlueColorIntensity 0070                             __end_of_allPeripheralInit 1350  
                                            int$flags 007E                                              atoi@sign 002A  
                            _IntegerAllColorIntensity 01D4                                _copyReceivedDataBuffer 1549  
                      applicationControlRGB@BluePulse 00AE                                     ??_TMR5_Initialize 0020  
                              _tempReceivedDataBuffer 01A0                          __size_of_GPIO_pin_Initialize 002A  
                                   ??_CCP8_Initialize 0020                                    _levelofBlueLed_LSB 016D  
                                  _levelofBlueLed_MSB 016E                                    _switchNumberBuffer 01EA  
                                      __pstringtext10 0000                                              isdigit@c 0021  
                                _hexadecimalToDecimal 16F7                                              memset@p1 0026  
                                         ??_errorsISR 0078                                  _mainDatacopyPosition 014E  
                                            intlevel1 0000                                             sprintf@ap 0034  
                                           sprintf@sp 0038                                             strchr@chr 0022  
                                           strchr@ptr 0020                                     ??_TMR6_Initialize 0020  
                                   __CFG_CLKOUTEN$OFF 0000                   applianceControl@integerSwitchNumber 003C  
                                           strcspn@s1 002D                                             strcspn@s2 0027  
                                   ??_CCP9_Initialize 0020                                             strncpy@cp 0024  
                             ??_sendAcknowledgmentRGB 0020                                             strncpy@to 0025  
                                  _parentalLockBuffer 02C0                                    _StopBitStringbufer 015C  
                                       __pstringtext1 1800                                         __pstringtext2 1819  
                                       __pstringtext3 1820                                         __pstringtext4 1825  
                                       __pstringtext5 182A                                         __pstringtext6 182F  
                                       __pstringtext7 1834                                         __pstringtext8 1838  
                                       __pstringtext9 183B                                              sprintf@c 0039  
                                            sprintf@f 0028                                              strcat@cp 0023  
                                            strcat@to 0024                                              strcmp@s1 0024  
                                            strcmp@s2 0020                                              strcpy@cp 0023  
                                            strlen@cp 0024                                              strcpy@to 0022  
                                            strcspn@i 002B                                         _StopBitString 015D  
                               ?_hexadecimalToDecimal 0026                                              strtok@s1 0033  
                                            strtok@s2 002E                                              strspn@s1 002D  
                                            strspn@s2 0027                                              strtok@sp 005C  
                                          _TX1STAbits 019E                                  _BlueLedSwitchCounter 01D6  
                            ?_SwitchOnStatustToGatway 0020                      _ConvertmaindataReceiveIntoString 0066  
                                 _levelofGreenLed_LSB 0169                                   _levelofGreenLed_MSB 016A  
                  applicationControlRGB@clockPerCycle 00DD                   applicationControlRGB@HexlevelBuffer 00D1  
                                     _TMR1_Initialize 11B9                              _SwitchOffStatustToGatway 15AD  
